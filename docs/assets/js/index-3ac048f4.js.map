{"version":3,"file":"index-3ac048f4.js","sources":["../../../code/src/components/device-scene/config.ts","../../../code/src/components/device-scene/methods.ts","../../../code/src/components/device-scene/colors.ts","../../../code/src/components/device-scene/index.vue"],"sourcesContent":["const KEYS = {\n  TEXT: 'TEXT', // 文字\n  JSQ: 'JSQ', // 集水器\n  LDB: 'LDB', // 冷冻泵\n  LQB: 'LQB', // 冷却泵\n  XBC: 'XBC', // 蓄冰槽\n  LXJ: 'LXJ', // 离心机\n  LGJ: 'LGJ', // 螺杆机\n  LGJ_2: 'LGJ_2', // 双头螺杆机\n  LGJ_3: 'LGJ_3', // 三机头螺杆机\n  LGJ_4: 'LGJ_4', // 四机头螺杆机\n  LQT: 'LQT', // 冷却塔\n  GL: 'GL', // 锅炉\n  BSHRQ: 'BSHRQ', // 板式换热器\n  BSHLQ: 'BSHLQ', // 板式换热器-制冷\n  FLRB: 'FLRB', // 风冷热泵\n  FJY_X: 'FJY_X', // 风机-右\n  FJZ_X: 'FJZ_X', // 风机-左\n  FJY: 'FJY', // 风机-右\n  FJZ: 'FJZ', // 风机-左\n  FM: 'FM', // 阀门\n  XFM: 'XFM' // 阀门\n}\n\nexport default {\n  // 本地缓存\n  indexdb: {\n    dbName: 'THREE__MODEL__DB',\n    tbName: 'TB',\n    version: 1\n  },\n  // 网格\n  mesh: {\n    // 接受阴影网格名称-（需要接受阴影）\n    receiveShadowName: [\n      '楼板',\n      '地面',\n      '底座',\n      '底板',\n      '基础',\n      '基础底座',\n      '冷却塔基础',\n      '草地',\n      'ground',\n      'Ground'\n    ],\n\n    // 动画材质网格名称\n    animatehName: [\n      '动画',\n      '螺杆A',\n      '螺杆B',\n      '螺杆A001',\n      '螺杆B001',\n      '螺杆A002',\n      '螺杆B002',\n      '叶轮A',\n      '叶轮B',\n      '叶轮C',\n      '阀门'\n    ],\n\n    // 透明网格名称\n    transparentName: ['透明', '透明外壳']\n  },\n\n  // 模型类型\n  keys: KEYS,\n  // 判断点击间隔时间\n  clickIntervalTime: 300,\n\n  meshKey: {\n    body: '__BODY_',\n    color: '__COLOR_',\n    warning: '__WARNING_',\n    local: '__LOCAL_',\n    disabled: '__DISABLED_',\n    pipe: '__PIPE__'\n  },\n\n  // 状态偏差值\n  statusOffset: {\n    TEXT: {\n      [KEYS.JSQ]: {\n        position: { x: -20, y: 10, z: 0 },\n        rotation: { x: 0, y: 270, z: 0 }\n      },\n      [KEYS.LDB]: {\n        position: { x: -60, y: 0, z: 0 }\n      },\n      [KEYS.LQB]: {\n        position: { x: 0, y: 0, z: 60 },\n        rotation: { x: 0, y: 270, z: 0 }\n      },\n      [KEYS.LXJ]: {\n        position: { x: 0, y: 16, z: 50 },\n        rotation: { x: -20, y: 0, z: 0 }\n      },\n      [KEYS.LGJ]: {\n        position: { x: 0, y: 16, z: 50 },\n        rotation: { x: -20, y: 0, z: 0 }\n      },\n      [KEYS.LQT]: {\n        position: { x: -60, y: 0, z: 0 }\n      },\n      [KEYS.BSHLQ]: {\n        position: { x: 0, y: 16, z: 40 }\n      }\n    },\n    WARNING: {\n      [KEYS.JSQ]: {\n        position: { x: 0, y: 62, z: 0 }\n      },\n      [KEYS.LDB]: {\n        position: { x: -4, y: 45, z: 0 }\n      },\n      [KEYS.LQB]: {\n        position: { x: 0, y: 45, z: 4 },\n        rotation: { x: 0, y: 270, z: 0 }\n      },\n      [KEYS.LXJ]: {\n        position: { x: 0, y: 78, z: 0 }\n      },\n      [KEYS.LGJ]: {\n        position: { x: 0, y: 78, z: 0 }\n      },\n      [KEYS.LQT]: {\n        position: { x: 0, y: 85, z: 0 }\n      },\n      [KEYS.BSHLQ]: {\n        position: { x: 0, y: 88, z: 0 }\n      }\n    },\n    STATUS: {\n      [KEYS.LDB]: {\n        position: { x: 9, y: 47, z: 0 }\n      },\n      [KEYS.LQB]: {\n        position: { x: 0, y: 47, z: -9 },\n        rotation: { x: 0, y: 270, z: 0 }\n      },\n      [KEYS.LXJ]: {\n        position: { x: 27, y: 67, z: 42 }\n      },\n      [KEYS.LGJ]: {\n        position: { x: -47, y: 67, z: 42 }\n      },\n      [KEYS.LQT]: {\n        position: { x: -35, y: 69, z: 26 }\n      }\n    },\n    DISABLED: {\n      [KEYS.LDB]: {\n        position: { x: 22, y: 47, z: 0 }\n      },\n      [KEYS.LQB]: {\n        position: { x: 0, y: 47, z: -22 },\n        rotation: { x: 0, y: 270, z: 0 }\n      },\n      [KEYS.LXJ]: {\n        position: { x: 40, y: 67, z: 42 }\n      },\n      [KEYS.LGJ]: {\n        position: { x: -34, y: 67, z: 42 }\n      },\n      [KEYS.LQT]: {\n        position: { x: -22, y: 69, z: 26 }\n      }\n    }\n  }\n}\n","import * as THREE from 'three'\n\nimport * as ThreeScene from 'three-scene'\n\nimport type { XYZ, ObjectItem } from 'three-scene/types/model'\nimport type { Config, ExtendOptions } from '.'\n\nimport DEFAULTCONFIG from './config'\nconst Hooks = ThreeScene.Hooks\n\nconst { raycaster, pointer, update: raycasterUpdate } = Hooks.useRaycaster()\nconst { initCSS2DRender, createCSS2DDom } = Hooks.useCSS2D()\nexport class DeviceThreeScene extends ThreeScene.Scene {\n  // 设备集合\n  deviceGroup?: InstanceType<typeof THREE.Group>\n  // 点位集合\n  dotGroup?: InstanceType<typeof THREE.Group>\n  // 管路集合\n  pipeGroup?: InstanceType<typeof THREE.Group>\n  // CSS2D 渲染器\n  css2DRender: InstanceType<typeof Hooks.CSS2DRenderer>\n  // 扩展参数\n  extend: Partial<ExtendOptions>\n  constructor(\n    options: ConstructorParameters<typeof ThreeScene.Scene>[0],\n    extend: Partial<ExtendOptions>\n  ) {\n    super(options)\n\n    this.extend = extend\n    this.css2DRender = initCSS2DRender(this.options, this.container)\n    this.css2DRender.domElement.className = 'three-scene__dot-wrap'\n\n    this.createClock()\n\n    this.addDeviceGroup()\n    this.addDotGroup()\n    this.addPipeGroup()\n    this.bindEvent()\n  }\n\n  // 添加设备组\n  addDeviceGroup() {\n    const group = new THREE.Group()\n    group.name = '设备组'\n    this.deviceGroup = group\n    this.addObject(group)\n  }\n\n  // 清除场景设备\n  clearDevice() {\n    if (this.deviceGroup) {\n      this.disposeObj(this.deviceGroup)\n    }\n    this.addDeviceGroup()\n    this.clearDot()\n    this.clearPipe()\n  }\n\n  // 添加设备\n  addDevice(...obj: any[]) {\n    if (this.deviceGroup) {\n      this.deviceGroup.add(...obj)\n    }\n  }\n\n  // 添加点位组\n  addDotGroup() {\n    const group = new THREE.Group()\n    group.name = '点位组'\n    this.scene.add(group)\n    this.dotGroup = group\n  }\n\n  // 清除场景点位\n  clearDot() {\n    if (this.dotGroup) {\n      this.disposeObj(this.dotGroup)\n    }\n    this.addDotGroup()\n  }\n\n  // 添加点位\n  addDot(item: ObjectItem, clickBack: (e: Event, label: any) => void) {\n    const pos = item.position\n    const { size, color } = item.font || {}\n    const { x = 0, y = 0, z = 0 } = pos || {}\n    const label = createCSS2DDom({\n      name: `\n        <div class=\"bg\"></div>\n        <span class=\"inner\" style=\"${\n          size != void 0 ? `font-size: ${typeof size === 'string' ? size : size + 'px'};` : ''\n        } ${color != void 0 ? `color: ${color}` : ''}\"></span>\n      `,\n      className: 'dot-2D-label',\n      position: [x, y, z],\n      onClick: clickBack\n    })\n    label.name = item.name\n    label.data = item\n    this.dotGroup?.add(label)\n    return label\n  }\n\n  // 添加管路组\n  addPipeGroup() {\n    const group = new THREE.Group()\n    group.name = '管路组'\n    this.scene.add(group)\n    this.pipeGroup = group\n  }\n\n  // 添加管路\n  addPipe(...obj: any[]) {\n    if (this.pipeGroup) {\n      this.pipeGroup.add(...obj)\n    }\n  }\n\n  // 清除管路组\n  clearPipe() {\n    if (this.pipeGroup) {\n      this.disposeObj(this.pipeGroup)\n    }\n    this.addPipeGroup()\n  }\n\n  // 双击\n  onDblclick(e: MouseEvent) {\n    const dom = this.container\n    const scale = this.options.scale\n    raycasterUpdate(e as PointerEvent, dom, scale)\n\n    if (this.deviceGroup) {\n      // 设置新的原点和方向向量更新射线, 用照相机的原点和点击的点构成一条直线\n      raycaster.setFromCamera(pointer, this.camera)\n      // 检查射线和物体之间的交叉点（包含或不包含后代）\n      const objects = [this.deviceGroup, this.pipeGroup] as any\n      const interscts = raycaster.intersectObjects(objects)\n      if (interscts.length) {\n        const obj = interscts[0].object\n        const object = this.findParentGroupGroup(obj)\n        if (!object) return\n        if (typeof this.extend?.onDblclick === 'function') this.extend.onDblclick(object)\n      }\n    }\n  }\n\n  // 移动\n  onPointerMove(e: PointerEvent) {\n    this.checkIntersectObjects(e)\n  }\n\n  // 弹起\n  onPointerUp(e: PointerEvent) {\n    super.onPointerUp(e)\n\n    let s = e.timeStamp - this.pointer.tsp\n    // 判断是否未点击\n    const isClick = s < DEFAULTCONFIG.clickIntervalTime\n    if (e.button == 2) {\n      // console.log('你点了右键')\n      if (isClick && typeof this.extend?.onClickRight === 'function') this.extend.onClickRight(e)\n    } else if (e.button == 0) {\n      // console.log('你点了左键')\n      isClick && this.checkIntersectObjects(e)\n    } else if (e.button == 1) {\n      // console.log('你点了滚轮')\n    }\n  }\n\n  // 检查交叉几何体\n  checkIntersectObjects(e: PointerEvent) {\n    const dom = this.container\n    const scale = this.options.scale\n    raycasterUpdate(e, dom, scale)\n    let isClick = e.type == 'pointerdown' || e.type == 'pointerup'\n    const objects =\n      this.deviceGroup?.children.filter((it: any) => it.visible && it._isAnchor_) || []\n\n    // 设置新的原点和方向向量更新射线, 用照相机的原点和点击的点构成一条直线\n    raycaster.setFromCamera(pointer, this.camera)\n    let interscts = raycaster.intersectObjects(objects, isClick)\n    dom.style.cursor = interscts.length > 0 ? 'pointer' : 'auto'\n    if (!isClick) {\n      return\n    }\n\n    if (interscts.length) {\n      const object = interscts[0].object\n      if (!object) return\n      if (typeof this.extend?.onClickLeft === 'function') this.extend.onClickLeft(object)\n    } else {\n      if (typeof this.extend?.onClickLeft === 'function') this.extend.onClickLeft()\n    }\n  }\n\n  // 查找父级组合\n  findParentGroupGroup(object: any) {\n    const _find = (obj: any) => {\n      let parent = obj.parent\n      if (!parent) {\n        return\n      }\n      if (parent && (parent._isDevice_ || parent._isPipe_)) {\n        return parent\n      }\n      return _find(parent)\n    }\n    return _find(object)\n  }\n\n  modelAnimate() {\n    // css2D 渲染器\n    this.css2DRender.render(this.scene, this.camera)\n\n    if (typeof this.extend.animateCall === 'function') this.extend.animateCall()\n\n    // 设备动画\n    if (this.deviceGroup && this.deviceGroup.children.length) {\n      let delta = this.clock?.getDelta()\n      this.deviceGroup.children.forEach((el: any) => {\n        let data = el.data\n        if (!data) return\n        let extra = el.extra\n        // 运行状态等于设定值则更新\n        if (extra && (data?.status ?? 0) > 0) {\n          extra.mixer.update(delta)\n        }\n\n        // 故障状态等于设定值则更新\n        const warning = el[DEFAULTCONFIG.meshKey.warning]\n        if (warning && (data?.error || 0) > 0) {\n          warning.mixer.update(delta)\n        }\n      })\n    }\n\n    // 管路动画\n    if (this.pipeGroup && this.pipeGroup.children.length) {\n      this.pipeGroup.children.forEach((el: any) => {\n        const pipe = el[DEFAULTCONFIG.meshKey.pipe]\n        if (pipe) {\n          const data = el.data\n          const bind = data.bind || []\n          // 运行中的设备\n          const runingDevices = (this.deviceGroup?.children || [])\n            .filter(\n              (item: any) => item.data && item.data.deviceCode && (item.data?.status ?? 0) > 0\n            )\n            .map((it: any) => it.data)\n          // 绑定的运行设备\n          const bingDevices = this.findFilterDevice(bind, runingDevices)\n\n          // 长度大于 0 则运行\n          const run = bingDevices.length > 0\n          let step = 0.01\n          // 绑定动画方向左右\n          if (data.left && data.right) {\n            const { left, right } = data\n            const isRight = this.findFilterDevice(right, bingDevices).length > 0\n            const isLeft = this.findFilterDevice(left, bingDevices).length > 0\n            step = isLeft && isRight ? 0 : isRight ? -0.01 : 0.01\n          }\n          pipe.forEach((ms: any) => {\n            if (run) {\n              ms.material.map.offset.y -= step\n            }\n            ms.material.opacity = !!run ? 0.3 : 0\n          })\n        }\n      })\n    }\n  }\n\n  // 查找满足条件运行设备\n  findFilterDevice = (filters: any[], devices: any[]) => {\n    if (filters.length == 0 || devices.length == 0) return []\n    let runDev: ObjectItem[] = []\n    filters.forEach(item => {\n      if (item instanceof Array) {\n        let s: ObjectItem[] = []\n        const d = item.filter(it => {\n          if (it instanceof Array) {\n            const ar = devices.filter(t => it.includes(t.deviceCode))\n            if (ar.length) {\n              ar.forEach(t => {\n                if (!s.includes(t)) s.push(t)\n              })\n            }\n            return ar.length > 0\n          }\n          const a = devices.find(t => t.deviceCode == it)\n          if (a && !s.includes(a)) s.push(a)\n          return !!a\n        })\n        if (d.length == item.length) {\n          runDev = runDev.concat(s)\n        }\n      } else {\n        const d = devices.find(it => it.deviceCode == item)\n        if (d) runDev.push(d)\n      }\n    })\n    return runDev\n  }\n\n  // 获取动画目标点\n  getAnimTargetPos(config: Partial<Config>, _to?: XYZ, _target?: XYZ) {\n    if (!this.controls) return\n    const to = _to || config.to || { x: -104, y: 7, z: 58 }\n    const target = _target || config.target || { x: 0, y: 0, z: 0 }\n    // 中心点位\n    this.controls.target.set(target.x, target.y, target.z)\n    return to\n  }\n\n  // 获取所有对象\n  getAll() {\n    return this.deviceGroup?.children.concat(this.dotGroup?.children || []) || []\n  }\n\n  resize() {\n    super.resize()\n    const { width, height } = this.options\n    this.css2DRender.setSize(width, height)\n  }\n\n  dispose() {\n    this.disposeObj(this.deviceGroup)\n    this.disposeObj(this.dotGroup)\n    this.disposeObj(this.pipeGroup)\n\n    this.clock = void 0\n    // @ts-ignore\n    this.css2DRender = void 0\n    this.deviceGroup = void 0\n    this.dotGroup = void 0\n    this.pipeGroup = void 0\n    this.extend = {}\n    super.dispose()\n  }\n}\n","import type { Colors } from 'three-scene/types/color'\n\n// 颜色\nconst color = {\n  normal: 0x88a1b5,\n  runing: 0x2e77f8,\n  error: 0xc20c00\n}\n\nexport const colors: Colors = {\n  // 正常\n  normal: {\n    color: color.normal,\n    main: [0x88a1b5, 0x292e31],\n    text: 0xb9dbff,\n    FM: 0x606c74\n  },\n  // 运行\n  runing: {\n    color: color.runing,\n    main: 0x2e77f8,\n    FM: 0x067417\n  },\n  // 故障\n  error: {\n    color: color.error,\n    main: 0xb54425,\n    FM: 0xe82d1b\n  }\n}\n","<template>\n  <div :class=\"$style['device-scene']\">\n    <!-- 操作按钮 -->\n    <div class=\"scene-operation\">\n      <div class=\"btn\" @click=\"() => updateObject(true)\">随机更新</div>\n      <div class=\"btn\" v-if=\"cruise.visible\" @click=\"() => scene?.toggleCruise()\">定点巡航</div>\n      <div class=\"btn\" @click=\"() => scene?.getPosition()\">场景坐标</div>\n      <div class=\"btn\" @click=\"() => changeBackground(scene)\">切换背景</div>\n      <div class=\"btn\" @click=\"() => scene?.controlReset()\">控制器重置</div>\n      <div class=\"btn\" v-if=\"cruise.visible\" @click=\"() => scene?.toggleCruiseDepthTest()\">\n        巡航深度\n      </div>\n    </div>\n\n    <div :class=\"$style.container\" ref=\"containerRef\"></div>\n\n    <t-loading v-model=\"progress.show\" :progress=\"progress.percentage\"></t-loading>\n\n    <!-- 设备信息弹窗 -->\n    <div :class=\"$style.dialog\" v-if=\"dialog.show\" :style=\"dialog.style\">\n      <slot\n        name=\"dialog\"\n        :data=\"dialog.data\"\n        :title=\"dialog.title\"\n        :position=\"dialog.position\"\n      ></slot>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport tLoading from '../loading/index.vue'\nimport { ref, watch, toRaw, onMounted, withDefaults, nextTick } from 'vue'\nimport * as THREE from 'three'\n\nimport { DeviceThreeScene } from './methods'\n\nimport { colors } from './colors'\nimport { Utils, Hooks } from 'three-scene'\n\nimport DEFAULTCONFIG from './config'\n\nimport type { ObjectItem, ThreeModelItem } from 'three-scene/types/model'\n\nconst props = withDefaults(defineProps<import('./index').Props>(), {\n  dracoUrl: '',\n  dotKey: 'DOT',\n  dotShowStrict: true,\n  colors: () => ({}),\n  camera: () => ({}),\n  cruise: () => ({}),\n  fog: () => ({}),\n  render: () => ({}),\n  controls: () => ({}),\n  grid: () => ({}),\n  axes: () => ({}),\n  directionalLight: () => ({}),\n  colorMeshName: () => [],\n  anchorType: () => [],\n  mainBodyMeshName: () => ['主体'],\n  mainBodyExcludeType: () => ['FM'],\n  colorModelType: () => ['FM'],\n  indexDB: () => ({\n    cache: true\n  })\n})\n\ndefineOptions({\n  name: 'device-scene'\n})\n\n// 加载完成、更新、选择 anchorType 类型的模块、双击模型、点击 DOT 类型点位, 点击弹窗点位\nconst emits = defineEmits<{\n  init: [scene: InstanceType<typeof DeviceThreeScene>]\n  loaded: []\n  update: [list: ObjectItem[], isRandom?: boolean]\n  select: [item: ObjectItem]\n  dblclick: [item: ObjectItem]\n  'click-dot': [item: ObjectItem, e: PointerEvent]\n  'click-dialog-dot': [item: ObjectItem, pos: { left: number; top: number }]\n}>()\n\nconst COLORS = Utils.deepMerge(colors, props.colors)\n\nconst { changeBackground, backgroundLoad, skys } = Hooks.useBackground()\nconst { progress, MODEL_MAP, loadModel, loadModels, getModel } = Hooks.useModelLoader({\n  baseUrl: props.baseUrl,\n  dracoPath: props.dracoPath,\n  basisPath: props.basisPath,\n  colors: COLORS,\n  colorMeshName: props.colorMeshName,\n  indexDB: props.indexDB\n})\nconst { dialog } = Hooks.useDialog()\n\nconst containerRef = ref()\n\nconst options: ConstructorParameters<typeof DeviceThreeScene>[0] = {\n  baseUrl: props.baseUrl,\n  bgUrl: props.bgUrl,\n  env: props.env,\n  bgColor: props.bgColor,\n  camera: props.camera,\n  cruise: props.cruise,\n  fog: props.fog,\n  render: props.render,\n  grid: props.grid,\n  controls: props.controls,\n  axes: props.axes,\n  ambientLight: props.ambientLight,\n  directionalLight: props.directionalLight\n}\n\nlet scene: InstanceType<typeof DeviceThreeScene>\n\n// 点位模式\nwatch(\n  () => props.dotShowStrict,\n  () => toggleDotVisible()\n)\n\n// 缩放\nwatch(\n  () => props.scale,\n  v => {\n    scene?.setScale(v || 1)\n  }\n)\n\n// 巡航\nwatch(\n  () => props.cruise.points,\n  v => {\n    if (progress.isEnd) scene.setCruisePoint(v || [])\n  }\n)\n\n// 对象列表\nwatch(\n  () => props.objects,\n  () => {\n    if (progress.isEnd) assemblyScenario()\n  }\n)\n\n// 点位隐现方式切换\nconst toggleDotVisible = () => {\n  const list = scene.dotGroup?.children || []\n  for (let i = 0; i < list.length; i++) {\n    const el = list[i] as ThreeModelItem\n    if (!el.data) continue\n    const data = el.data\n    // 数据参数\n    let type = data.type\n    // 点位\n    if (type === props.dotKey) {\n      updateDotVisible(el)\n    }\n  }\n}\n\n// 管路初始化\nconst initPipe = () => {\n  if (!props.pipes || props.pipes.length == 0) return\n\n  const list = props.pipes\n  for (let i = 0; i < list.length; i++) {\n    const item = list[i]\n    const { type, map } = item\n    const obj = getModel(type)\n    if (!obj) continue\n    // 深克隆\n    let model = Utils.modelDeepClone(obj)\n    const mapMeshName = obj._mapMeshName_\n    const { position: POS, scale: SCA, rotation: ROT } = Utils.get_P_S_R_param(model, item)\n    const [x, y, z] = POS\n\n    const mesh = Utils.findObjectsByHasProperty(model.children, [mapMeshName])\n    if (mesh.length) {\n      mesh.forEach(el => {\n        el.material.map = el.material.map.clone()\n        if (map) {\n          const repeat = el.material.map.repeat\n          // 纹理对象阵列\n          el.material.map.repeat.set(repeat.x * (map[0] ?? 1), repeat.y * (map[1] ?? 1))\n        }\n      })\n      model[DEFAULTCONFIG.meshKey.pipe] = mesh\n    }\n\n    // 缩放\n    model.scale.set(...SCA)\n    // 摆放位置\n    model.position.set(x, y, z)\n    // 转换方位\n    model.rotation.set(...ROT)\n\n    model._isPipe_ = true\n    model.data = item\n    scene.addPipe(model)\n  }\n}\n\n// 加载基础\nconst loadBase = async (item: ObjectItem) => {\n  const { type, url = '', name } = item\n  const model = await loadModel({ key: type, url, name, size: 0 })\n  const { position: POS, scale: SCA, rotation: ROT } = Utils.get_P_S_R_param(model, item)\n  // 缩放\n  model.scale.set(...SCA)\n  // 摆放位置\n  model.position.set(...POS)\n  // 转换方位\n  model.rotation.set(...ROT)\n  model._isBase_ = true\n  scene.addDevice(model)\n  return Promise.resolve(model)\n}\n\n// 更新点位隐现\nconst updateDotVisible = (target: ThreeModelItem) => {\n  const item = target.data\n  if (!item || !scene.deviceGroup) return\n  if (typeof props.dotUpdateObjectCall === 'function') {\n    const res = props.dotUpdateObjectCall(item, scene.deviceGroup.children) as any\n    if (typeof res === 'object') {\n      Object.keys(res).forEach(key => {\n        item[key] = res[key]\n      })\n    }\n  } else {\n    console.warn(Error('未传人点位更新对象回调方法 dotUpdateObjectCall'))\n  }\n\n  target.visible = item.show || !props.dotShowStrict\n  const dom = target.element?.getElementsByClassName('inner')[0] as HTMLElement\n  if (dom) {\n    const { size, color } = item.font || {}\n    if (size != void 0) {\n      dom.style.fontSize = typeof size === 'string' ? size : size + 'px'\n    }\n    if (color != void 0) {\n      dom.style.color = color\n    }\n    dom.textContent = `${item.value || 0}${item.unit}`\n  }\n}\n\n// 创建 dot 点位\nconst createDotObject = (item: ObjectItem) => {\n  updateDotVisible(\n    scene.addDot(item, e => {\n      emits('click-dot', toRaw(item), e as PointerEvent)\n    })\n  )\n}\n\n// 创建状态标识\nconst createStatusMark = (model: ThreeModelItem, item: ObjectItem) => {\n  // 警告标识\n  const warnStatusModel = getModel(MODEL_MAP.warning)\n  if (!!warnStatusModel) {\n    const key = DEFAULTCONFIG.meshKey.warning\n    const {\n      group: wg,\n      action,\n      mixer\n    }: any = Utils.createWarning(key, item, warnStatusModel, props.statusOffset?.WARNING)\n    model.add(wg)\n    model[key] = { action, mixer }\n  }\n\n  // 就地标识\n  const localStatusModel = getModel(MODEL_MAP.local)\n  if (!!localStatusModel) {\n    const key = DEFAULTCONFIG.meshKey.local\n    const localModel = Utils.createStatusMark(item, localStatusModel, props.statusOffset?.STATUS)\n    model.add(localModel)\n    model[key] = localModel\n  }\n\n  // 禁用标识\n  const disabledStatusModel = getModel(MODEL_MAP.disabled)\n  if (!!disabledStatusModel) {\n    const key = DEFAULTCONFIG.meshKey.disabled\n    const disabledModel = Utils.createStatusMark(\n      item,\n      disabledStatusModel,\n      props.statusOffset?.DISABLED,\n      true\n    )\n    model.add(disabledModel)\n    model[key] = disabledModel\n  }\n}\n\n// 循环加载对象\nconst loopLoadObject = async (item: ObjectItem) => {\n  if (!item) return\n  const { type, url } = item\n  const obj = getModel(type)\n  if (!obj) {\n    // 地址存在 属于 base 底座\n    if (!!url) {\n      await loadBase(item)\n    } else {\n      // 点位\n      if (type === props.dotKey) {\n        createDotObject(item)\n      }\n    }\n    return\n  }\n\n  const anchorType = props.anchorType || []\n\n  // 深克隆\n  let model = Utils.modelDeepClone(obj)\n  const { position: POS, scale: SCA, rotation: ROT } = Utils.get_P_S_R_param(model, item)\n  const [x, y, z] = POS\n\n  // 缩放\n  model.scale.set(...SCA)\n\n  // 动画类型\n  const animationModelType = props.animationModelType || []\n  // 颜色网格\n  const colorMeshName = props.colorMeshName || []\n  // 主体排除类型\n  const mainBodyExcludeType = props.mainBodyExcludeType || []\n  // 绘制文字类型\n  const textModelType = props.textModelType || []\n\n  const fontParser = getModel(MODEL_MAP.font)\n  // 是否需要绘制文字\n  if (textModelType.includes(type) && !!fontParser) {\n    const group = new THREE.Group()\n    group.add(model)\n    const text = Utils.createText(item, fontParser, COLORS.normal.text, props.statusOffset?.TEXT)\n    group.add(text)\n    group.name = item.name\n    model = group\n  }\n\n  // 动画\n  if (animationModelType.includes(type)) {\n    if (model.type !== 'Group') {\n      const group = new THREE.Group()\n      group.add(model)\n      group.name = model.name\n      model = group\n    }\n\n    // 创建状态标识\n    createStatusMark(model, item)\n\n    // 主体网格\n    if (props.mainBodyChangeColor && !mainBodyExcludeType.includes(type)) {\n      const mesh = Utils.findObjectsByHasProperty(model.children, props.mainBodyMeshName)\n      const cobj = COLORS.normal\n      let color = cobj.main != void 0 ? cobj.main : cobj.color\n      let colrs = Utils.getColorArr(color)\n      if (colrs.length) {\n        mesh.forEach((e, i) => {\n          Utils.setMaterialColor(e, colrs[i % colrs.length])\n        })\n      }\n      model[DEFAULTCONFIG.meshKey.body] = mesh\n    }\n\n    // 升起动画\n    // model.position.y = y - 30\n    // Utils.deviceAnimate( model, { y } )\n    const meshs = Utils.findObjectsByHasProperty(model.children, colorMeshName)\n    // 叶轮动画\n    let mixer = new THREE.AnimationMixer(model)\n    let action\n    if (obj.animations.length) {\n      action = mixer.clipAction(obj.animations[0])\n      // 暂停\n      action.paused = true\n      // 动画速度\n      action.timeScale = 1.5\n      // 播放\n      action.play()\n    }\n    // 记录数据\n    model.extra = { action, mixer, meshs }\n  } else {\n    const meshs: any[] = []\n    model.traverse((el: ThreeModelItem) => {\n      if (typeof el.name == 'string' && colorMeshName.some(t => el.name.indexOf(t) > -1)) {\n        meshs.push(el)\n      }\n    })\n    if (meshs.length) {\n      // 记录数据\n      model[DEFAULTCONFIG.meshKey.color] = meshs\n    }\n  }\n\n  // 摆放位置\n  model.position.set(x, y, z)\n  // 转换方位\n  model.rotation.set(...ROT)\n\n  model._isDevice_ = true\n  model.data = item\n\n  // 锚点\n  if (anchorType.includes(type)) {\n    model._isAnchor_ = true\n  }\n\n  scene.addDevice(model)\n\n  return Promise.resolve()\n}\n\n// 初始化设备列表\nconst initDevices = () => {\n  let i = 0,\n    len = deviceConfigs.value.length\n  return new Promise(resolve => {\n    if (len == 0) return resolve(null)\n    const _loop = async () => {\n      const item = deviceConfigs.value[i]\n      await loopLoadObject(item)\n      i++\n      if (i < len) {\n        _loop()\n      } else {\n        resolve(i)\n      }\n    }\n    _loop()\n  })\n}\n\n// 初始化设备配置\nconst deviceConfigs = ref<ObjectItem[]>([])\nconst initDeviceConfigs = () => {\n  deviceConfigs.value.length = 0\n  const list = toRaw(props.objects) || []\n\n  if (typeof props.formatObject !== 'function') {\n    deviceConfigs.value = list\n    console.warn(Error('未传入格式化函数 formatObject'))\n  } else {\n    const data = props.formatObject(list)\n    deviceConfigs.value = data\n  }\n}\n\n// 组装场景\nconst assemblyScenario = async () => {\n  // 加载进度 100\n  progress.percentage = 100\n  progress.show = false\n\n  // 清除\n  scene.clearDevice()\n\n  await nextTick()\n  initDeviceConfigs()\n  await initDevices()\n\n  // 管路初始化\n  initPipe()\n\n  // 巡航\n  scene.setCruisePoint(props.cruise?.points || [])\n\n  if (typeof props.config?.load === 'function') {\n    props.config?.load(scene)\n  }\n\n  const to = scene.getAnimTargetPos(props.config || {})\n  if (!scene.controls || !to) return\n  // 入场动画\n  Utils.cameraInSceneAnimate(scene.camera, to, scene.controls.target).then(() => {\n    emits('loaded')\n    scene.controlSave()\n  })\n}\n\n// 加载\nconst load = () => {\n  loadModels(props.models, () => {\n    assemblyScenario()\n  })\n}\n\nconst initPage = () => {\n  load()\n  if (props.skyCode) {\n    backgroundLoad(scene, props.skyCode as typeof skys[number])\n  }\n}\n\n// 弹窗展示数据\nconst dialogShowData = () => {\n  if (!dialog.select || !dialog.select.length) return\n  const object = dialog.select[0] as ThreeModelItem\n  const data = object.data\n  dialog.data = data as Partial<ObjectItem>\n  dialog.title = data?.name || ''\n  dialog.show = true\n\n  const pos = updateDialogPosition(object)\n  emits('click-dialog-dot', data as ObjectItem, pos)\n}\n\n// 更新 dialog 坐标\nconst updateDialogPosition = (object: ThreeModelItem) => {\n  const dom = containerRef.value\n  const pos = Utils.getPlanePosition(dom, object, scene.camera)\n  dialog.position = pos\n  if (dialog.style) {\n    dialog.style.left = pos.left + 'px'\n    dialog.style.top = pos.top + 'px'\n  }\n  return pos\n}\n\n// 更新\nconst updateObject = (isRandom: boolean) => {\n  const emitData: ObjectItem[] = []\n\n  if (typeof props.updateObjectCall !== 'function') {\n    console.warn(Error('未传入更新回调函数 updateObjectCall'))\n  }\n\n  scene.getAll().forEach((el: ThreeModelItem, _i) => {\n    if (!el.data) return\n\n    const data = el.data\n    // 数据参数\n    let type = data.type\n\n    // 点位\n    if (type === props.dotKey) {\n      updateDotVisible(el)\n      return\n    }\n\n    if (typeof props.updateObjectCall === 'function') {\n      const res = props.updateObjectCall(data, isRandom) as any\n      if (!res) return\n      if (typeof res !== 'object') {\n        console.warn(Error('更新回调函数返回对象不为 Object，当前类型：' + typeof res))\n      }\n      Object.keys(res).forEach(key => {\n        data[key] = res[key]\n      })\n    }\n    emitData.push(toRaw(data))\n\n    let { status = 0, error = 0, remote = 0, local = 0, disabled = 0 } = data\n    // 获取颜色\n    const cKey = error > 0 ? 'error' : status > 0 ? 'runing' : 'normal'\n    const cobj = COLORS[cKey]\n    let color = cobj[type] != void 0 ? cobj[type] : cobj.color\n\n    if (typeof props.getColorCall === 'function') {\n      const cr = props.getColorCall(data)\n      if (cr) color = cr\n    }\n\n    changeModleStatusColor({\n      type,\n      el,\n      colorObj: cobj,\n      color,\n      paused: status == 0,\n      error: error > 0,\n      remote: remote > 0,\n      local: local > 0,\n      disabled: disabled > 0\n    })\n  })\n  emits('update', emitData, isRandom)\n}\n\n// 修改模型部件状态及颜色 (类型、模型、颜色对象、颜色、动画暂停状态、故障状态)\nconst changeModleStatusColor = (opts: import('./index').ChangeMaterialOpts) => {\n  let { el, type, colorObj: cobj, color, paused, error } = opts\n  let colors = Utils.getColorArr(color)\n  color = colors[0]\n\n  const meshKey = DEFAULTCONFIG.meshKey\n\n  const colorModelType = props.colorModelType\n  if (colorModelType.includes(type) && color != void 0) {\n    const meshs = el[meshKey.color] || []\n    meshs.forEach((e: ThreeModelItem) => {\n      Utils.setMaterialColor(e, color)\n    })\n    return\n  }\n\n  if (!(props.animationModelType || []).includes(type)) {\n    return\n  }\n  // 文字\n  if (props.textChangeColor) {\n    const color = cobj.text != void 0 ? cobj.text : cobj.color\n    const group = el.getObjectByProperty('_isText_', true)\n    let colors = Utils.getColorArr(color)\n    Utils.setMaterialColor(group, colors[0])\n  }\n\n  // 场景\n  // 扩展数据\n  const extra = el.extra\n  // 状态运行则运动\n  if (!!extra) {\n    // 暂停状态\n    !!extra.action && (extra.action.paused = paused)\n    if (color != void 0) {\n      const meshs = extra.meshs || []\n      meshs.forEach((e: any) => {\n        Utils.setMaterialColor(e, color)\n      })\n    }\n  }\n\n  // 主体变色\n  if (props.mainBodyChangeColor && el[meshKey.body]) {\n    const color = cobj.main != void 0 ? cobj.main : cobj.color\n    let colors = Utils.getColorArr(color)\n    if (colors.length) {\n      el[meshKey.body].forEach((e: any, i: number) => {\n        Utils.setMaterialColor(e, colors[i % colors.length])\n      })\n    }\n  }\n\n  const warning = el[meshKey.warning]\n  // 警告状态\n  if (!!warning) {\n    // 警告组合\n    const warnGroup = el.children.find((it: ThreeModelItem) => it.name == meshKey.warning)\n    if (!!warnGroup) {\n      warnGroup.visible = error\n      // 暂停状态\n      warning.action.paused = !error\n    }\n  }\n\n  // 就地\n  if (!!el[meshKey.local]) {\n    el[meshKey.local].visible = opts.local\n  }\n\n  // 禁用\n  if (!!el[meshKey.disabled]) {\n    el[meshKey.disabled].visible = opts.disabled\n  }\n}\n\nonMounted(() => {\n  options.container = containerRef.value\n\n  scene = new DeviceThreeScene(options, {\n    onDblclick(object) {\n      const data = object.data\n      if (typeof data.onDblclick === 'function') {\n        data.onDblclick(toRaw(data), object)\n      } else {\n        emits('dblclick', toRaw(data))\n      }\n    },\n    onClickLeft(object) {\n      if (object) {\n        const data = object.data\n        const backData = toRaw(data)\n        emits('select', backData)\n        // 点位点击事件\n        if (typeof data.onClick === 'function') {\n          dialog.show = false\n          data.onClick(backData)\n        } else {\n          dialog.select = [object]\n          dialogShowData()\n        }\n      } else {\n        dialog.select = []\n        dialog.show = false\n      }\n    },\n    onClickRight(e) {\n      console.log(e)\n      if (typeof props.config?.back === 'function') {\n        props.config.back(scene)\n      }\n    },\n    animateCall: () => {\n      // 弹窗位置\n      if (dialog.show && dialog.select && !!dialog.select.length) {\n        // 设备弹窗信息\n        const object = dialog.select[0] as ThreeModelItem\n        updateDialogPosition(object)\n      }\n    }\n  })\n  scene.run()\n\n  emits('init', scene)\n  initPage()\n})\n\ndefineExpose({\n  update: updateObject,\n  exportImage: () => scene?.exportImage()\n})\n</script>\n\n<style lang=\"scss\" module>\n@import './style.scss';\n</style>\n"],"names":["DEFAULTCONFIG","body","color","warning","local","disabled","pipe","Hooks","ThreeScene.Hooks","raycaster","pointer","update","raycasterUpdate","useRaycaster","initCSS2DRender","createCSS2DDom","useCSS2D","DeviceThreeScene","ThreeScene.Scene","constructor","options","extend","super","__publicField","this","filters","devices","length","runDev","forEach","item","Array","s","filter","it","ar","t","includes","deviceCode","push","a","find","concat","d","css2DRender","container","domElement","className","createClock","addDeviceGroup","addDotGroup","addPipeGroup","bindEvent","group","THREE.Group","name","deviceGroup","addObject","clearDevice","disposeObj","clearDot","clearPipe","addDevice","obj","add","scene","dotGroup","addDot","clickBack","pos","position","size","font","x","y","z","label","onClick","data","_a","pipeGroup","addPipe","onDblclick","e","dom","scale","setFromCamera","camera","objects","interscts","intersectObjects","object","findParentGroupGroup","onPointerMove","checkIntersectObjects","onPointerUp","isClick","timeStamp","tsp","button","onClickRight","type","children","visible","_isAnchor_","style","cursor","_b","onClickLeft","_c","_find","parent","_isDevice_","_isPipe_","modelAnimate","render","animateCall","delta","clock","getDelta","el","extra","status","mixer","error","bind","runingDevices","map","bingDevices","findFilterDevice","run","step","left","right","isRight","isLeft","ms","material","offset","opacity","getAnimTargetPos","config","_to","_target","controls","to","target","set","getAll","resize","width","height","setSize","dispose","colors","normal","main","text","FM","runing","props","__props","emits","__emit","COLORS","Utils","deepMerge","changeBackground","backgroundLoad","skys","useBackground","progress","MODEL_MAP","loadModel","loadModels","getModel","useModelLoader","baseUrl","dracoPath","basisPath","colorMeshName","indexDB","dialog","useDialog","containerRef","ref","bgUrl","env","bgColor","cruise","fog","grid","axes","ambientLight","directionalLight","watch","dotShowStrict","toggleDotVisible","v","setScale","points","isEnd","setCruisePoint","list","i","dotKey","updateDotVisible","dotUpdateObjectCall","res","Object","keys","key","console","warn","Error","show","element","getElementsByClassName","fontSize","textContent","value","unit","loopLoadObject","async","url","model","POS","SCA","rotation","ROT","get_P_S_R_param","_isBase_","Promise","resolve","loadBase","toRaw","createDotObject","anchorType","modelDeepClone","animationModelType","mainBodyExcludeType","textModelType","fontParser","createText","statusOffset","TEXT","warnStatusModel","wg","action","createWarning","WARNING","localStatusModel","localModel","createStatusMark","STATUS","disabledStatusModel","disabledModel","DISABLED","mainBodyChangeColor","mesh","findObjectsByHasProperty","mainBodyMeshName","cobj","colrs","getColorArr","setMaterialColor","meshs","THREE.AnimationMixer","animations","clipAction","paused","timeScale","play","traverse","some","indexOf","deviceConfigs","assemblyScenario","percentage","nextTick","formatObject","len","_loop","initDevices","pipes","mapMeshName","_mapMeshName_","clone","repeat","load","nA","cameraInSceneAnimate","then","controlSave","initPage","models","skyCode","updateDialogPosition","getPlanePosition","top","updateObject","isRandom","emitData","updateObjectCall","_i","remote","getColorCall","cr","changeModleStatusColor","colorObj","opts","colors2","meshKey","colorModelType","textChangeColor","color2","getObjectByProperty","colors3","warnGroup","onMounted","backData","select","title","log","back","__expose","exportImage"],"mappings":"4cAAA,MAwBeA,EA6CM,IA7CNA,EA+CJ,CACPC,KAAM,UACNC,MAAO,WACPC,QAAS,aACTC,MAAO,WACPC,SAAU,cACVC,KAAM,YCrEJC,EAAQC,GAERC,UAAEA,EAAWC,QAAAA,EAASC,OAAQC,GAAoBL,EAAMM,gBACxDC,gBAAEA,EAAAC,eAAiBA,GAAmBR,EAAMS,WACrC,MAAAC,UAAyBC,EAWpC,WAAAC,CACEC,EACAC,GAEAC,MAAMF,GAbRG,EAAAC,KAAA,eAEAD,EAAAC,KAAA,YAEAD,EAAAC,KAAA,aAEAD,EAAAC,KAAA,eAEAD,EAAAC,KAAA,UA8PmBD,EAAAC,KAAA,oBAAA,CAACC,EAAgBC,KAClC,GAAsB,GAAlBD,EAAQE,QAAiC,GAAlBD,EAAQC,OAAa,MAAO,GACvD,IAAIC,EAAuB,GA0BpB,OAzBCH,EAAAI,SAAgBC,IACtB,GAAIA,aAAgBC,MAAO,CACzB,IAAIC,EAAkB,GACZF,EAAKG,QAAaC,IAC1B,GAAIA,aAAcH,MAAO,CACjB,MAAAI,EAAKT,EAAQO,QAAOG,GAAKF,EAAGG,SAASD,EAAEE,cAM7C,OALIH,EAAGR,QACFQ,EAAAN,SAAaO,IACTJ,EAAEK,SAASD,IAAIJ,EAAEO,KAAKH,EAAC,IAGzBD,EAAGR,OAAS,CACrB,CACA,MAAMa,EAAId,EAAQe,MAAUL,GAAAA,EAAEE,YAAcJ,IAE5C,OADIM,IAAMR,EAAEK,SAASG,IAAIR,EAAEO,KAAKC,KACvBA,CAAA,IAELb,QAAUG,EAAKH,SACVC,EAAAA,EAAOc,OAAOV,GACzB,KACK,CACL,MAAMW,EAAIjB,EAAQe,MAAWP,GAAAA,EAAGI,YAAcR,IAC1Ca,GAAGf,EAAOW,KAAKI,EACrB,KAEKf,CAAA,IAnRPJ,KAAKH,OAASA,EACdG,KAAKoB,YAAc9B,EAAgBU,KAAKJ,QAASI,KAAKqB,WACjDrB,KAAAoB,YAAYE,WAAWC,UAAY,wBAExCvB,KAAKwB,cAELxB,KAAKyB,iBACLzB,KAAK0B,cACL1B,KAAK2B,eACL3B,KAAK4B,WACP,CAGA,cAAAH,GACQ,MAAAI,EAAQ,IAAIC,EAClBD,EAAME,KAAO,MACb/B,KAAKgC,YAAcH,EACnB7B,KAAKiC,UAAUJ,EACjB,CAGA,WAAAK,GACMlC,KAAKgC,aACFhC,KAAAmC,WAAWnC,KAAKgC,aAEvBhC,KAAKyB,iBACLzB,KAAKoC,WACLpC,KAAKqC,WACP,CAGA,SAAAC,IAAaC,GACPvC,KAAKgC,aACFhC,KAAAgC,YAAYQ,OAAOD,EAE5B,CAGA,WAAAb,GACQ,MAAAG,EAAQ,IAAIC,EAClBD,EAAME,KAAO,MACR/B,KAAAyC,MAAMD,IAAIX,GACf7B,KAAK0C,SAAWb,CAClB,CAGA,QAAAO,GACMpC,KAAK0C,UACF1C,KAAAmC,WAAWnC,KAAK0C,UAEvB1C,KAAK0B,aACP,CAGA,MAAAiB,CAAOrC,EAAkBsC,SACvB,MAAMC,EAAMvC,EAAKwC,UACXC,KAAEA,EAAMrE,MAAAA,GAAU4B,EAAK0C,MAAQ,CAAA,GAC/BC,EAAEA,EAAI,EAAGC,EAAAA,EAAI,IAAGC,EAAI,GAAMN,GAAO,GACjCO,EAAQ7D,EAAe,CAC3BwC,KAAM,wEAGM,MAARgB,EAAiB,cAA8B,iBAATA,EAAoBA,EAAOA,EAAO,QAAU,MACvE,MAATrE,EAAkB,UAAUA,IAAU,sBAE5C6C,UAAW,eACXuB,SAAU,CAACG,EAAGC,EAAGC,GACjBE,QAAST,IAKJ,OAHPQ,EAAMrB,KAAOzB,EAAKyB,KAClBqB,EAAME,KAAOhD,EACR,OAAAiD,EAAAvD,KAAA0C,aAAUF,IAAIY,GACZA,CACT,CAGA,YAAAzB,GACQ,MAAAE,EAAQ,IAAIC,EAClBD,EAAME,KAAO,MACR/B,KAAAyC,MAAMD,IAAIX,GACf7B,KAAKwD,UAAY3B,CACnB,CAGA,OAAA4B,IAAWlB,GACLvC,KAAKwD,WACFxD,KAAAwD,UAAUhB,OAAOD,EAE1B,CAGA,SAAAF,GACMrC,KAAKwD,WACFxD,KAAAmC,WAAWnC,KAAKwD,WAEvBxD,KAAK2B,cACP,CAGA,UAAA+B,CAAWC,SACT,MAAMC,EAAM5D,KAAKqB,UACXwC,EAAQ7D,KAAKJ,QAAQiE,MAG3B,GAFgBzE,EAAAuE,EAAmBC,EAAKC,GAEpC7D,KAAKgC,YAAa,CAEV/C,EAAA6E,cAAc5E,EAASc,KAAK+D,QAEtC,MAAMC,EAAU,CAAChE,KAAKgC,YAAahC,KAAKwD,WAClCS,EAAYhF,EAAUiF,iBAAiBF,GAC7C,GAAIC,EAAU9D,OAAQ,CACd,MAAAoC,EAAM0B,EAAU,GAAGE,OACnBA,EAASnE,KAAKoE,qBAAqB7B,GACzC,IAAK4B,EAAQ,OAC0B,mBAA5B,OAAAZ,EAAAvD,KAAKH,aAAL,EAAA0D,EAAaG,aAAgC1D,KAAAH,OAAO6D,WAAWS,EAC5E,CACF,CACF,CAGA,aAAAE,CAAcV,GACZ3D,KAAKsE,sBAAsBX,EAC7B,CAGA,WAAAY,CAAYZ,SACV7D,MAAMyE,YAAYZ,GAIZ,MAAAa,EAFEb,EAAEc,UAAYzE,KAAKd,QAAQwF,IAEflG,EACJ,GAAZmF,EAAEgB,OAEAH,GAAgD,mBAA9B,OAAAjB,EAAKvD,KAAAH,iBAAQ+E,eAAkC5E,KAAAH,OAAO+E,aAAajB,GACpE,GAAZA,EAAEgB,OAEAH,GAAAxE,KAAKsE,sBAAsBX,GAC7BA,EAAEgB,MAGf,CAGA,qBAAAL,CAAsBX,aACpB,MAAMC,EAAM5D,KAAKqB,UACXwC,EAAQ7D,KAAKJ,QAAQiE,MACXzE,EAAAuE,EAAGC,EAAKC,GACxB,IAAIW,EAAoB,eAAVb,EAAEkB,MAAmC,aAAVlB,EAAEkB,KAC3C,MAAMb,GACJ,OAAAT,EAAAvD,KAAKgC,kBAAL,EAAAuB,EAAkBuB,SAASrE,QAAQC,GAAYA,EAAGqE,SAAWrE,EAAGsE,eAAe,GAGvE/F,EAAA6E,cAAc5E,EAASc,KAAK+D,QACtC,IAAIE,EAAYhF,EAAUiF,iBAAiBF,EAASQ,GAEpD,GADAZ,EAAIqB,MAAMC,OAASjB,EAAU9D,OAAS,EAAI,UAAY,OACjDqE,EAIL,GAAIP,EAAU9D,OAAQ,CACd,MAAAgE,EAASF,EAAU,GAAGE,OAC5B,IAAKA,EAAQ,OAC2B,mBAA7B,OAAAgB,EAAAnF,KAAKH,aAAL,EAAAsF,EAAaC,cAAiCpF,KAAAH,OAAOuF,YAAYjB,EAAM,KAE1C,mBAA7B,OAAAkB,EAAArF,KAAKH,aAAL,EAAAwF,EAAaD,cAA4BpF,KAAKH,OAAOuF,aAEpE,CAGA,oBAAAhB,CAAqBD,GACb,MAAAmB,EAAS/C,IACb,IAAIgD,EAAShD,EAAIgD,OACjB,GAAKA,EAGL,OAAIA,IAAWA,EAAOC,YAAcD,EAAOE,UAClCF,EAEFD,EAAMC,EAAM,EAErB,OAAOD,EAAMnB,EACf,CAEA,YAAAuB,SAOE,GALA1F,KAAKoB,YAAYuE,OAAO3F,KAAKyC,MAAOzC,KAAK+D,QAEF,mBAA5B/D,KAAKH,OAAO+F,aAA4B5F,KAAKH,OAAO+F,cAG3D5F,KAAKgC,aAAehC,KAAKgC,YAAY8C,SAAS3E,OAAQ,CACpD,IAAA0F,EAAQ,OAAAtC,EAAKvD,KAAA8F,YAAO,EAAAvC,EAAAwC,WACxB/F,KAAKgC,YAAY8C,SAASzE,SAAS2F,IACjC,IAAI1C,EAAO0C,EAAG1C,KACd,IAAKA,EAAM,OACX,IAAI2C,EAAQD,EAAGC,MAEXA,KAAU,MAAA3C,OAAA,EAAAA,EAAM4C,SAAU,GAAK,GAC3BD,EAAAE,MAAMhH,OAAO0G,GAIrB,MAAMlH,EAAUqH,EAAGxH,EAAsBG,SACrCA,KAAY,MAAA2E,OAAA,EAAAA,EAAM8C,QAAS,GAAK,GAC1BzH,EAAAwH,MAAMhH,OAAO0G,EACvB,GAEJ,CAGI7F,KAAKwD,WAAaxD,KAAKwD,UAAUsB,SAAS3E,QAC5CH,KAAKwD,UAAUsB,SAASzE,SAAS2F,UAC/B,MAAMlH,EAAOkH,EAAGxH,EAAsBM,MACtC,GAAIA,EAAM,CACR,MAAMwE,EAAO0C,EAAG1C,KACV+C,EAAO/C,EAAK+C,MAAQ,GAEpBC,IAAiB,OAAA/C,EAAAvD,KAAKgC,oBAALuB,EAAkBuB,WAAY,IAClDrE,QACEH,UAAmB,OAAAA,EAAAgD,MAAQhD,EAAKgD,KAAKxC,cAAe,OAAAyC,EAAAjD,EAAKgD,WAAL,EAAAC,EAAW2C,SAAU,GAAK,CAAA,IAEhFK,KAAK7F,GAAYA,EAAG4C,OAEjBkD,EAAcxG,KAAKyG,iBAAiBJ,EAAMC,GAG1CI,EAAMF,EAAYrG,OAAS,EACjC,IAAIwG,EAAO,IAEP,GAAArD,EAAKsD,MAAQtD,EAAKuD,MAAO,CACrB,MAAAD,KAAEA,EAAMC,MAAAA,GAAUvD,EAClBwD,EAAU9G,KAAKyG,iBAAiBI,EAAOL,GAAarG,OAAS,EAC7D4G,EAAS/G,KAAKyG,iBAAiBG,EAAMJ,GAAarG,OAAS,EACjEwG,EAAOI,GAAUD,EAAU,EAAIA,GAAkB,IAAA,GACnD,CACKhI,EAAAuB,SAAS2G,IACRN,IACCM,EAAAC,SAASV,IAAIW,OAAOhE,GAAKyD,GAE9BK,EAAGC,SAASE,QAAYT,EAAM,GAAM,CAAA,GAExC,IAGN,CAmCA,gBAAAU,CAAiBC,EAAyBC,EAAWC,GACnD,IAAKvH,KAAKwH,SAAU,OACd,MAAAC,EAAKH,GAAOD,EAAOI,IAAM,CAAExE,GAAS,IAAAC,EAAG,EAAGC,EAAG,IAC7CuE,EAASH,GAAWF,EAAOK,QAAU,CAAEzE,EAAG,EAAGC,EAAG,EAAGC,EAAG,GAGrD,OADFnD,KAAAwH,SAASE,OAAOC,IAAID,EAAOzE,EAAGyE,EAAOxE,EAAGwE,EAAOvE,GAC7CsE,CACT,CAGA,MAAAG,WACS,OAAA,OAAAzC,EAAAnF,KAAKgC,kBAAL,EAAAmD,EAAkBL,SAAS5D,QAAO,OAAAqC,EAAKvD,KAAA0C,eAAU,EAAAa,EAAAuB,WAAY,MAAO,EAC7E,CAEA,MAAA+C,GACE/H,MAAM+H,SACN,MAAMC,MAAEA,EAAAC,OAAOA,GAAW/H,KAAKJ,QAC1BI,KAAAoB,YAAY4G,QAAQF,EAAOC,EAClC,CAEA,OAAAE,GACOjI,KAAAmC,WAAWnC,KAAKgC,aAChBhC,KAAAmC,WAAWnC,KAAK0C,UAChB1C,KAAAmC,WAAWnC,KAAKwD,WAErBxD,KAAK8F,WAAQ,EAEb9F,KAAKoB,iBAAc,EACnBpB,KAAKgC,iBAAc,EACnBhC,KAAK0C,cAAW,EAChB1C,KAAKwD,eAAY,EACjBxD,KAAKH,OAAS,GACdC,MAAMmI,SACR,EClVF,MAMaC,EAAiB,CAE5BC,OAAQ,CACNzJ,MARM,QASN0J,KAAM,CAAC,QAAU,SACjBC,KAAM,SACNC,GAAI,SAGNC,OAAQ,CACN7J,MAdM,QAeN0J,KAAM,QACNE,GAAI,QAGNlC,MAAO,CACL1H,MAnBK,SAoBL0J,KAAM,SACNE,GAAI,6iCCiBR,MAAAE,EAAAC,EA4BAC,EAAAC,EAUAC,EAAAC,EAAAC,UAAAZ,EAAAM,EAAAN,SAEAa,iBAAAA,EAAAC,eAAAA,EAAAC,KAAAA,GAAAlK,EAAAmK,iBACAC,SAAAA,YAAAC,EAAAC,UAAAA,EAAAC,WAAAA,WAAAC,GAAAxK,EAAAyK,eAAA,CAAsFC,QAAAjB,EAAAiB,QACrEC,UAAAlB,EAAAkB,UACEC,UAAAnB,EAAAmB,UACAzB,OAAAU,EACTgB,cAAApB,EAAAoB,cACaC,QAAArB,EAAAqB,WAGvBC,OAAAA,GAAA/K,EAAAgL,YAEAC,EAAAC,IAEArK,EAAA,CAAmE6J,QAAAjB,EAAAiB,QAClDS,MAAA1B,EAAA0B,MACFC,IAAA3B,EAAA2B,IACFC,QAAA5B,EAAA4B,QACIrG,OAAAyE,EAAAzE,OACDsG,OAAA7B,EAAA6B,OACAC,IAAA9B,EAAA8B,IACH3E,OAAA6C,EAAA7C,OACG4E,KAAA/B,EAAA+B,KACF/C,SAAAgB,EAAAhB,SACIgD,KAAAhC,EAAAgC,KACJC,aAAAjC,EAAAiC,aACQC,iBAAAlC,EAAAkC,kBAItB,IAAAjI,EAGAkI,GAAA,IAAAnC,EAAAoC,gBACc,IAAAC,MAKdF,GAAA,IAAAnC,EAAA3E,QACciH,IAEV,MAAArI,GAAAA,EAAAsI,SAAAD,GAAA,EAAA,IAKJH,GAAA,IAAAnC,EAAA6B,OAAAW,SACqBF,IAEjB3B,EAAA8B,OAAoBxI,EAAAyI,eAAAJ,GAAA,GAAA,IAKxBH,GAAA,IAAAnC,EAAAxE,UACc,KAEVmF,EAAA8B,cAKJ,MAAAJ,EAAA,WACE,MAAAM,GAAA,OAAA5H,EAAAd,EAAAC,eAAA,EAAAa,EAAAuB,WAAA,GACA,IAAA,IAAAsG,EAAA,EAAAA,EAAAD,EAAAhL,OAAAiL,IAAA,CACE,MAAApF,EAAAmF,EAAAC,GACA,IAAApF,EAAA1C,KAAc,SACd0C,EAAA1C,KAEAuB,OAEA2D,EAAA6C,QACEC,EAAAtF,EACF,GA+DJsF,EAAA5D,UACE,MAAApH,EAAAoH,EAAApE,KACA,IAAAhD,IAAAmC,EAAAT,YAAiC,OACjC,GAAA,mBAAAwG,EAAA+C,oBAAA,CACE,MAAAC,EAAAhD,EAAA+C,oBAAAjL,EAAAmC,EAAAT,YAAA8C,UACA,iBAAA0G,GACEC,OAAAC,KAAAF,GAAAnL,SAAAsL,IACErL,EAAAqL,GAAAH,EAAAG,EAAA,GAEJ,MAEAC,QAAAC,KAAAC,MAAA,sCAGFpE,EAAA3C,QAAAzE,EAAAyL,OAAAvD,EAAAoC,cACA,MAAAhH,EAAA,OAAAL,EAAAmE,EAAAsE,cAAA,EAAAzI,EAAA0I,uBAAA,SAAA,GACA,GAAArI,EAAA,CACE,MAAAb,KAAAA,EAAArE,MAAAA,GAAA4B,EAAA0C,MAAA,CAAA,EACA,MAAAD,IACEa,EAAAqB,MAAAiH,SAAA,iBAAAnJ,EAAAA,EAAAA,EAAA,MAEF,MAAArE,IACEkF,EAAAqB,MAAAvG,MAAAA,GAEFkF,EAAAuI,YAAA,GAAA7L,EAAA8L,OAAA,IAAA9L,EAAA+L,MAAgD,GAqDpDC,EAAAC,MAAAjM,UACE,IAAAA,EAAW,OACX,MAAAuE,KAAAA,EAAA2H,IAAAA,GAAAlM,EACAiC,EAAAgH,EAAA1E,GACA,IAAAtC,EAUE,YARAiK,OAnGJD,OAAAjM,IACE,MAAAuE,KAAAA,EAAA2H,IAAAA,EAAA,GAAAzK,KAAAA,GAAAzB,EACAmM,QAAApD,EAAA,CAAAsC,IAAA9G,EAAA2H,MAAAzK,OAAAgB,KAAA,KACAD,SAAA4J,EAAA7I,MAAA8I,EAAAC,SAAAC,GAAAhE,EAAAiE,gBAAAL,EAAAnM,GASA,OAPAmM,EAAA5I,MAAA8D,OAAAgF,GAEAF,EAAA3J,SAAA6E,OAAA+E,GAEAD,EAAAG,SAAAjF,OAAAkF,GACAJ,EAAAM,UAAA,EACAtK,EAAAH,UAAAmK,GACAO,QAAAC,QAAAR,EAAA,EAwFIS,CAAA5M,GAGAuE,IAAA2D,EAAA6C,QA1DN,CAAA/K,IACEgL,EAAA7I,EAAAE,OAAArC,GAAAqD,IAEI+E,EAAA,YAAAyE,EAAA7M,GAAAqD,EAAA,IACD,EAuDGyJ,CAAA9M,IAMN,MAAA+M,EAAA7E,EAAA6E,YAAA,GAGA,IAAAZ,EAAA5D,EAAAyE,eAAA/K,GACA,MAAAO,SAAA4J,EAAA7I,MAAA8I,EAAAC,SAAAC,GAAAhE,EAAAiE,gBAAAL,EAAAnM,IACA2C,EAAAC,EAAAC,GAAAuJ,EAGAD,EAAA5I,MAAA8D,OAAAgF,GAGA,MAAAY,EAAA/E,EAAA+E,oBAAA,GAEA3D,EAAApB,EAAAoB,eAAA,GAEA4D,EAAAhF,EAAAgF,qBAAA,GAEAC,EAAAjF,EAAAiF,eAAA,GAEAC,EAAAnE,EAAAH,EAAApG,MAEA,GAAAyK,EAAA5M,SAAAgE,IAAA6I,EAAA,CACE,MAAA7L,EAAA,IAAAC,EACAD,EAAAW,IAAAiK,GACA,MAAApE,EAAAQ,EAAA8E,WAAArN,EAAAoN,EAAA9E,EAAAT,OAAAE,KAAA,OAAA9E,EAAAiF,EAAAoF,mBAAA,EAAArK,EAAAsK,MACAhM,EAAAW,IAAA6F,GACAxG,EAAAE,KAAAzB,EAAAyB,KACA0K,EAAA5K,CAAQ,CAIV,GAAA0L,EAAA1M,SAAAgE,GAAA,CACE,GAAA,UAAA4H,EAAA5H,KAAA,CACE,MAAAhD,EAAA,IAAAC,EACAD,EAAAW,IAAAiK,GACA5K,EAAAE,KAAA0K,EAAA1K,KACA0K,EAAA5K,CAAQ,CAOV,GAnGJ,EAAA4K,EAAAnM,eAEE,MAAAwN,EAAAvE,EAAAH,EAAAzK,SACA,GAAAmP,EAAA,CACE,MAAAnC,EAAAnN,EAAAG,SACMkD,MAAAkM,EAAAC,OACGA,EAAA7H,MACPA,GACA0C,EAAAoF,cAAAtC,EAAArL,EAAAwN,EAAA,OAAAvK,EAAAiF,EAAAoF,mBAAA,EAAArK,EAAA2K,SAEFzB,EAAAjK,IAAAuL,GACAtB,EAAAd,GAAA,CAAAqC,SAAA7H,QAA6B,CAI/B,MAAAgI,EAAA5E,EAAAH,EAAAxK,OACA,GAAAuP,EAAA,CACE,MAAAxC,EAAAnN,EAAAI,MACAwP,EAAAvF,EAAAwF,iBAAA/N,EAAA6N,EAAA,OAAAhJ,EAAAqD,EAAAoF,uBAAAU,QACA7B,EAAAjK,IAAA4L,GACA3B,EAAAd,GAAAyC,CAAa,CAIf,MAAAG,EAAAhF,EAAAH,EAAAvK,UACA,GAAA0P,EAAA,CACE,MAAA5C,EAAAnN,EAAAK,SACA2P,EAAA3F,EAAAwF,iBAA4B/N,EAC1BiO,EACA,OAAAlJ,EAAAmD,EAAAoF,mBAAA,EAAAvI,EAAAoJ,UACoB,GAGtBhC,EAAAjK,IAAAgM,GACA/B,EAAAd,GAAA6C,CAAa,GA8DbH,CAAA5B,EAAAnM,GAGAkI,EAAAkG,sBAAAlB,EAAA3M,SAAAgE,GAAA,CACE,MAAA8J,EAAA9F,EAAA+F,yBAAAnC,EAAA3H,SAAA0D,EAAAqG,kBACAC,EAAAlG,EAAAT,OACA,IAAAzJ,EAAA,MAAAoQ,EAAA1G,KAAA0G,EAAA1G,KAAA0G,EAAApQ,MACAqQ,EAAAlG,EAAAmG,YAAAtQ,GACAqQ,EAAA5O,QACEwO,EAAAtO,SAAA,CAAAsD,EAAAyH,KACEvC,EAAAoG,iBAAAtL,EAAAoL,EAAA3D,EAAA2D,EAAA5O,QAAA,IAGJsM,EAAAjO,EAAAC,MAAAkQ,CAAoC,CAMtC,MAAAO,EAAArG,EAAA+F,yBAAAnC,EAAA3H,SAAA8E,GAEA,IACAoE,EADA7H,EAAA,IAAAgJ,EAAA1C,GAEAlK,EAAA6M,WAAAjP,SACE6N,EAAA7H,EAAAkJ,WAAA9M,EAAA6M,WAAA,IAEApB,EAAAsB,QAAA,EAEAtB,EAAAuB,UAAA,IAEAvB,EAAAwB,QAGF/C,EAAAxG,MAAA,CAAA+H,SAAA7H,QAAA+I,QAAqC,KAAA,CAErC,MAAAA,EAAA,GACAzC,EAAAgD,UAAAzJ,IACE,iBAAAA,EAAAjE,MAAA6H,EAAA8F,MAAA9O,GAAAoF,EAAAjE,KAAA4N,QAAA/O,SACEsO,EAAAnO,KAAAiF,EAAa,IAGjBkJ,EAAA/O,SAEEsM,EAAAjO,EAAAE,OAAAwQ,EACF,CAkBF,OAdAzC,EAAA3J,SAAA6E,IAAA1E,EAAAC,EAAAC,GAEAsJ,EAAAG,SAAAjF,OAAAkF,GAEAJ,EAAAjH,YAAA,EACAiH,EAAAnJ,KAAAhD,EAGA+M,EAAAxM,SAAAgE,KACE4H,EAAAzH,YAAA,GAGFvC,EAAAH,UAAAmK,GAEAO,QAAAC,WAwBF2C,EAAA3F,EAAA,IAeA4F,EAAAtD,oBAEEpD,EAAA2G,WAAA,IACA3G,EAAA4C,MAAA,EAGAtJ,EAAAP,oBAEA6N,IAtBF,MACEH,EAAAxD,MAAAjM,OAAA,EACA,MAAAgL,EAAAgC,EAAA3E,EAAAxE,UAAA,GAEA,GAAA,mBAAAwE,EAAAwH,aACEJ,EAAAxD,MAAAjB,EACAS,QAAAC,KAAAC,MAAA,8BAA2C,CAE3C,MAAAxI,EAAAkF,EAAAwH,aAAA7E,GACAyE,EAAAxD,MAAA9I,CAAsB,WA9B1B,MACE,IAAA8H,EAAA,EAAA6E,EAAAL,EAAAxD,MAAAjM,OAEA,OAAA,IAAA6M,SAAAC,IACE,GAAA,GAAAgD,EAAc,OAAAhD,EAAA,MACd,MAAAiD,EAAA3D,UACE,MAAAjM,EAAAsP,EAAAxD,MAAAhB,SACAkB,EAAAhM,GACA8K,IACAA,EAAA6E,MAGEhD,EAAA7B,EAAS,QAGP,EA8BR+E,GA/SF,MACE,IAAA3H,EAAA4H,OAAA,GAAA5H,EAAA4H,MAAAjQ,OAA6C,OAE7C,MAAAgL,EAAA3C,EAAA4H,MACA,IAAA,IAAAhF,EAAA,EAAAA,EAAAD,EAAAhL,OAAAiL,IAAA,CACE,MAAA9K,EAAA6K,EAAAC,IACAvG,KAAAA,EAAA0B,IAAAA,GAAAjG,EACAiC,EAAAgH,EAAA1E,GACA,IAAAtC,EAAU,SAEV,IAAAkK,EAAA5D,EAAAyE,eAAA/K,GACA,MAAA8N,EAAA9N,EAAA+N,eACAxN,SAAA4J,EAAA7I,MAAA8I,EAAAC,SAAAC,GAAAhE,EAAAiE,gBAAAL,EAAAnM,IACA2C,EAAAC,EAAAC,GAAAuJ,EAEAiC,EAAA9F,EAAA+F,yBAAAnC,EAAA3H,SAAA,CAAAuL,IACA1B,EAAAxO,SACEwO,EAAAtO,SAAA2F,IAEE,GADAA,EAAAiB,SAAAV,IAAAP,EAAAiB,SAAAV,IAAAgK,QACAhK,EAAA,CACE,MAAAiK,EAAAxK,EAAAiB,SAAAV,IAAAiK,OAEAxK,EAAAiB,SAAAV,IAAAiK,OAAA7I,IAAA6I,EAAAvN,GAAAsD,EAAA,IAAA,GAAAiK,EAAAtN,GAAAqD,EAAA,IAAA,GAA6E,KAGjFkG,EAAAjO,EAAAM,MAAA6P,GAIFlC,EAAA5I,MAAA8D,OAAAgF,GAEAF,EAAA3J,SAAA6E,IAAA1E,EAAAC,EAAAC,GAEAsJ,EAAAG,SAAAjF,OAAAkF,GAEAJ,EAAAhH,UAAA,EACAgH,EAAAnJ,KAAAhD,EACAmC,EAAAgB,QAAAgJ,EAAmB,MAgRrBhK,EAAAyI,gBAAA,OAAA3H,EAAAiF,EAAA6B,aAAA,EAAA9G,EAAAyH,SAAA,IAEA,mBAAA,OAAA7F,EAAAqD,EAAAnB,aAAA,EAAAlC,EAAAsL,QACE,OAAApL,EAAAmD,EAAAnB,WAAAoJ,KAAAhO,IAGF,MAAAgF,EAAAhF,EAAA2E,iBAAAoB,EAAAnB,QAAA,CAAA,GACA5E,EAAA+E,UAAAC,GAEAiJ,EAAAC,qBAAAlO,EAAAsB,OAAA0D,EAAAhF,EAAA+E,SAAAE,QAAAkJ,MAAA,KACElI,EAAA,UACAjG,EAAAoO,aAAA,GAAkB,EAWtBC,EAAA,KALExH,EAAAd,EAAAuI,QAAA,YAOAvI,EAAAwI,SACEhI,EAAAvG,EAAA+F,EAAAwI,QAA0D,EAkB9DC,EAAA9M,IACE,MAAAP,EAAAoG,EAAAoC,MACAvJ,EAAAgG,EAAAqI,iBAAAtN,EAAAO,EAAA1B,EAAAsB,QAMA,OALA+F,EAAAhH,SAAAD,EACAiH,EAAA7E,QACE6E,EAAA7E,MAAA2B,KAAA/D,EAAA+D,KAAA,KACAkD,EAAA7E,MAAAkM,IAAAtO,EAAAsO,IAAA,MAEFtO,CAAA,EAIFuO,EAAAC,IACE,MAAAC,EAAA,GAEA,mBAAA9I,EAAA+I,kBACE3F,QAAAC,KAAAC,MAAA,+BAGFrJ,EAAAmF,SAAAvH,SAAA,CAAA2F,EAAAwL,KACE,IAAAxL,EAAA1C,KAAc,OAEd,MAAAA,EAAA0C,EAAA1C,KAEA,IAAAuB,EAAAvB,EAAAuB,KAGA,GAAAA,IAAA2D,EAAA6C,OAEE,YADAC,EAAAtF,GAIF,GAAA,mBAAAwC,EAAA+I,iBAAA,CACE,MAAA/F,EAAAhD,EAAA+I,iBAAAjO,EAAA+N,GACA,IAAA7F,EAAU,OACV,iBAAAA,GACEI,QAAAC,KAAAC,MAAA,mCAAAN,IAEFC,OAAAC,KAAAF,GAAAnL,SAAAsL,IACErI,EAAAqI,GAAAH,EAAAG,EAAA,GACD,CAEH2F,EAAAvQ,KAAAoM,EAAA7J,IAEA,IAAA4C,OAAAA,EAAA,EAAAE,MAAAA,EAAA,EAAAqL,OAAAA,EAAA,EAAA7S,MAAAA,EAAA,EAAAC,SAAAA,EAAA,GAAAyE,EAEA,MACAwL,EAAAlG,EADAxC,EAAA,EAAA,QAAAF,EAAA,EAAA,SAAA,UAEAxH,IAAAA,EAAA,MAAAoQ,EAAAjK,GAAAiK,EAAAjK,GAAAiK,EAAApQ,MAEA,GAAA,mBAAA8J,EAAAkJ,aAAA,CACE,MAAAC,EAAAnJ,EAAAkJ,aAAApO,GACAqO,IAAQjT,EAAAiT,EAAQ,CAGlBC,EAAA,CAAuB/M,OACrBmB,KACA6L,SAAA/C,EACUpQ,MAAAA,EACV4Q,OAAA,GAAApJ,EACkBE,MAAAA,EAAA,EACHqL,OAAAA,EAAA,EACE7S,MAAAA,EAAA,EACFC,SAAAA,EAAA,GACM,IAGzB6J,EAAA,SAAA4I,EAAAD,EAAA,EAIFO,EAAAE,IACE,IAAA9L,GAAAA,OAAAnB,EAAAgN,SAAA/C,EAAApQ,MAAAA,EAAAA,OAAA4Q,EAAAlJ,MAAAA,GAAA0L,EACAC,EAAAlJ,EAAAmG,YAAAtQ,GACAA,EAAAqT,EAAA,GAEA,MAAAC,EAAAxT,EAGA,GADAgK,EAAAyJ,eACApR,SAAAgE,IAAA,MAAAnG,EAAA,CAKE,YAJAsH,EAAAgM,EAAAtT,QAAA,IACA2B,SAAAsD,IACE+M,EAAAzB,iBAAAtL,EAAAjF,EAAA,GAEF,CAGF,KAAA8J,EAAA+E,oBAAA,IAAA1M,SAAAgE,GACE,OAGF,GAAA2D,EAAA0J,gBAAA,CACE,MAAAC,EAAA,MAAArD,EAAAzG,KAAAyG,EAAAzG,KAAAyG,EAAApQ,MACAmD,EAAAmE,EAAAoM,oBAAA,YAAA,GACA,IAAAC,EAAAxJ,EAAAmG,YAAAmD,GACAtJ,EAAAoG,iBAAApN,EAAAwQ,EAAA,GAAuC,CAKzC,MAAApM,EAAAD,EAAAC,MAEA,GAAAA,IAEEA,EAAA+H,SAAA/H,EAAA+H,OAAAsB,OAAAA,GACA,MAAA5Q,GAAA,EACEuH,EAAAiJ,OAAA,IACA7O,SAAAsD,IACE+M,EAAAzB,iBAAAtL,EAAAjF,EAAA,GACD,CAKL,GAAA8J,EAAAkG,qBAAA1I,EAAAgM,EAAAvT,MAAA,CACE,MAAA0T,EAAA,MAAArD,EAAA1G,KAAA0G,EAAA1G,KAAA0G,EAAApQ,MACA,IAAA2T,EAAAxJ,EAAAmG,YAAAmD,GACAE,EAAAlS,QACE6F,EAAAgM,EAAAvT,MAAA4B,SAAA,CAAAsD,EAAAyH,KACEvC,EAAAoG,iBAAAtL,EAAA0O,EAAAjH,EAAAiH,EAAAlS,QAAA,GAEJ,CAGF,MAAAxB,EAAAqH,EAAAgM,EAAArT,SAEA,GAAAA,EAAA,CAEE,MAAA2T,EAAAtM,EAAAlB,SAAA7D,MAAAP,GAAAA,EAAAqB,MAAAiQ,EAAArT,UACA2T,IACEA,EAAAvN,QAAAqB,EAEAzH,EAAAqP,OAAAsB,QAAAlJ,EACF,CAIFJ,EAAAgM,EAAApT,SACEoH,EAAAgM,EAAApT,OAAAmG,QAAA+M,EAAAlT,OAIFoH,EAAAgM,EAAAnT,YACEmH,EAAAgM,EAAAnT,UAAAkG,QAAA+M,EAAAjT,SAAoC,SAIxC0T,GAAA,KACE3S,EAAAyB,UAAA2I,EAAAoC,MAEA3J,EAAA,IAAAhD,EAAAG,EAAA,CAAsC,UAAA8D,CAAAS,GAElC,MAAAb,EAAAa,EAAAb,KACA,mBAAAA,EAAAI,WACEJ,EAAAI,WAAAyJ,EAAA7J,GAAAa,GAEAuE,EAAA,WAAAyE,EAAA7J,GACF,EACF,WAAA8B,CAAAjB,GAEE,GAAAA,EAAA,CACE,MAAAb,EAAAa,EAAAb,KACAkP,EAAArF,EAAA7J,GACAoF,EAAA,SAAA8J,GAEA,mBAAAlP,EAAAD,SACEyG,EAAAiC,MAAA,EACAzI,EAAAD,QAAAmP,KAEA1I,EAAA2I,OAAA,CAAAtO,GAtLV,MACE,IAAA2F,EAAA2I,SAAA3I,EAAA2I,OAAAtS,OAA6C,OAC7C,MAAAgE,EAAA2F,EAAA2I,OAAA,GACAnP,EAAAa,EAAAb,KACAwG,EAAAxG,KAAAA,EACAwG,EAAA4I,OAAA,MAAApP,OAAA,EAAAA,EAAAvB,OAAA,GACA+H,EAAAiC,MAAA,EAEA,MAAAlJ,EAAAoO,EAAA9M,GACAuE,EAAA,mBAAApF,EAAAT,EAAA,KA+KM,MAEAiH,EAAA2I,OAAA,GACA3I,EAAAiC,MAAA,CACF,EACF,YAAAnH,CAAAjB,SAEEiI,QAAA+G,IAAAhP,GACA,mBAAA,OAAAJ,EAAAiF,EAAAnB,aAAA,EAAA9D,EAAAqP,OACEpK,EAAAnB,OAAAuL,KAAAnQ,EACF,EACFmD,YAAA,KAGEkE,GAAAA,EAAAiC,MAAAjC,EAAA2I,QAAA3I,EAAA2I,OAAAtS,OAAA,CAEE,MAAAgE,EAAA2F,EAAA2I,OAAA,GACAxB,EAAA9M,EAA2B,KAIjC1B,EAAAiE,MAEAgC,EAAA,OAAAjG,UAIFoQ,EAAA,CAAa1T,OAAAiS,EACH0B,YAAA,IAAA,MAAArQ,OAAA,EAAAA,EAAAqQ"}