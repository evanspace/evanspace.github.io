{"version":3,"file":"index-4c782c21.js","sources":["../../../code/src/pages/webgpu/geometry/slicing/data.ts","../../../code/src/pages/webgpu/geometry/slicing/methods.ts","../../../code/src/pages/webgpu/geometry/slicing/index.vue"],"sourcesContent":["const base = import.meta.env.VITE_BEFORE_STATIC_PATH\n\nexport const getPageOpts = () => ({\n  base,\n\n  models: [\n    {\n      key: 'gears',\n      name: '齿轮',\n      size: 0.07,\n      url: '/oss/model/gpu/gears.glb'\n    }\n  ],\n\n  objects: [\n    {\n      type: 'gears',\n      name: '齿轮',\n      position: { x: 0, y: 150, z: 0 },\n      scale: { x: 50, y: 50, z: 50 }\n    }\n  ]\n})\n","import * as ThreeScene from 'three-scene'\nimport * as THREE from 'three/webgpu'\n\nimport { GUI } from 'dat.gui'\n\nconst { uniform, color, atan, PI2, Fn, If, positionLocal, output, frontFacing, vec4 } = THREE.TSL\n\n// 默认材质，分割材质\nconst defaultMaterial = new THREE.MeshPhysicalNodeMaterial({\n  metalness: 0.5,\n  roughness: 0.25,\n  envMapIntensity: 0.5,\n  color: '#858080'\n})\n\nconst slicedMaterial = new THREE.MeshPhysicalNodeMaterial({\n  metalness: 0.5,\n  roughness: 0.25,\n  envMapIntensity: 0.5,\n  color: '#858080',\n  side: THREE.DoubleSide\n})\n\nconst sliceStart = uniform(1.75)\nconst sliceArc = uniform(1.25)\nconst sliceColor = uniform(color('#b62f58'))\n\n// 获取角度部分\nconst inAngle = Fn(([position, angleStart, angleArc]) => {\n  const angle = atan(position.y, position.x).sub(angleStart).mod(PI2).toVar()\n  return angle.greaterThan(0).and(angle.lessThan(angleArc))\n})\n\n// 输出部分\nslicedMaterial.outputNode = Fn(() => {\n  // 丢弃部分\n  inAngle(positionLocal.xy, sliceStart, sliceArc).discard()\n\n  // 切片面 颜色\n  const finalOutput = output\n  If(frontFacing.not(), () => {\n    finalOutput.assign(vec4(sliceColor, 1))\n  })\n\n  return finalOutput\n})()\n\n// 阴影部分\nslicedMaterial.castShadowNode = Fn(() => {\n  // 丢弃部分\n  inAngle(positionLocal.xy, sliceStart, sliceArc).discard()\n  return vec4(0, 0, 0, 1)\n})()\n\nexport class SlicingScene extends ThreeScene.Scene {\n  gui: InstanceType<typeof GUI>\n\n  constructor(options: ConstructorParameters<typeof ThreeScene.Scene>[0]) {\n    super(options)\n\n    const ground = this.createGround(1000, 1000, 0xaaaaaa)\n    this.addObject(ground)\n\n    this.gui = new GUI()\n    this.addGui()\n  }\n\n  render() {\n    this.renderer.renderAsync(this.scene, this.camera)\n  }\n\n  createAmbientLight(color: string | number, intensity: number) {\n    return new THREE.AmbientLight(color, intensity)\n  }\n\n  createDirectionalLight(color: string | number, intensity: number) {\n    return new THREE.DirectionalLight(color, intensity)\n  }\n\n  createRender() {\n    return new THREE.WebGPURenderer()\n  }\n\n  // 设置环境\n  setEnv(texture: InstanceType<typeof THREE.DataTexture>) {\n    texture.mapping = THREE.EquirectangularReflectionMapping\n    this.scene.environment = texture\n    this.scene.background = this.scene.environment\n  }\n\n  addModel(model) {\n    model.traverse(el => {\n      if (el.isMesh) {\n        if (el.name === 'outerHull') {\n          el.material = slicedMaterial\n        } else {\n          el.material = defaultMaterial\n        }\n\n        el.castShadow = true\n        el.receiveShadow = true\n      }\n    })\n    console.log(model)\n\n    this.addObject(model)\n  }\n\n  addGui() {\n    const gui = this.gui\n\n    gui.add(sliceStart, 'value', -Math.PI, Math.PI, 0.001).name('开始位置')\n    gui.add(sliceArc, 'value', 0, Math.PI * 2, 0.001).name('角度')\n\n    gui\n      // @ts-ignore\n      .addColor({ color: sliceColor.value.getHex() }, 'color')\n      // @ts-ignore\n      .onChange(value => sliceColor.value.set(value))\n\n    gui.domElement.className += ' gui-wrap'\n    this.container.parentNode?.appendChild(gui.domElement)\n  }\n}\n","<template>\n  <div class=\"three-page\">\n    <div class=\"h-100\" ref=\"containerRef\"></div>\n\n    <t-loading v-model=\"progress.show\" :progress=\"progress.percentage\"></t-loading>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport tLoading from '@/components/loading/index.vue'\n\nimport { getPageOpts } from './data'\nimport { SlicingScene } from './methods'\n\nimport { Hooks, Utils } from 'three-scene'\nimport { useResize } from '@/hooks/scene-resize'\n\nconst pageOpts = reactive(getPageOpts())\n\nconst { progress, loadModels, initModels, getModel } = Hooks.useModelLoader({\n  baseUrl: pageOpts.base,\n  indexDB: {\n    // cache: false\n  }\n})\n\nconst containerRef = ref()\nconst options: ConstructorParameters<typeof SlicingScene>[0] = {\n  baseUrl: pageOpts.base,\n  env: '/oss/textures/hdr/8.hdr',\n  directionalLight: {\n    intensity: 4\n  }\n}\nlet scene: InstanceType<typeof SlicingScene>\n\nconst initPage = () => {\n  loadModels(pageOpts.models, () => {\n    progress.percentage = 100\n    progress.show = false\n\n    initModels(pageOpts.objects, item => {\n      const { type } = item\n      const obj = getModel(type)\n      if (!obj) return Promise.resolve()\n      console.log(obj)\n\n      // 深克隆\n      let model = Utils.modelDeepClone(obj)\n      const { position: POS, scale: SCA, rotation: ROT } = Utils.get_P_S_R_param(model, item)\n      const [x, y, z] = POS\n\n      // 缩放\n      model.scale.set(...SCA)\n\n      // 摆放位置\n      model.position.set(x, y, z)\n      // 转换方位\n      model.rotation.set(...ROT)\n\n      scene.addModel(model)\n      return Promise.resolve()\n    })\n  })\n}\n\nonMounted(() => {\n  options.container = containerRef.value\n  scene = new SlicingScene(options).run()\n\n  useResize(scene).resize()\n\n  initPage()\n})\n</script>\n\n<style lang=\"scss\"></style>\n"],"names":["uniform","color","atan","PI2","Fn","If","positionLocal","output","frontFacing","vec4","THREE.TSL","defaultMaterial","THREE.MeshPhysicalNodeMaterial","metalness","roughness","envMapIntensity","slicedMaterial","side","THREE.DoubleSide","sliceStart","sliceArc","sliceColor","inAngle","position","angleStart","angleArc","angle","y","x","sub","mod","toVar","greaterThan","and","lessThan","outputNode","xy","discard","finalOutput","not","assign","castShadowNode","SlicingScene","ThreeScene.Scene","constructor","options","super","__publicField","this","ground","createGround","addObject","gui","GUI","addGui","render","renderer","renderAsync","scene","camera","createAmbientLight","intensity","THREE.AmbientLight","createDirectionalLight","THREE.DirectionalLight","createRender","THREE.WebGPURenderer","setEnv","texture","mapping","THREE.EquirectangularReflectionMapping","environment","background","addModel","model","traverse","el","isMesh","name","material","castShadow","receiveShadow","console","log","add","Math","PI","addColor","value","getHex","onChange","set","domElement","className","_a","container","parentNode","appendChild","pageOpts","reactive","base","models","key","size","url","objects","type","z","scale","progress","loadModels","initModels","getModel","Hooks","useModelLoader","baseUrl","indexDB","containerRef","ref","env","directionalLight","onMounted","run","useResize","resize","percentage","show","item","obj","Promise","resolve","Utils","modelDeepClone","POS","SCA","rotation","ROT","get_P_S_R_param"],"mappings":"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"}