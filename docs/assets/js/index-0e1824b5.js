var e=Object.defineProperty,t=(t,n,o)=>(((t,n,o)=>{n in t?e(t,n,{enumerable:!0,configurable:!0,writable:!0,value:o}):t[n]=o})(t,"symbol"!=typeof n?n+"":n,o),o);import{co as n,cp as o,bb as a,bG as r,b4 as s,b_ as i,c8 as l,bd as c,c9 as u,ca as d,cq as p,bt as m,cr as h,b5 as g,cs as f,ct as v,bs as w,cu as y,bx as b,by as x,c1 as L,bk as z,bp as C,bl as j,a$ as P,b0 as _,cv as M,cw as O,cx as S,b3 as k,cy as G,bw as T,j as E,cz as F,e as B,m as A,o as N,g as J,h as R,n as $}from"./vendor-1d4f44c1.js";import{d as q,T as D,u as I}from"./resize-32b5736d.js";import{_ as U}from"./common-d9edda56.js";const V=(e=500,t,p)=>{const m=((e=500,t=5,n=3)=>{const o=[],a=Math.floor(e/t);for(let r=-a;r<=a;r++)for(let e=-a;e<=a;e++){const a=new i(n,n),s=r*t,p=e*t,m=new l,h=new c(s,-n,p),g=new u,f=new d,v=new c(1,1,1);g.setFromEuler(f),m.compose(h,g,v),a.applyMatrix4(m),o.push(a)}return o})(e,t,p),h=n(m),g=new o({uniforms:{color:{value:new a(5605546)},tcolor:{value:new a(47273)},radius:{value:1.25},length:{value:e/3},range:{value:e}},vertexShader:"\n  varying vec3 vp;\n  void main(){\n    vp = position;\n    gl_Position\t= projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }\n",fragmentShader:"\n  varying vec3 vp;\n  uniform vec3 color;\n  uniform vec3 tcolor;\n  uniform float radius;\n  uniform float length;\n  uniform float range;\n  float getLeng(float x, float y){\n    return  sqrt((x-0.0)*(x-0.0)+(y-0.0)*(y-0.0));\n  }\n  void main(){\n    float uOpacity = 0.1;\n    vec3 vColor = color;\n    float uLength = getLeng(vp.x,vp.z);\n    if ( uLength <= radius && uLength > radius - length ) {\n      float op = sin( (radius - uLength) / length ) ;\n      uOpacity = op;\n      if ( vp.y < 0.0 ) {\n        vColor = color * op;\n      } else {\n        vColor = tcolor;\n      };\n      vColor = tcolor;\n    }\n    gl_FragColor = vec4(vColor,uOpacity);\n  }\n",transparent:!0,depthWrite:!0,side:r}),f=new s(h,g);return f.name="波纹板",f},{getBoundingBox:Q}={getBoundingBox:e=>{var t=new p;t.expandByObject(e);var n=new c;t.getSize(n);var o=new c;return t.getCenter(o),{box3:t,center:o,size:n}}},{createCountryFlatLine:W}=(()=>{const e=(e,t,n="LineLoop")=>{let o;if("Line2"===n){const n=new f;n.setPositions(e),o=new v(n,t),o.name="countryLine2",o.computeLineDistances()}else{const a=new w;a.setFromPoints(e),o=new y[n](a,t),o.name="countryLine"}return o};return{createCountryFlatLine:(t,n={},o="LineLoop")=>{let a={color:65535};a=q(a,n);let r=new m(a);"Line2"===o&&(r=new h(a));let s=t.features,i=new g;for(let l=0;l<s.length;l++){s[l].geometry.coordinates.forEach((t=>{const n=[];if("Line2"===o){t[0].forEach((e=>{n.push(e[0],0,-e[1])}));let a=e(n,r,o);i.add(a)}else{t[0].forEach((e=>{n.push(new c(e[0],e[1],0))}));let a=e(n,r,o);i.add(a)}}))}return i}}})(),X=new M;X.setURLModifier((e=>"/oss/textures/map"+e));const Y=new b(X).load("/gz-map.jpg");Y.wrapS=x,Y.wrapT=x,Y.flipY=!1,Y.rotation=L.degToRad(45);const H=.0128;Y.repeat.set(H,H);const K={x:105.06,y:0,z:32.93},Z=e=>{const t=new O(e),n=new S(t,{depth:.5,bevelEnabled:!0,bevelSegments:1,bevelThickness:0,steps:0,bevelSize:0}),o=new k({map:Y,color:11857642,combine:G,transparent:!0,opacity:1}),a=new T({color:1191972,transparent:!0,opacity:.9});return new s(n,[o,a])};class ee extends D{constructor(e){super(e),t(this,"corrugatedPlate"),t(this,"clock"),t(this,"mapGroup"),this.clock=new z,this.addModel()}addModel(){const e=V(100,.5,.2);this.corrugatedPlate=e,this.addObject(e)}initMap(e){this.mapGroup&&this.disposeObj(this.mapGroup);const t=new g;t.name="地图";const n=e.features,o=n.length;for(let l=0;l<o;l++){const e=n[l],o=new C,a=e.geometry.coordinates,r=e.properties;for(let t=0;t<a.length;t++)a[t].forEach((e=>{const t=e.map((e=>new j(e[0],e[1]))),n=Z(t);o.add(n)}));o.rotateX(-Math.PI/2),o.name=r.name,t.add(o)}((e,t)=>{let n=W(e,{color:16777215,linewidth:1,transparent:!0,depthTest:!1},"Line2");n.position.y+=.5;let o=W(e,{color:6421501,linewidth:1,depthTest:!1},"Line2");t.add(n),t.add(o)})(e,t);const a=Q(t);let{center:{x:r,y:s,z:i}}=a;this.mapGroup=t,K.x=r,K.y=s,K.z=i,this.corrugatedPlate.position.set(r,s-.2,i),this.moveControlAndCamera(),this.addObject(t)}moveControlAndCamera(){const{x:e,y:t,z:n}=K;this.camera.lookAt(e,t,n),new P(this.camera.position).to({x:K.x,y:80,z:n+1},1e3).easing(_.Quadratic.In).start().onUpdate((()=>{})),this.controls.target=new c(e,t,n)}modelAnimate(){if(this.corrugatedPlate){let e=this.clock.getDelta();const t=this.corrugatedPlate.material,n=t.uniforms.range.value,o=t.uniforms.length.value;t.uniforms.radius.value+=e*(n/2),t.uniforms.radius.value>=n+o&&(t.uniforms.radius.value=0)}}}const te=U(B({__name:"index",setup(e){const{load:t}=(()=>{const e=E(0);return{load:t=>{const n=new F;return new Promise(((o,a)=>{n.load(t,(e=>{let t={};try{t=JSON.parse(e)}catch(n){}o(t)}),(t=>{let{loaded:n,total:o}=t;e.value=Number((n/o*100).toFixed(0))}),a)}))},progress:e}})(),{transformGeoJSON:n}={transformGeoJSON:e=>{let t=e.features;for(let n=0;n<t.length;n++){const e=t[n];"Polygon"===e.geometry.type&&(e.geometry.coordinates=[e.geometry.coordinates])}return e}},o=E(),a={camera:{position:[0,100,200]},grid:{visible:!0},axes:{visible:!0}};let r;return A((()=>{a.container=o.value,r=new ee(a),r.run(),t("/oss/map/china.json").then((e=>{r.initMap(n(e))})),I(r).resize()})),(e,t)=>(N(),J("div",{class:$([e.$style.page,"h-100 o-h"])},[R("div",{class:"h-100",ref_key:"containerRef",ref:o},null,512)],2))}}),[["__cssModules",{$style:{page:"_page_12f6y_2"}}]]);export{te as default};
