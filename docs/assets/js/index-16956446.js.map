{"version":3,"file":"index-16956446.js","sources":["../../../code/src/pages/webgl/controls/pointer-lock/methods.ts","../../../code/src/pages/webgl/controls/pointer-lock/index.vue"],"sourcesContent":["import * as THREE from 'three'\nimport * as ThreeScene from 'three-scene'\nimport { PointerLockControls } from 'three/examples/jsm/controls/PointerLockControls'\nimport { GUI } from 'three/examples/jsm/libs/lil-gui.module.min.js'\n\nexport class NewThreeScene extends ThreeScene.Scene {\n  gui: InstanceType<typeof GUI>\n\n  // 操作\n  operate = {\n    moveForward: false,\n    moveLeft: false,\n    moveBackward: false,\n    moveRight: false,\n    canJump: false\n  }\n\n  // 速率\n  velocity = new THREE.Vector3()\n  // 方向\n  direction = new THREE.Vector3()\n\n  // 上一步截止加载时间戳\n  prevTime = performance.now()\n\n  // 原点向量、方向向量 、近距离、远距离\n  raycaster = new THREE.Raycaster(new THREE.Vector3(), new THREE.Vector3(0, -1, 0), 0, 10)\n\n  objects: any[] = []\n\n  simulate?: InstanceType<typeof THREE.Group>\n  skeleton?: InstanceType<typeof THREE.Skeleton>\n  time = 0\n\n  constructor(options: ConstructorParameters<typeof ThreeScene.Scene>[0]) {\n    super(options)\n\n    this.addControls()\n    this.initModel()\n\n    // 添加后解锁，键盘操作无效，未解决\n    this.gui = new GUI()\n    this.addGui()\n  }\n\n  init() {\n    this.initLight()\n    this.initGrid()\n    this.initAxes()\n  }\n\n  addControls() {\n    const camera = this.camera\n    camera.lookAt(0, 10, 0)\n    const controls = new PointerLockControls(camera, this.container) as any\n    // controls.dragToLook = false\n\n    console.log(controls)\n    this.controls = controls\n    this.addObject(controls.object)\n  }\n\n  initModel() {\n    this.addModel()\n\n    this.createSimulate()\n\n    this.createObject()\n\n    this.bindOperateEvent()\n  }\n\n  addModel() {\n    let ground = new THREE.PlaneGeometry(2000, 2000, 100, 100)\n    ground.rotateX(-Math.PI * 0.5)\n\n    const vertex = new THREE.Vector3()\n    const color = new THREE.Color()\n\n    // 顶点位移\n    let position = ground.attributes.position\n\n    for (let i = 0; i < position.count; i++) {\n      // 缓冲区提取数据\n      vertex.fromBufferAttribute(position, i)\n\n      vertex.x += Math.random() * 20 - 10\n      vertex.y += Math.random() * 2\n      vertex.z += Math.random() * 20 - 10\n\n      position.setXYZ(i, vertex.x, vertex.y, vertex.z)\n    }\n\n    // 确保每个面都有唯一的顶点\n    // 转换为非索引几何体\n    // @ts-ignore\n    ground = ground.toNonIndexed()\n\n    position = ground.attributes.position\n\n    const colors = []\n    for (let i = 0; i < position.count; i++) {\n      color.setHSL(\n        Math.random() * 0.3 + 0.5,\n        0.75,\n        Math.random() * 0.25 + 0.6,\n        THREE.SRGBColorSpace\n      )\n      // @ts-ignore\n      colors.push(color.r, color.g, color.b)\n    }\n\n    // 设置颜色顶点\n    ground.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3))\n    const mat = new THREE.MeshBasicMaterial({\n      vertexColors: true // 顶点颜色 渲染\n    })\n    const mesh = new THREE.Mesh(ground, mat)\n    this.addObject(mesh)\n  }\n  createSimulate() {\n    const segmentHeight = 20 // 每段高度\n    const segmentCount = 3 // 段数\n    const height = segmentHeight * segmentCount // 总高度\n    const halfHeight = height * 0.5 // 一般高度\n\n    const options = {\n      segmentHeight, // 每段高度,\n      segmentCount, // 段数,\n      height,\n      halfHeight\n    }\n\n    const geometry = this.createSimulateGeometry(options)\n    // 生成骨骼\n    const bones = this.createSimulateBones(options)\n    // 生成蒙皮网格\n    const group = this.createSimulateMesh(geometry, bones, options)\n    group.position.set(0, 0, -50)\n    group.rotation.y = Math.PI * 0.5\n\n    group.scale.multiplyScalar(0.1)\n    this.simulate = group\n    this.addObject(group)\n  }\n\n  createSimulateGeometry(options) {\n    const geometry = new THREE.CylinderGeometry(\n      8, // 上半径\n      5, // 下半径\n      options.height, // 总高度\n      80, // 圆形面分段数\n      options.segmentCount * 3, // 沿高度的分段 4*3\n      false // 有无上下面\n    )\n    // 圆柱体顶点位置集合\n    const position = geometry.attributes.position\n\n    // 创建一个三维向量用于保存顶点坐标\n    const vertex = new THREE.Vector3()\n\n    // 顶点索引集合\n    const skinIndices: number[] = []\n    // 顶点权重集合\n    const skinWeights: number[] = []\n\n    // 遍历顶点\n    for (let i = 0; i < position.count; i++) {\n      // 依次取出每个点\n      vertex.fromBufferAttribute(position, i)\n      // y 保存相对于圆柱体底面的高度值\n      let y = vertex.y + options.halfHeight\n\n      // 高度除以总高度在乡下人取整，得到当前的 skinIndex\n      let skinIndex = Math.floor(y / options.segmentHeight)\n      // 当前 y 值占该段的百分比\n      let skinWeight = (y % options.segmentHeight) / options.segmentHeight\n\n      // 该点关联 bone[skinIndex] 和 bone[skindex+1]\n      skinIndices.push(skinIndex, skinIndex + 1, 0, 0)\n      // 关联 bone[skinIndex] 的比重为 1 - skinWeight ,关联 bone[skinIndex+1] 的比重为skinWeight\n      skinWeights.push(1 - skinWeight, skinWeight, 0, 0)\n      // 举个例子，第一个y值刚好为0。那么skinIndex为0，skinWeight也为0。所以呢该点相关的骨骼索引为0和1，权重分别是1和0，也就是该点只与bone[0]有关。\n      // 再比如y值为4，那么skinIndex为0，skinWeight也为0.5，所以呢该点相关的骨骼索引为0和1，权重分别是0.5和0.5，也就是该点与bone[0]和bone[1]都相关。其实也很容易理解，因为4恰好在该分段的中间，所以决定于两个骨骼点的状态。\n    }\n\n    // 几何体中添加 skinIndex 属性\n    geometry.setAttribute('skinIndex', new THREE.Uint16BufferAttribute(skinIndices, 4))\n    // 几何体添加 skinWeight 属性\n    geometry.setAttribute('skinWeight', new THREE.Float32BufferAttribute(skinWeights, 4))\n\n    return geometry\n  }\n\n  createSimulateBones(options) {\n    const bones: any[] = []\n\n    // 根骨骼节点\n    let preBone = new THREE.Bone()\n    // 数组添加根骨骼\n    bones.push(preBone)\n    // 根骨骼添加位置\n    preBone.position.y = options.halfHeight\n\n    // 遍历分段\n    for (let i = 0; i < options.segmentCount; i++) {\n      // 创建骨骼节点\n      const bone = new THREE.Bone()\n      // 为骨骼节点添加本地位置，虽然本地位置设置的位置都一样，但是由于这些骨骼都是父子关系，所以在世界左边系上位置不同\n      // bone.position.y = options.segmentHeight\n      bone.position.y = options.segmentHeight\n      // 数组添加\n      bones.push(bone)\n      // 根骨骼添加当前骨骼\n      preBone.add(bone)\n      // 再将当前骨骼复制给根骨骼\n      preBone = bone\n    }\n    return bones\n  }\n\n  createSimulateMesh(geometry, bones, options) {\n    // 创建一个蒙皮材质\n    const material = new THREE.MeshPhongMaterial({\n      // skinning: true, // 重点\n      color: 0x156289,\n      emissive: 0x072534,\n      side: THREE.DoubleSide,\n      flatShading: true\n    })\n\n    // 创建蒙皮网格\n    let mesh = new THREE.SkinnedMesh(geometry, material)\n    // 创建骨架\n    let skeleton = new THREE.Skeleton(bones)\n\n    // 网格添加更骨骼节点（此例 bones[0] 为根节点）\n    mesh.add(bones[0])\n    // 网格绑定骨架\n    mesh.bind(skeleton)\n\n    mesh.position.set(0, options.height / 2, 0)\n\n    const group = new THREE.Group()\n\n    // 创建骨骼显示助手\n    let skeletonHelper = new THREE.SkeletonHelper(mesh)\n    group.add(mesh, skeletonHelper)\n\n    this.skeleton = skeleton\n    // this.n = 0\n    // this.T = 25\n    // this.step = 0.01\n\n    return group\n  }\n\n  createObject() {\n    const geometry = new THREE.BoxGeometry(20, 20, 20).toNonIndexed()\n    const position = geometry.attributes.position\n    const colorsBox = []\n\n    const color = new THREE.Color()\n    for (let i = 0, l = position.count; i < l; i++) {\n      color.setHSL(\n        Math.random() * 0.3 + 0.5,\n        0.75,\n        Math.random() * 0.25 + 0.75,\n        THREE.SRGBColorSpace\n      )\n      // @ts-ignore\n      colorsBox.push(color.r, color.g, color.b)\n    }\n\n    geometry.setAttribute('color', new THREE.Float32BufferAttribute(colorsBox, 3))\n\n    for (let i = 0; i < 500; i++) {\n      const boxMaterial = new THREE.MeshPhongMaterial({\n        specular: 0xffffff,\n        flatShading: true,\n        vertexColors: true\n      })\n      boxMaterial.color.setHSL(\n        Math.random() * 0.2 + 0.5,\n        0.75,\n        Math.random() * 0.25 + 0.75,\n        THREE.SRGBColorSpace\n      )\n\n      const box = new THREE.Mesh(geometry, boxMaterial)\n      box.position.x = Math.floor(Math.random() * 20 - 10) * 20\n      box.position.y = Math.floor(Math.random() * 20) * 20 + 10\n      box.position.z = Math.floor(Math.random() * 20 - 10) * 20\n\n      this.addObject(box)\n      this.objects.push(box)\n    }\n  }\n\n  bindOperateEvent() {\n    const controls = this.controls as any\n    if (!controls) return\n\n    const blocker = document.getElementById('blocker')\n    const instructions = document.getElementById('instructions')\n\n    if (instructions) {\n      instructions.addEventListener('click', function () {\n        controls.lock()\n      })\n    }\n\n    controls.addEventListener('lock', function () {\n      blocker && (blocker.style.display = 'none')\n    })\n\n    controls.addEventListener('unlock', function () {\n      blocker && (blocker.style.display = 'block')\n    })\n\n    window.addEventListener('keydown', this.onKeydown.bind(this))\n    window.addEventListener('keyup', this.onKeyup.bind(this))\n\n    onBeforeUnmount(() => {\n      window.removeEventListener('keydown', this.onKeydown.bind(this))\n      window.removeEventListener('keyup', this.onKeyup.bind(this))\n    })\n  }\n\n  addGui() {\n    const gui = this.gui\n    const control = this.controls as any\n    if (!control) return\n    gui.add(control, 'minPolarAngle', 0, Math.PI).name('垂直角度下限')\n    gui.add(control, 'maxPolarAngle', 0, Math.PI).name('垂直角度上限')\n\n    gui.add(control, 'pointerSpeed', 0.01, 1).name('旋转速度')\n\n    gui.domElement.style.position = 'absolute'\n    gui.domElement.style.top = 'opx'\n    gui.domElement.style.right = 'opx'\n    this.container.parentNode?.appendChild(gui.domElement)\n  }\n\n  onKeydown(e) {\n    switch (e.code) {\n      case 'ArrowUp':\n      case 'KeyW':\n        this.operate.moveForward = true\n        break\n\n      case 'ArrowLeft':\n      case 'KeyA':\n        this.operate.moveLeft = true\n        break\n\n      case 'ArrowDown':\n      case 'KeyS':\n        this.operate.moveBackward = true\n        break\n\n      case 'ArrowRight':\n      case 'KeyD':\n        this.operate.moveRight = true\n        break\n\n      case 'Space':\n        if (this.operate.canJump === true) this.velocity.y += 350\n        this.operate.canJump = false\n        break\n    }\n  }\n\n  onKeyup(e) {\n    switch (e.code) {\n      case 'ArrowUp':\n      case 'KeyW':\n        this.operate.moveForward = false\n        break\n\n      case 'ArrowLeft':\n      case 'KeyA':\n        this.operate.moveLeft = false\n        break\n\n      case 'ArrowDown':\n      case 'KeyS':\n        this.operate.moveBackward = false\n        break\n\n      case 'ArrowRight':\n      case 'KeyD':\n        this.operate.moveRight = false\n        break\n    }\n  }\n\n  modelAnimate() {\n    const time = performance.now()\n    const controls = this.controls as any\n\n    if (controls && controls.isLocked === true) {\n      const { raycaster, prevTime, velocity, operate, direction, objects } = this\n      const camera = controls.object\n      // 复制相机坐标更新原点\n      raycaster.ray.origin.copy(camera.position)\n      raycaster.ray.origin.y -= 10\n\n      const intersections = raycaster.intersectObjects(objects, false)\n\n      const onObject = intersections.length > 0\n\n      const delta = (time - prevTime) / 1000\n      velocity.x -= velocity.x * 10 * delta\n      velocity.z -= velocity.z * 10 * delta\n\n      velocity.y -= 9.8 * 100 * delta\n      console.log(delta)\n\n      const { moveForward, moveBackward, moveRight, moveLeft } = operate\n      // 设置方向向量\n      direction.z = Number(moveForward) - Number(moveBackward)\n      direction.x = Number(moveRight) - Number(moveLeft)\n      direction.normalize() // 标准化\n\n      if (moveForward || moveBackward) velocity.z -= direction.z * 400.0 * delta\n      if (moveLeft || moveRight) velocity.x -= direction.x * 400.0 * delta\n\n      if (onObject === true) {\n        velocity.y = Math.max(0, velocity.y)\n        this.operate.canJump = true\n      }\n\n      // 右转\n      controls?.moveRight(-velocity.x * delta)\n      // 前进\n      controls?.moveForward(-velocity.z * delta)\n\n      camera.position.y += velocity.y * delta\n\n      if (camera.position.y < 10) {\n        velocity.y = 0\n        camera.position.y = 10\n\n        this.operate.canJump = true\n      }\n\n      if (this.simulate) {\n        // 向量\n        const dir = new THREE.Vector3()\n        // 获取相机的视线方向\n        camera.getWorldDirection(dir)\n        // dis向量表示相机沿着相机视线方向平移30的位移量\n        const dis = dir.clone().multiplyScalar(30)\n        //记录相机初始位置\n        const pos = camera.position.clone()\n        //相机初始位置+相机偏移向量\n        const newPos = pos.clone().add(dis)\n\n        this.simulate.position.x = newPos.x\n        this.simulate.position.z = newPos.z\n\n        // 角度\n        const rotation = camera.rotation.clone()\n        this.simulate.rotation.setFromVector3(rotation)\n      }\n    }\n\n    this.prevTime = time\n\n    return\n    if (this.skeleton) {\n      let time = this.time,\n        T = 25,\n        step = 0.01,\n        skeleton = this.skeleton as any\n      time += 1\n      if (time < T) {\n        // 改变骨关节角度\n        skeleton.bones[0].rotation.x = skeleton.bones[0].rotation.x - 2 * step\n        skeleton.bones[1].rotation.x = skeleton.bones[1].rotation.x + step\n        skeleton.bones[2].rotation.x = skeleton.bones[2].rotation.x + step / 2\n        // skeleton.bones[3].rotation.x = skeleton.bones[3].rotation.x - step\n      }\n      if (time < 2 * T && time > T) {\n        skeleton.bones[0].rotation.x = skeleton.bones[0].rotation.x + 2 * step\n        skeleton.bones[1].rotation.x = skeleton.bones[1].rotation.x - step\n        skeleton.bones[2].rotation.x = skeleton.bones[2].rotation.x - step / 2\n        // skeleton.bones[3].rotation.x = skeleton.bones[3].rotation.x + step\n      }\n      if (time === 2 * T) {\n        time = 0\n      }\n      this.time = time\n    }\n  }\n}\n","<template>\n  <div class=\"three-page\">\n    <div class=\"h-100\" ref=\"containerRef\"></div>\n\n    <div :class=\"$style.blocker\" id=\"blocker\">\n      <div :class=\"$style.instructions\" id=\"instructions\">\n        <div>点击开始</div>\n        <p>\n          移动: W、A、S、D<br />\n          跳跃: 空格<br />\n          视角: 鼠标移动\n        </p>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { NewThreeScene } from './methods'\n\nimport { useResize } from '@/hooks/scene-resize'\n\nconst containerRef = ref()\nconst options: ConstructorParameters<typeof NewThreeScene>[0] = {\n  axes: {\n    visible: true\n  },\n  grid: {\n    visible: true\n  },\n  camera: {\n    position: [0, 10, 0]\n  },\n  controls: {\n    visible: false\n  }\n}\nlet scene: InstanceType<typeof NewThreeScene>\n\nonMounted(() => {\n  options.container = containerRef.value\n  scene = new NewThreeScene(options)\n  scene.run()\n\n  useResize(scene).resize()\n})\n</script>\n\n<style lang=\"scss\" module>\n.blocker {\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  background-color: rgba(0, 0, 0, 0.5);\n}\n\n.instructions {\n  width: 100%;\n  height: 100%;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  text-align: center;\n  font-size: 14px;\n  cursor: pointer;\n}\n</style>\n"],"names":["NewThreeScene","ThreeScene.Scene","constructor","options","super","__publicField","this","moveForward","moveLeft","moveBackward","moveRight","canJump","THREE.Vector3","performance","now","THREE.Raycaster","addControls","initModel","gui","GUI","addGui","init","initLight","initGrid","initAxes","camera","lookAt","controls","PointerLockControls","container","console","log","addObject","object","addModel","createSimulate","createObject","bindOperateEvent","ground","THREE.PlaneGeometry","rotateX","Math","PI","vertex","color","THREE.Color","position","attributes","i","count","fromBufferAttribute","x","random","y","z","setXYZ","toNonIndexed","colors","setHSL","THREE.SRGBColorSpace","push","r","g","b","setAttribute","THREE.Float32BufferAttribute","mat","THREE.MeshBasicMaterial","vertexColors","mesh","THREE.Mesh","segmentHeight","segmentCount","height","halfHeight","geometry","createSimulateGeometry","bones","createSimulateBones","group","createSimulateMesh","set","rotation","scale","multiplyScalar","simulate","THREE.CylinderGeometry","skinIndices","skinWeights","skinIndex","floor","skinWeight","THREE.Uint16BufferAttribute","preBone","THREE.Bone","bone","add","material","THREE.MeshPhongMaterial","emissive","side","THREE.DoubleSide","flatShading","THREE.SkinnedMesh","skeleton","THREE.Skeleton","bind","THREE.Group","skeletonHelper","THREE.SkeletonHelper","THREE.BoxGeometry","colorsBox","l","boxMaterial","specular","box","objects","blocker","document","getElementById","instructions","addEventListener","lock","style","display","window","onKeydown","onKeyup","onBeforeUnmount","removeEventListener","control","name","domElement","top","right","_a","parentNode","appendChild","e","code","operate","velocity","modelAnimate","time","isLocked","raycaster","prevTime","direction","ray","origin","copy","onObject","intersectObjects","length","delta","Number","normalize","max","dir","getWorldDirection","dis","clone","newPos","setFromVector3","containerRef","ref","axes","visible","grid","scene","onMounted","value","run","useResize","resize"],"mappings":"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"}