{"version":3,"file":"index-41a30a01.js","sources":["../../../code/src/pages/webgpu/effect/smoke/data.ts","../../../code/src/pages/webgpu/effect/smoke/methods.ts","../../../code/src/pages/webgpu/effect/smoke/index.vue"],"sourcesContent":["const base = import.meta.env.VITE_BEFORE_STATIC_PATH\n\nexport const getPageOpts = () => ({\n  base,\n\n  models: [\n    {\n      key: 'coffeeMug',\n      name: '咖啡杯',\n      size: 0.5,\n      url: '/oss/model/gpu/coffeeMug.glb'\n    }\n  ],\n\n  objects: [\n    {\n      type: 'coffeeMug',\n      name: '咖啡杯',\n      position: { x: -80, y: 25, z: 0 },\n      scale: { x: 10, y: 10, z: 10 }\n    }\n  ]\n})\n","import * as ThreeScene from 'three-scene'\n\nimport * as THREE from 'three/webgpu'\n\nimport { GUI } from 'dat.gui'\n\nconst { createStripSmoke } = ThreeScene.Hooks.useSmoke(THREE)\n\nconst TSL = THREE.TSL\nconst {\n  mix,\n  mul,\n  oneMinus,\n  positionLocal,\n  smoothstep,\n  texture,\n  time,\n  rotateUV,\n  Fn,\n  uv,\n  vec2,\n  vec3,\n  vec4,\n  uniform\n} = TSL\n\nconst base = import.meta.env.VITE_BEFORE_STATIC_PATH\nconst textureLoader = new THREE.TextureLoader()\n\n// 速度\nconst speed = uniform(0.2)\n\nexport class SmokeScene extends ThreeScene.Scene {\n  gui: InstanceType<typeof GUI>\n\n  smokeInstancedSprite?: any\n  fireInstancedSprite?: any\n\n  constructor(options: ConstructorParameters<typeof ThreeScene.Scene>[0]) {\n    super(options)\n\n    // const ground = this.createGround()\n    // this.addObject(ground)\n\n    this.addModel()\n\n    this.gui = new GUI()\n    this.addGui()\n  }\n\n  render() {\n    this.renderer.renderAsync(this.scene, this.camera)\n  }\n\n  run() {\n    this.renderer.setAnimationLoop(() => {\n      this.animate()\n      this.modelAnimate()\n    })\n    return this\n  }\n\n  createScene() {\n    return new THREE.Scene()\n  }\n\n  createRender() {\n    return new THREE.WebGPURenderer()\n  }\n\n  createDirectionalLight(color: string | number, intensity: number) {\n    return new THREE.DirectionalLight(color, intensity)\n  }\n\n  createAmbientLight(color: string | number, intensity: number) {\n    return new THREE.AmbientLight(color, intensity)\n  }\n\n  createPerspectiveCamera(fov: number, aspect: number, near: number, far: number) {\n    return new THREE.PerspectiveCamera(fov, aspect, near, far)\n  }\n\n  addModel() {\n    this.addSmoke()\n    this.addSmallSmoke()\n  }\n\n  addSmoke() {\n    // 动画周期范围\n    const lifeRange = TSL.range(0.1, 1)\n    const offsetRange = TSL.range(new THREE.Vector3(-2, 3, -2), new THREE.Vector3(2, 5, 2))\n\n    const scaledTime = TSL.time.add(5).mul(speed) // + 5 * speed\n\n    const lifeTime = scaledTime.mul(lifeRange).mod(1)\n    const scaleRange = TSL.range(0.3, 2)\n    const roteRange = TSL.range(0.1, 4)\n\n    const life = lifeTime.div(lifeRange)\n    const fakeLightEffect = TSL.positionLocal.y.oneMinus().max(0.2)\n\n    const textureNode = TSL.texture(\n      textureLoader.load(`${base}/oss/textures/effect/smoke1.png`),\n      TSL.rotateUV(TSL.uv(), scaledTime.mul(roteRange))\n    )\n\n    const opacityNode = textureNode.a.mul(life.oneMinus())\n\n    // 混合/颜色\n    const smokeColor = TSL.mix(\n      TSL.color(0xffffff),\n      TSL.color(0x222222),\n      // TSL.color(0xf00f00),\n      TSL.positionLocal.y.mul(0.5).clamp()\n    )\n\n    // 缩放倍数\n    const s = 40\n\n    // 烟\n    const smokeNodeMaterial = new THREE.SpriteNodeMaterial()\n    // 烟 混合颜色\n    smokeNodeMaterial.colorNode = TSL.mix(\n      TSL.color(0xf27d0c),\n      smokeColor,\n      life.mul(2.5).min(1)\n    ).mul(fakeLightEffect)\n\n    smokeNodeMaterial.opacityNode = opacityNode\n    smokeNodeMaterial.positionNode = offsetRange.mul(lifeTime)\n    smokeNodeMaterial.scaleNode = scaleRange.mul(lifeTime.max(0.3))\n    smokeNodeMaterial.depthWrite = false\n    smokeNodeMaterial.transparent = true\n\n    // 烟 精灵材质\n    const smokeInstancedSprite = new THREE.Mesh(new THREE.PlaneGeometry(1, 1), smokeNodeMaterial)\n    smokeInstancedSprite.scale.setScalar(s)\n    // @ts-ignore\n    smokeInstancedSprite.count = 2000\n    smokeInstancedSprite.position.y = s / 4\n    smokeInstancedSprite.castShadow = true\n    this.smokeInstancedSprite = smokeInstancedSprite\n    this.addObject(smokeInstancedSprite)\n\n    // 烟中心（火焰）\n    const fireGeometry = new THREE.PlaneGeometry(1, 1)\n    const fireCount = 1000\n\n    const fireNodeMaterial = new THREE.SpriteNodeMaterial()\n    fireNodeMaterial.colorNode = TSL.mix(TSL.color(0xb72f17), TSL.color(0xb72f17), life)\n    fireNodeMaterial.positionNode = TSL.range(\n      new THREE.Vector3(-1, 1, -1),\n      new THREE.Vector3(1, 2, 1)\n    ).mul(lifeTime)\n    fireNodeMaterial.scaleNode = smokeNodeMaterial.scaleNode\n    fireNodeMaterial.opacityNode = opacityNode.mul(0.5)\n    fireNodeMaterial.blending = THREE.AdditiveBlending\n    fireNodeMaterial.transparent = true\n    fireNodeMaterial.depthWrite = false\n\n    const fireInstancedSprite = new THREE.Mesh(fireGeometry, fireNodeMaterial)\n    fireInstancedSprite.scale.setScalar(s)\n    // @ts-ignore\n    fireInstancedSprite.count = fireCount\n    fireInstancedSprite.position.y = s / 4\n    // fireInstancedSprite.renderOrder = 1\n    fireInstancedSprite.castShadow = true\n    this.fireInstancedSprite = fireInstancedSprite\n    this.addObject(fireInstancedSprite)\n  }\n\n  addSmallSmoke() {\n    // 网格\n    const smokeGeometry = new THREE.PlaneGeometry(1, 1, 16, 64)\n    // 位置\n    smokeGeometry.translate(0, 0.5, 0)\n    smokeGeometry.scale(15, 60, 15)\n\n    const noiseTexture = textureLoader.load(`${base}/oss/textures/gpu/128x128.png`)\n    noiseTexture.wrapS = THREE.RepeatWrapping\n    noiseTexture.wrapT = THREE.RepeatWrapping\n\n    const smokeMaterial = new THREE.MeshBasicNodeMaterial({\n      transparent: true,\n      side: THREE.DoubleSide,\n      depthWrite: false\n    })\n\n    // 位置\n    smokeMaterial.positionNode = Fn(() => {\n      // 扭曲\n      const twistNoiseUv = vec2(0.6, uv().y.mul(0.3).sub(time.mul(speed)).mod(1)) // 扭曲位置、速度\n      const twist = texture(noiseTexture, twistNoiseUv).r.mul(5) // 扭曲数量\n      positionLocal.xz.assign(rotateUV(positionLocal.xz, twist, vec2(1))) // 扭曲偏差位置\n\n      // 气流\n      const windOffset = vec2(\n        texture(noiseTexture, vec2(0.25, time.mul(0.01)).mod(1)).r.sub(0.5), // 向右气流\n        texture(noiseTexture, vec2(0.75, time.mul(0.01)).mod(1)).r.sub(0) // 上下气流\n      ).mul(uv().y.pow(2).mul(80)) // 风力偏差\n      positionLocal.addAssign(windOffset)\n      return positionLocal\n    })()\n\n    // 颜色\n    smokeMaterial.colorNode = Fn(() => {\n      // 透明度\n      const alphaNoiseUv = uv()\n        .mul(vec2(0.8, 0.3))\n        .add(vec2(0, time.mul(0.03).negate()))\n      const alpha = mul(\n        // 图案\n        texture(noiseTexture, alphaNoiseUv).r.smoothstep(0.4, 1),\n\n        // 边缘褪色\n        smoothstep(0, 0.1, uv().x),\n        smoothstep(0, 0.1, oneMinus(uv().x)),\n        smoothstep(0, 0.1, uv().y),\n        smoothstep(0, 0.1, oneMinus(uv().y))\n      )\n\n      const finalColor = mix(vec3(0.6, 0.3, 0.2), vec3(1, 1, 1), alpha.pow(3))\n      return vec4(finalColor, alpha)\n    })()\n\n    const smoke = new THREE.Mesh(smokeGeometry, smokeMaterial)\n    smoke.position.x = -80\n    smoke.position.y = 30\n    this.addObject(smoke)\n\n    const width = 100,\n      height = 50\n    const sm = createStripSmoke({\n      // const sm = this.createSmoke({\n      width,\n      height,\n      twistNums: 1,\n      twistRange: 0.1,\n      // color: 0xf00f00,\n      offset: 0.1,\n      segment: 10\n      // speed: uniform(0.2),\n      // power: uniform(2)\n    })\n    sm.position.set(-100, 0, 200)\n    this.addObject(sm)\n    console.log(sm)\n    // sm.geometry = new THREE.PlaneGeometry(200, 200, 64, 64)\n\n    const ts = new THREE.Mesh(\n      new THREE.PlaneGeometry(width, height),\n      new THREE.MeshBasicMaterial({ color: 0xf00f00, wireframe: true })\n    )\n    ts.position.copy(sm.position.clone().add(new THREE.Vector3(0, height / 2, 0)))\n    this.addObject(ts)\n  }\n\n  createSmoke(\n    opts: {\n      width?: number\n      height?: number\n      segment?: number\n      // 速度（风速、扭曲）\n      speed?: number | ReturnType<typeof uniform>\n      // 颜色\n      color?: number | string\n      // 颜色饱和\n      alphaPow?: number\n      // 扭曲次数\n      twistNums?: number\n      // 扭曲范围\n      twistRange?: number\n      // 左右风速\n      RLSpeed?: number\n      // 上下风速\n      TDSpeed?: number\n      // 锋利偏差\n      offset?: number\n      // 风力\n      power?: number | ReturnType<typeof uniform>\n    } = {}\n  ) {\n    const {\n      width = 10,\n      height = 10,\n      speed = 0.2,\n      color = 0xffffff,\n      alphaPow = 3,\n      twistNums = 5,\n      twistRange = 0,\n      RLSpeed = 0.1,\n      TDSpeed = 0.1,\n      offset = 50,\n      segment = 10,\n      power = 0.03\n    } = opts\n    const geometry = new THREE.PlaneGeometry(1, 1, width * segment, height * segment)\n    geometry.scale(width, height, 1)\n    geometry.rotateY(((Math.PI * 0.5) / 3) * twistNums)\n    geometry.translate(0, height / 2, 0)\n    const material = new THREE.MeshBasicNodeMaterial({\n      transparent: true,\n      side: THREE.DoubleSide,\n      depthWrite: false\n    })\n\n    const noiseTexture = textureLoader.load(`${base}/oss/textures/gpu/128x128.png`)\n    noiseTexture.wrapS = THREE.RepeatWrapping\n    noiseTexture.wrapT = THREE.RepeatWrapping\n\n    // 位置\n    material.positionNode = Fn(() => {\n      // 扭曲\n      const twistNoiseUv = vec2(0.8, uv().y.mul(0.3).sub(time.mul(speed))) // 扭曲位置、速度\n      const twist = texture(noiseTexture, twistNoiseUv).r.mul(twistNums) // 扭曲数量\n      positionLocal.xz.assign(rotateUV(positionLocal.xz, twist, vec2(twistRange))) // 扭曲偏差位置\n\n      // 气流\n      const windOffset = vec2(\n        texture(noiseTexture, vec2(0.25, time.mul(RLSpeed)).mod(1)).r.sub(0.5), // 向右气流\n        texture(noiseTexture, vec2(0.75, time.mul(TDSpeed)).mod(1)).r.sub(0) // 上下气流\n      ).mul(uv().y.pow(1).mul(offset)) // 风力偏差\n      positionLocal.addAssign(windOffset)\n      return positionLocal\n    })()\n\n    // 颜色\n    material.colorNode = Fn(() => {\n      // 透明度\n      const alphaNoiseUv = uv()\n        // 范围\n        .mul(vec2(0.8, 0.3))\n        .add(vec2(0, time.mul(power).negate()))\n      const alpha = mul(\n        // 图案\n        texture(noiseTexture, alphaNoiseUv).r.smoothstep(0.4, 1),\n\n        // 边缘褪色\n        smoothstep(0, 0.1, uv().x),\n        smoothstep(0, 0.1, oneMinus(uv().x)),\n        smoothstep(0, 0.1, uv().y),\n        smoothstep(0, 0.1, oneMinus(uv().y))\n      )\n\n      const c = new THREE.Color(color)\n      const finalColor = mix(vec3(c.r, c.g, c.b), vec3(1, 1, 1), alpha.pow(alphaPow))\n      return vec4(finalColor, alpha)\n    })()\n\n    const mesh = new THREE.Mesh(geometry, material)\n    return mesh\n  }\n\n  addGui() {\n    const gui = this.gui\n\n    gui.add(speed, 'value', 0.01, 1, 0.01).name('烟雾速度')\n\n    if (this.fireInstancedSprite) {\n      gui\n        .add(this.fireInstancedSprite, 'count', 200, 2000)\n        .name('烟雾浓度')\n        .onChange(v => {\n          this.smokeInstancedSprite.count = v * 2\n        })\n    }\n    gui.domElement.className += ' gui-wrap'\n    this.container.parentNode?.appendChild(gui.domElement)\n  }\n}\n","<template>\n  <div class=\"three-page\">\n    <div class=\"h-100\" ref=\"containerRef\"></div>\n\n    <t-loading v-model=\"progress.show\" :progress=\"progress.percentage\"></t-loading>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport tLoading from '@/components/loading/index.vue'\n\nimport { getPageOpts } from './data'\nimport { SmokeScene } from './methods'\n\nimport { useResize } from '@/hooks/scene-resize'\n\nimport { Hooks, Utils } from 'three-scene'\n\nconst pageOpts = reactive(getPageOpts())\nconst { progress, loadModels, getModel, initModels } = Hooks.useModelLoader({\n  baseUrl: pageOpts.base\n})\n\nconst containerRef = ref()\nconst options: ConstructorParameters<typeof SmokeScene>[0] = {\n  grid: {\n    visible: true\n  },\n  axes: {\n    visible: true\n  },\n  render: {\n    logarithmicDepthBuffer: false\n  }\n}\nlet scene: InstanceType<typeof SmokeScene>\n\nconst initPage = () => {\n  loadModels(pageOpts.models, () => {\n    // 加载进度 100\n    progress.percentage = 100\n    progress.show = false\n\n    // 初始化模型\n    initModels(pageOpts.objects, item => {\n      const { type } = item\n      const obj = getModel(type)\n      if (!obj) return Promise.resolve()\n\n      // 深克隆\n      let model = Utils.modelDeepClone(obj)\n      const { position: POS, scale: SCA, rotation: ROT } = Utils.get_P_S_R_param(model, item)\n      const [x, y, z] = POS\n\n      // 缩放\n      model.scale.set(...SCA)\n\n      // 摆放位置\n      model.position.set(x, y, z)\n      // 转换方位\n      model.rotation.set(...ROT)\n\n      scene.addObject(model)\n      return Promise.resolve()\n    })\n  })\n}\n\nonMounted(() => {\n  options.container = containerRef.value\n  scene = new SmokeScene(options)\n  scene.run()\n\n  useResize(scene).resize()\n\n  initPage()\n})\n</script>\n\n<style lang=\"scss\" module></style>\n"],"names":["createStripSmoke","ThreeScene.Hooks","useSmoke","THREE","TSL","THREE.TSL","mix","mul","oneMinus","positionLocal","smoothstep","texture","time","rotateUV","Fn","uv","vec2","vec3","vec4","uniform","textureLoader","THREE.TextureLoader","speed","SmokeScene","ThreeScene.Scene","constructor","options","super","__publicField","this","addModel","gui","GUI","addGui","render","renderer","renderAsync","scene","camera","run","setAnimationLoop","animate","modelAnimate","createScene","THREE.Scene","createRender","THREE.WebGPURenderer","createDirectionalLight","color","intensity","THREE.DirectionalLight","createAmbientLight","THREE.AmbientLight","createPerspectiveCamera","fov","aspect","near","far","THREE.PerspectiveCamera","addSmoke","addSmallSmoke","lifeRange","range","offsetRange","THREE.Vector3","scaledTime","add","lifeTime","mod","scaleRange","roteRange","life","div","fakeLightEffect","y","max","opacityNode","load","a","smokeColor","clamp","smokeNodeMaterial","THREE.SpriteNodeMaterial","colorNode","min","positionNode","scaleNode","depthWrite","transparent","smokeInstancedSprite","THREE.Mesh","THREE.PlaneGeometry","scale","setScalar","count","position","s","castShadow","addObject","fireGeometry","fireNodeMaterial","blending","THREE.AdditiveBlending","fireInstancedSprite","smokeGeometry","translate","noiseTexture","wrapS","THREE.RepeatWrapping","wrapT","smokeMaterial","THREE.MeshBasicNodeMaterial","side","THREE.DoubleSide","twistNoiseUv","sub","twist","r","xz","assign","windOffset","pow","addAssign","alphaNoiseUv","negate","alpha","x","finalColor","smoke","sm","width","height","twistNums","twistRange","offset","segment","set","console","log","ts","THREE.MeshBasicMaterial","wireframe","copy","clone","createSmoke","opts","alphaPow","RLSpeed","TDSpeed","power","geometry","rotateY","Math","PI","material","c","THREE.Color","g","b","name","onChange","v","domElement","className","_a","container","parentNode","appendChild","pageOpts","reactive","base","models","key","size","url","objects","type","z","progress","loadModels","getModel","initModels","Hooks","useModelLoader","baseUrl","containerRef","ref","grid","visible","axes","logarithmicDepthBuffer","onMounted","value","useResize","resize","percentage","show","item","obj","Promise","resolve","model","Utils","modelDeepClone","POS","SCA","rotation","ROT","get_P_S_R_param"],"mappings":"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"}