{"version":3,"file":"index-621fee35.js","sources":["../../../code/src/components/floor-scene/config.ts","../../../code/src/components/floor-scene/methods.ts","../../../code/src/components/floor-scene/colors.ts","../../../code/src/components/floor-scene/index.vue","../../../code/src/pages/webgl/scene/floor/index.vue","../../../code/src/pages/webgl/scene/floor/data.ts","../../../code/src/pages/webgl/scene/floor/request.ts"],"sourcesContent":["const KEYS = {\n  TEXT: 'TEXT', // 文字\n  JSQ: 'JSQ', // 集水器\n  LDB: 'LDB', // 冷冻泵\n  LQB: 'LQB', // 冷却泵\n  XBC: 'XBC', // 蓄冰槽\n  LXJ: 'LXJ', // 离心机\n  LGJ: 'LGJ', // 螺杆机\n  LGJ_2: 'LGJ_2', // 双头螺杆机\n  LGJ_3: 'LGJ_3', // 三机头螺杆机\n  LGJ_4: 'LGJ_4', // 四机头螺杆机\n  LQT: 'LQT', // 冷却塔\n  GL: 'GL', // 锅炉\n  BSHRQ: 'BSHRQ', // 板式换热器\n  BSHLQ: 'BSHLQ', // 板式换热器-制冷\n  FLRB: 'FLRB', // 风冷热泵\n  FJY_X: 'FJY_X', // 风机-右\n  FJZ_X: 'FJZ_X', // 风机-左\n  FJY: 'FJY', // 风机-右\n  FJZ: 'FJZ', // 风机-左\n  FM: 'FM', // 阀门\n  XFM: 'XFM' // 阀门\n}\n\nexport default {\n  // 本地缓存\n  indexdb: {\n    dbName: 'THREE__MODEL__DB',\n    tbName: 'TB',\n    version: 1\n  },\n  // 网格\n  mesh: {\n    // 接受阴影网格名称-（需要接受阴影）\n    receiveShadowName: [\n      '楼板',\n      '地面',\n      '底座',\n      '底板',\n      '基础',\n      '基础底座',\n      '冷却塔基础',\n      '草地',\n      'ground',\n      'Ground'\n    ],\n\n    // 动画材质网格名称\n    animatehName: [\n      '动画',\n      '螺杆A',\n      '螺杆B',\n      '螺杆A001',\n      '螺杆B001',\n      '螺杆A002',\n      '螺杆B002',\n      '叶轮A',\n      '叶轮B',\n      '叶轮C',\n      '阀门'\n    ],\n\n    // 透明网格名称\n    transparentName: ['透明', '透明外壳']\n  },\n\n  // 模型类型\n  keys: KEYS,\n  // 判断点击间隔时间\n  clickIntervalTime: 300,\n\n  meshKey: {\n    body: '__BODY_',\n    color: '__COLOR_',\n    warning: '__WARNING_',\n    local: '__LOCAL_',\n    disabled: '__DISABLED_',\n    pipe: '__PIPE__'\n  },\n\n  // 状态偏差值\n  statusOffset: {\n    TEXT: {\n      [KEYS.JSQ]: {\n        position: { x: -20, y: 10, z: 0 },\n        rotation: { x: 0, y: 270, z: 0 }\n      },\n      [KEYS.LDB]: {\n        position: { x: -60, y: 0, z: 0 }\n      },\n      [KEYS.LQB]: {\n        position: { x: 0, y: 0, z: 60 },\n        rotation: { x: 0, y: 270, z: 0 }\n      },\n      [KEYS.LXJ]: {\n        position: { x: 0, y: 16, z: 50 },\n        rotation: { x: -20, y: 0, z: 0 }\n      },\n      [KEYS.LGJ]: {\n        position: { x: 0, y: 16, z: 50 },\n        rotation: { x: -20, y: 0, z: 0 }\n      },\n      [KEYS.LQT]: {\n        position: { x: -60, y: 0, z: 0 }\n      },\n      [KEYS.BSHLQ]: {\n        position: { x: 0, y: 16, z: 40 }\n      }\n    },\n    WARNING: {\n      [KEYS.JSQ]: {\n        position: { x: 0, y: 62, z: 0 }\n      },\n      [KEYS.LDB]: {\n        position: { x: -4, y: 45, z: 0 }\n      },\n      [KEYS.LQB]: {\n        position: { x: 0, y: 45, z: 4 },\n        rotation: { x: 0, y: 270, z: 0 }\n      },\n      [KEYS.LXJ]: {\n        position: { x: 0, y: 78, z: 0 }\n      },\n      [KEYS.LGJ]: {\n        position: { x: 0, y: 78, z: 0 }\n      },\n      [KEYS.LQT]: {\n        position: { x: 0, y: 85, z: 0 }\n      },\n      [KEYS.BSHLQ]: {\n        position: { x: 0, y: 88, z: 0 }\n      }\n    },\n    STATUS: {\n      [KEYS.LDB]: {\n        position: { x: 9, y: 47, z: 0 }\n      },\n      [KEYS.LQB]: {\n        position: { x: 0, y: 47, z: -9 },\n        rotation: { x: 0, y: 270, z: 0 }\n      },\n      [KEYS.LXJ]: {\n        position: { x: 27, y: 67, z: 42 }\n      },\n      [KEYS.LGJ]: {\n        position: { x: -47, y: 67, z: 42 }\n      },\n      [KEYS.LQT]: {\n        position: { x: -35, y: 69, z: 26 }\n      }\n    },\n    DISABLED: {\n      [KEYS.LDB]: {\n        position: { x: 22, y: 47, z: 0 }\n      },\n      [KEYS.LQB]: {\n        position: { x: 0, y: 47, z: -22 },\n        rotation: { x: 0, y: 270, z: 0 }\n      },\n      [KEYS.LXJ]: {\n        position: { x: 40, y: 67, z: 42 }\n      },\n      [KEYS.LGJ]: {\n        position: { x: -34, y: 67, z: 42 }\n      },\n      [KEYS.LQT]: {\n        position: { x: -22, y: 69, z: 26 }\n      }\n    }\n  }\n}\n","import * as THREE from 'three'\n\nimport * as ThreeScene from 'three-scene'\n\nimport type { XYZ, ObjectItem } from 'three-scene/types/model'\nimport type { Config, ExtendOptions } from '.'\n\nimport DEFAULTCONFIG from './config'\n\nconst Hooks = ThreeScene.Hooks\n\nconst { raycaster, pointer, update: raycasterUpdate } = Hooks.useRaycaster()\nconst { initCSS2DRender, createCSS2DDom } = Hooks.useCSS2D()\n\nexport class FloorThreeScene extends ThreeScene.Scene {\n  // 设备集合\n  deviceGroup?: InstanceType<typeof THREE.Group>\n  // 点位集合\n  dotGroup?: InstanceType<typeof THREE.Group>\n  // 扩展参数\n  extend: Partial<ExtendOptions>\n  // CSS2D 渲染器\n  css2DRender: InstanceType<typeof Hooks.CSS2DRenderer>\n  constructor(\n    options: ConstructorParameters<typeof ThreeScene.Scene>[0],\n    extend: Partial<ExtendOptions>\n  ) {\n    super(options)\n\n    this.extend = extend\n    this.css2DRender = initCSS2DRender(this.options, this.container)\n    this.css2DRender.domElement.className = 'three-scene__dot-wrap'\n\n    this.bindEvent()\n    this.addDeviceGroup()\n    this.addDotGroup()\n  }\n\n  // 添加设备组\n  addDeviceGroup() {\n    const group = new THREE.Group()\n    group.name = '设备组'\n    this.deviceGroup = group\n    this.addObject(group)\n  }\n\n  // 清除场景设备\n  clearDevice() {\n    if (this.deviceGroup) {\n      this.disposeObj(this.deviceGroup)\n    }\n    this.addDeviceGroup()\n    this.clearDot()\n  }\n\n  // 添加设备\n  addDevice(...obj: any[]) {\n    if (this.deviceGroup) {\n      this.deviceGroup.add(...obj)\n    }\n  }\n\n  // 添加点位组\n  addDotGroup() {\n    const group = new THREE.Group()\n    group.name = '点位组'\n    this.dotGroup = group\n    this.scene.add(group)\n  }\n\n  // 清除场景点位\n  clearDot() {\n    if (this.dotGroup) {\n      this.disposeObj(this.dotGroup)\n    }\n    this.addDotGroup()\n  }\n\n  // 添加点位\n  addDot(item: ObjectItem, clickBack: (e: Event, label: any) => void) {\n    const pos = item.position\n    const { size, color } = item.font || {}\n    const { x = 0, y = 0, z = 0 } = pos || {}\n    const label = createCSS2DDom({\n      name: `\n        <div class=\"bg\"></div>\n        <span class=\"inner\" style=\"${\n          size != void 0 ? `font-size: ${typeof size === 'string' ? size : size + 'px'};` : ''\n        } ${color != void 0 ? `color: ${color}` : ''}\"></span>\n      `,\n      className: 'dot-2D-label',\n      position: [x, y, z],\n      onClick: clickBack\n    })\n    label.name = item.name\n    label.data = item\n    // 原始点位 备用\n    label._position_ = { x, y, z }\n    this.dotGroup?.add(label)\n    return label\n  }\n\n  modelAnimate() {\n    // css2D 渲染器\n    this.css2DRender.render(this.scene, this.camera)\n\n    if (typeof this.extend.animateCall === 'function') this.extend.animateCall()\n  }\n\n  // 双击\n  onDblclick(e: MouseEvent) {\n    const dom = this.container\n    const scale = this.options.scale\n    raycasterUpdate(e as PointerEvent, dom, scale)\n\n    if (this.deviceGroup) {\n      // 设置新的原点和方向向量更新射线, 用照相机的原点和点击的点构成一条直线\n      raycaster.setFromCamera(pointer, this.camera)\n      // 检查射线和物体之间的交叉点（包含或不包含后代）\n      const objects = [this.deviceGroup]\n      const interscts = raycaster.intersectObjects(objects)\n      if (interscts.length) {\n        const obj = interscts[0].object\n        const object = this.findParentGroupGroup(obj)\n        if (!object) return\n        if (typeof this.extend?.onDblclick === 'function') this.extend.onDblclick(object)\n      }\n    }\n  }\n\n  // 移动\n  onPointerMove(e: PointerEvent) {\n    this.checkIntersectObjects(e)\n  }\n\n  // 弹起\n  onPointerUp(e: PointerEvent) {\n    super.onPointerUp(e)\n\n    let s = e.timeStamp - this.pointer.tsp\n    // 判断是否未点击\n    const isClick = s < DEFAULTCONFIG.clickIntervalTime\n    if (e.button == 2) {\n      // console.log('你点了右键')\n      if (isClick && typeof this.extend?.onClickRight === 'function') this.extend.onClickRight(e)\n    } else if (e.button == 0) {\n      // console.log('你点了左键')\n      isClick && this.checkIntersectObjects(e)\n    } else if (e.button == 1) {\n      // console.log('你点了滚轮')\n    }\n  }\n\n  // 检查交叉几何体\n  checkIntersectObjects(e: PointerEvent) {\n    const dom = this.container\n    const scale = this.options.scale\n    raycasterUpdate(e, dom, scale)\n    let isClick = e.type == 'pointerdown' || e.type == 'pointerup'\n    const objects =\n      this.deviceGroup?.children.filter((it: any) => it.visible && it._isAnchor_) || []\n\n    // 设置新的原点和方向向量更新射线, 用照相机的原点和点击的点构成一条直线\n    raycaster.setFromCamera(pointer, this.camera)\n    let interscts = raycaster.intersectObjects(objects, isClick)\n    dom.style.cursor = interscts.length > 0 ? 'pointer' : 'auto'\n    if (!isClick) {\n      return\n    }\n\n    if (interscts.length) {\n      const object = interscts[0].object\n\n      if (!object) return\n      if (typeof this.extend?.onClickLeft === 'function') this.extend.onClickLeft(object)\n    } else {\n      if (typeof this.extend?.onClickLeft === 'function') this.extend.onClickLeft()\n    }\n  }\n\n  // 查找父级组合\n  findParentGroupGroup(object: any) {\n    const _find = (obj: any) => {\n      let parent = obj.parent\n      if (!parent) {\n        return\n      }\n      if (parent && parent._isDevice_) {\n        return parent\n      }\n      return _find(parent)\n    }\n    return _find(object)\n  }\n\n  // 获取楼层集合\n  getFloor() {\n    return this.deviceGroup?.children.filter((it: any) => it._isFloor_) || []\n  }\n\n  // 隐藏除楼层之外的对象\n  hideOmitFloor(visible: boolean) {\n    this.deviceGroup?.children.forEach((el: any) => {\n      el.visible = el._isFloor_ || visible\n    })\n  }\n\n  // 获取所有对象\n  getAll() {\n    return this.deviceGroup?.children.concat(this.dotGroup?.children || []) || []\n  }\n\n  // 获取跟随目标集合\n  getFlowMark(mark: string) {\n    return this.getAll().filter((el: any) => el.data?.followMark === mark)\n  }\n\n  // 获取动画目标点\n  getAnimTargetPos(config: Partial<Config>, _to?: XYZ, _target?: XYZ) {\n    if (!this.controls) return\n    const to = _to || config.to || { x: -104, y: 7, z: 58 }\n    const target = _target || config.target || { x: 0, y: 0, z: 0 }\n    // 中心点位\n    this.controls.target.set(target.x, target.y, target.z)\n    return to\n  }\n\n  resize() {\n    super.resize()\n    const { width, height } = this.options\n    this.css2DRender.setSize(width, height)\n  }\n\n  dispose() {\n    this.disposeObj(this.deviceGroup)\n    this.disposeObj(this.dotGroup)\n\n    // @ts-ignore\n    this.css2DRender = void 0\n    this.deviceGroup = void 0\n    this.dotGroup = void 0\n    this.extend = {}\n    super.dispose()\n  }\n}\n","import type { Colors } from 'three-scene/types/color'\n\n// 颜色\nconst color = {\n  normal: 0x88a1b5,\n  runing: 0x2e77f8,\n  error: 0xc20c00\n}\n\nexport const colors: Colors = {\n  // 正常\n  normal: {\n    color: color.normal,\n    main: [0x88a1b5, 0x292e31],\n    text: 0xb9dbff,\n    FM: 0x606c74\n  },\n  // 运行\n  runing: {\n    color: color.runing,\n    main: 0x2e77f8,\n    FM: 0x067417\n  },\n  // 故障\n  error: {\n    color: color.error,\n    main: 0xb54425,\n    FM: 0xe82d1b\n  }\n}\n","<template>\n  <div :class=\"$style['floor-scene']\">\n    <!-- 操作按钮 -->\n    <div class=\"scene-operation\" v-if=\"devEnv\">\n      <div class=\"btn\" @click=\"() => updateObject(true)\">随机更新</div>\n      <div class=\"btn\" v-if=\"cruise.visible\" @click=\"() => scene?.toggleCruise()\">定点巡航</div>\n      <div class=\"btn\" @click=\"() => scene?.getPosition()\">场景坐标</div>\n      <div class=\"btn\" @click=\"() => changeBackground(scene)\">切换背景</div>\n      <div class=\"btn\" @click=\"() => scene?.controlReset()\">控制器重置</div>\n      <div class=\"btn\" v-if=\"cruise.visible\" @click=\"() => scene?.toggleCruiseDepthTest()\">\n        巡航深度\n      </div>\n    </div>\n    <div :class=\"$style.container\" ref=\"containerRef\"></div>\n\n    <t-loading v-model=\"progress.show\" :progress=\"progress.percentage\"></t-loading>\n\n    <!-- 设备信息弹窗 -->\n    <div :class=\"$style.dialog\" v-if=\"dialog.show\" :style=\"dialog.style\">\n      <slot\n        name=\"dialog\"\n        :data=\"dialog.data\"\n        :title=\"dialog.title\"\n        :position=\"dialog.position\"\n      ></slot>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport tLoading from '../loading/index.vue'\nimport { watch, ref, toRaw, withDefaults, onMounted, nextTick } from 'vue'\nimport * as THREE from 'three'\nimport * as TWEEN from 'three/examples/jsm/libs/tween.module.js'\n\nimport { FloorThreeScene } from './methods'\nimport { colors } from './colors'\nimport { Utils, Hooks } from 'three-scene/build/three-scene.module'\n\nimport DEFAULTCONFIG from './config.ts'\n\nimport type { ObjectItem, ThreeModelItem, XYZ } from 'three-scene/types/model'\n\nconst props = withDefaults(defineProps<import('./index').Props>(), {\n  dracoUrl: '',\n  dotKey: 'DOT',\n  dotShowStrict: true,\n  colors: () => ({}),\n  camera: () => ({}),\n  cruise: () => ({}),\n  fog: () => ({}),\n  render: () => ({}),\n  controls: () => ({}),\n  grid: () => ({}),\n  axes: () => ({}),\n  directionalLight: () => ({}),\n  colorMeshName: () => [],\n  anchorType: () => [],\n  mainBodyMeshName: () => ['主体'],\n  indexDB: () => ({\n    cache: true\n  })\n})\n\nconst COLORS = Utils.deepMerge(colors, props.colors)\n\nconst { change: changeBackground, load: backgroundLoad, skys } = Hooks.useBackground()\nconst { progress, loadModel, loadModels, getModel } = Hooks.useModelLoader({\n  baseUrl: props.baseUrl,\n  dracoPath: props.dracoPath,\n  basisPath: props.basisPath,\n  colors: COLORS,\n  colorMeshName: props.colorMeshName,\n  indexDB: props.indexDB\n})\nconst { dialog } = Hooks.useDialog()\n\n// 加载完成、更新、选择 anchorType 类型的模块、双击模型、点击 DOT 类型点位, 点击弹窗点位\nconst emits = defineEmits<{\n  init: [scene: InstanceType<typeof FloorThreeScene>]\n  loaded: []\n  update: [list: ObjectItem[], isRandom?: boolean]\n  select: [item: ObjectItem]\n  dblclick: [item: ObjectItem]\n  'click-dot': [item: ObjectItem, e: PointerEvent]\n  'click-dialog-dot': [item: ObjectItem, pos: { left: number; top: number }]\n}>()\n\nconst containerRef = ref()\n\nconst devEnv = props.devEnv\nconst options: ConstructorParameters<typeof FloorThreeScene>[0] = {\n  baseUrl: props.baseUrl,\n  bgUrl: props.bgUrl,\n  env: props.env,\n  bgColor: props.bgColor,\n  camera: props.camera,\n  cruise: props.cruise,\n  fog: props.fog,\n  render: props.render,\n  grid: props.grid,\n  controls: props.controls,\n  axes: props.axes,\n  directionalLight: props.directionalLight\n}\n\nlet scene: InstanceType<typeof FloorThreeScene>\n\n// 点位模式\nwatch(\n  () => props.dotShowStrict,\n  () => toggleDotVisible()\n)\n\n// 缩放\nwatch(\n  () => props.scale,\n  v => {\n    scene?.setScale(v || 1)\n  }\n)\n\n// 巡航\nwatch(\n  () => props.cruise.points,\n  v => {\n    if (progress.isEnd) scene.setCruisePoint(v || [])\n  }\n)\n\n// 对象列表\nwatch(\n  () => props.objects,\n  () => {\n    if (progress.isEnd) assemblyScenario()\n  }\n)\n\n// 点位隐现方式切换\nconst toggleDotVisible = () => {\n  const list = scene.dotGroup?.children || []\n  for (let i = 0; i < list.length; i++) {\n    const el = list[i] as ThreeModelItem\n    if (!el.data) continue\n    const data = el.data\n    // 数据参数\n    let type = data.type\n    // 点位\n    if (type === props.dotKey) {\n      updateDotVisible(el)\n    }\n  }\n}\n\n// 楼层动画\nconst floorAnimate = (index?: number) => {\n  const floors = scene.getFloor()\n\n  // 楼层列表为 0 则不执行\n  if (floors.length === 0) return\n  // 执行目标是否存在\n  const isExist = index !== void 0 && index > -1\n  // 楼层展开是否隐藏其他\n  if (props.config?.floorExpandHiddenOther) {\n    scene.hideOmitFloor(!isExist)\n  }\n  floors.forEach((el: ThreeModelItem, i) => {\n    // 换算间距\n    const pos = el._position_\n    let k = i - (!isExist ? i : index)\n    const margin = props.config?.floorExpandMargin || 200\n    const mode = props.config?.floorExpandMode || 'UD'\n    const cy = k * margin\n    const ty = (pos?.y ?? 0) + cy\n    const tz = index == i ? (pos?.z ?? 0) + margin : pos?.z ?? 0\n\n    // 判断模式\n    // UD 上下\n    // BA 前后\n    // 移动目标为模型坐标则不执行动画\n    if (mode === 'UD') {\n      if (el.position.y === ty) return\n    } else if (mode === 'BA') {\n      if (el.position.z === tz) return\n    }\n\n    // 标记跟随模型\n    if (el.data?.mark) {\n      const mark = el.data.mark\n      const items = scene.getFlowMark(mark)\n      fllowModelAnimate(mode, items, cy, index == i ? margin : 0)\n    }\n    new TWEEN.Tween(el.position)\n      .to(\n        {\n          y: mode === 'UD' ? ty : el.position.y,\n          z: mode === 'BA' ? tz : el.position.z\n        },\n        500\n      )\n      .easing(TWEEN.Easing.Quadratic.Out)\n      .start()\n  })\n\n  // 楼层展开是否改变视角\n  if (!props.config?.floorExpandChangeViewAngle) return\n  let to, target\n  if (isExist) {\n    const object: ThreeModelItem = floors[index] || {}\n    to = object.data?.to\n    if (!!to) {\n      target = object.data?.target || object._position_\n    }\n  }\n  to = scene.getAnimTargetPos(props.config || {}, to, target)\n  if (!to || !scene.controls) return\n  // 判断位置是否未移动\n  if (!isCameraMove(to)) {\n    Utils.cameraInSceneAnimate(scene.camera, to, scene.controls.target)\n  }\n}\n\n// 判断相机位置是否移动\nconst isCameraMove = (to: XYZ) => {\n  const pos = scene.camera.position\n  // 坐标差距小于 1 则未移动\n  return Math.abs(pos.x - to.x) < 1 && Math.abs(pos.y - to.y) < 1 && Math.abs(pos.z - to.z) < 1\n}\n\n// 跟随模型动画\nconst fllowModelAnimate = (mode: string, items: ThreeModelItem[], cy: number, cz: number) => {\n  if (items.length === 0) return\n\n  console.log(items)\n  items.forEach(el => {\n    const pos = el._position_\n    const ty = mode == 'UD' ? (pos?.y ?? 0) + cy : pos?.y ?? 0\n    const tz = mode == 'BA' ? (pos?.z ?? 0) + cz : pos?.z ?? 0\n    new TWEEN.Tween(el.position)\n      .to(\n        {\n          y: ty,\n          z: tz\n        },\n        500\n      )\n      .easing(TWEEN.Easing.Quadratic.Out)\n      .start()\n  })\n}\n\n// 加载基础\nconst loadBase = async (item: ObjectItem) => {\n  const { type, url = '', name } = item\n  const model = await loadModel({ key: type, url, name, size: 0 })\n  const { position: POS, scale: SCA, rotation: ROT } = Utils.get_P_S_R_param(model, item)\n  // 缩放\n  model.scale.set(...SCA)\n  // 摆放位置\n  model.position.set(...POS)\n  // 转换方位\n  model.rotation.set(...ROT)\n  model._isBase_ = true\n  scene.addDevice(model)\n  return Promise.resolve(model)\n}\n\n// 更新点位隐现\nconst updateDotVisible = (target: ThreeModelItem) => {\n  const item = target.data as ObjectItem\n  if (typeof props.dotUpdateObjectCall === 'function') {\n    const res = props.dotUpdateObjectCall(item, scene.deviceGroup?.children || []) as any\n    if (typeof res === 'object') {\n      Object.keys(res).forEach(key => {\n        item[key] = res[key]\n      })\n    }\n  } else {\n    console.warn(new Error('未传人点位更新对象回调方法 dotUpdateObjectCall'))\n  }\n\n  target.visible = item.show || !props.dotShowStrict\n  const dom = target.element?.getElementsByClassName('inner')[0] as HTMLElement\n  if (dom) {\n    const { size, color } = item.font || {}\n    if (size != void 0) {\n      dom.style.fontSize = typeof size === 'string' ? size : size + 'px'\n    }\n    if (color != void 0) {\n      dom.style.color = color\n    }\n    dom.textContent = `${item.value || 0}${item.unit}`\n  }\n}\n\n// 创建 dot 点位\nconst createDotObject = (item: ObjectItem) => {\n  updateDotVisible(\n    scene.addDot(item, e => {\n      emits('click-dot', toRaw(item), e as PointerEvent)\n    })\n  )\n}\n\n// 弹窗展示数据\nconst dialogShowData = () => {\n  if (!dialog.select || !dialog.select.length) return\n  const object = dialog.select[0] as ThreeModelItem\n  const data = object.data\n  dialog.data = data as Partial<ObjectItem>\n  dialog.title = data?.name || ''\n  dialog.show = true\n\n  const pos = updateDialogPosition(object)\n  emits('click-dialog-dot', data as ObjectItem, pos)\n}\n\n// 更新 dialog 坐标\nconst updateDialogPosition = (object: ThreeModelItem) => {\n  const dom = containerRef.value\n  const pos = Utils.getPlanePosition(dom, object, scene.camera)\n  dialog.position = pos\n  if (dialog.style) {\n    dialog.style.left = pos.left + 'px'\n    dialog.style.top = pos.top + 'px'\n  }\n  return pos\n}\n\n// 循环加载对象\nconst loopLoadObject = async (item: ObjectItem) => {\n  if (!item) return\n  const { type, url } = item\n  const obj = getModel(type)\n  if (!obj) {\n    // 地址存在 属于 base 底座\n    if (!!url) {\n      await loadBase(item)\n    } else {\n      // 点位\n      if (type === props.dotKey) {\n        createDotObject(item)\n      }\n    }\n    return\n  }\n\n  const floorType = props.floorModelType || []\n  const anchorType = props.anchorType || []\n\n  // 深克隆\n  let model = Utils.modelDeepClone(obj)\n  const { position: POS, scale: SCA, rotation: ROT } = Utils.get_P_S_R_param(model, item)\n  const [x, y, z] = POS\n\n  // 缩放\n  model.scale.set(...SCA)\n\n  // 摆放位置\n  model.position.set(x, y, z)\n  // 转换方位\n  model.rotation.set(...ROT)\n\n  // 动画类型\n  const animationModelType = props.animationModelType || []\n  // 颜色网格\n  const colorMeshName = props.colorMeshName || []\n\n  if (animationModelType.includes(type)) {\n    if (model.type !== 'Group') {\n      const group = new THREE.Group()\n      group.add(model)\n      group.name = model.name\n      model = group\n    }\n    // 主体网格\n    if (props.mainBodyChangeColor) {\n      const children = model.children[0]?.children || []\n      const mesh = children.filter((it: ThreeModelItem) =>\n        (props.mainBodyMeshName || []).some(t => it.name.indexOf(t) > -1)\n      )\n      const cobj = COLORS.normal\n      let color = cobj.main || cobj.color\n      let colrs = Utils.getColorArr(color)\n      if (colrs.length) {\n        mesh.forEach((e: ThreeModelItem, i: number) => {\n          Utils.setMaterialColor(e, colrs[i % colrs.length])\n        })\n      }\n      model[DEFAULTCONFIG.meshKey.body] = mesh\n    }\n\n    // 升起动画\n    // model.position.y = y - 30\n    // Utils.deviceAnimate( model, { y } )\n    const meshs = Utils.findObjectsByHasProperty(model.children, colorMeshName)\n    // 叶轮动画\n    let mixer = new THREE.AnimationMixer(model)\n    let action\n    if (obj.animations.length) {\n      action = mixer.clipAction(obj.animations[0])\n      // 暂停\n      action.paused = true\n      // 动画速度\n      action.timeScale = 1.5\n      // 播放\n      action.play()\n    }\n    // 记录数据\n    model.extra = { action, mixer, meshs }\n  } else {\n    const meshs: any[] = []\n    model.traverse((el: ThreeModelItem) => {\n      if (typeof el.name == 'string' && colorMeshName.some(t => el.name.indexOf(t) > -1)) {\n        meshs.push(el)\n      }\n    })\n    if (meshs.length) {\n      // 记录数据\n      model[DEFAULTCONFIG.meshKey.color] = meshs\n    }\n  }\n\n  model._isDevice_ = true\n  model.data = item\n\n  // 楼层\n  if (floorType.includes(type)) {\n    // 原始点位 备用\n    model._position_ = { x, y, z }\n    model._isFloor_ = true\n  }\n\n  // 记录备用坐标(更随标记)\n  if (item.followMark || item.mark) {\n    model._position_ = { x, y, z }\n  }\n\n  // 锚点\n  if (anchorType.includes(type)) {\n    model._isAnchor_ = true\n  }\n\n  scene.addDevice(model)\n\n  return Promise.resolve()\n}\n\n// 初始化设备列表\nconst initDevices = () => {\n  let i = 0,\n    len = deviceConfigs.value.length\n  return new Promise(resolve => {\n    if (len == 0) return resolve(null)\n    const _loop = async () => {\n      const item = deviceConfigs.value[i]\n      await loopLoadObject(item)\n      i++\n      if (i < len) {\n        _loop()\n      } else {\n        resolve(i)\n      }\n    }\n    _loop()\n  })\n}\n\n// 初始化设备配置\nconst deviceConfigs = ref<ObjectItem[]>([])\nconst initDeviceConfigs = () => {\n  deviceConfigs.value.length = 0\n  const list = toRaw(props.objects) || []\n\n  if (typeof props.formatObject !== 'function') {\n    deviceConfigs.value = list\n    console.warn(Error('未传入格式化函数 formatObject'))\n  } else {\n    const data = props.formatObject(list)\n    deviceConfigs.value = data\n  }\n}\n\n// 组装场景\nconst assemblyScenario = async () => {\n  // 加载进度 100\n  progress.percentage = 100\n  progress.show = false\n\n  // 清除\n  scene.clearDevice()\n\n  await nextTick()\n  initDeviceConfigs()\n  await initDevices()\n\n  // 巡航\n  scene.setCruisePoint(props.cruise.points || [])\n\n  if (typeof props.config?.load === 'function') {\n    props.config?.load(scene)\n  }\n\n  // 楼层索引存在则执行楼层动画\n  const floorIndex = props.config?.floorExpandIndex || -1\n  const to = scene.getAnimTargetPos(props.config || {})\n  const floors = scene.getFloor()\n  if (!to || !scene.controls) return\n  if (floorIndex > -1 && floors.length) {\n    floorAnimate(floorIndex)\n    // 楼层展开是否改变视角\n    if (!props.config?.floorExpandChangeViewAngle) {\n      // 入场动画\n      Utils.cameraInSceneAnimate(scene.camera, to, scene.controls.target).then(() => {\n        emits('loaded')\n        scene.controlSave()\n      })\n    }\n  } else {\n    // 入场动画\n    Utils.cameraInSceneAnimate(scene.camera, to, scene.controls.target).then(() => {\n      emits('loaded')\n      scene.controlSave()\n    })\n  }\n}\n\n// 加载\nconst load = () => {\n  loadModels(props.models, () => {\n    assemblyScenario()\n  })\n}\n\nconst initPage = () => {\n  load()\n  if (props.skyCode) {\n    backgroundLoad(scene, props.skyCode as typeof skys[number])\n  }\n}\n\n// 更新\nconst updateObject = (isRandom: boolean) => {\n  const emitData: ObjectItem[] = []\n\n  if (typeof props.updateObjectCall !== 'function') {\n    console.warn(Error('未传入更新回调函数 updateObjectCall'))\n  }\n\n  scene.getAll().forEach((el: ThreeModelItem, _i) => {\n    if (!el.data) return\n\n    const data = el.data\n    // 数据参数\n    let type = data.type\n\n    // 点位\n    if (type === props.dotKey) {\n      updateDotVisible(el)\n      return\n    }\n\n    if (typeof props.updateObjectCall === 'function') {\n      const res = props.updateObjectCall(data, isRandom) as any\n      if (!res) return\n      if (typeof res !== 'object') {\n        console.warn(Error('更新回调函数返回对象不为 Object，当前类型：' + typeof res))\n      }\n      Object.keys(res).forEach(key => {\n        data[key] = res[key]\n      })\n    }\n    emitData.push(toRaw(data))\n\n    let { status = 0, error = 0, remote = 0, local = 0, disabled = 0 } = data\n    // 获取颜色\n    const cKey = error > 0 ? 'error' : status > 0 ? 'runing' : 'normal'\n    const cobj = COLORS[cKey]\n    let color = cobj[type] != void 0 ? cobj[type] : cobj.color\n\n    if (typeof props.getColorCall === 'function') {\n      const cr = props.getColorCall(data)\n      if (cr) color = cr\n    }\n\n    changeModleStatusColor({\n      type,\n      el,\n      colorObj: cobj,\n      color,\n      paused: status == 0,\n      error: error > 0,\n      remote: remote > 0,\n      local: local > 0,\n      disabled: disabled > 0\n    })\n  })\n  emits('update', emitData, isRandom)\n}\n\n// 修改模型部件状态及颜色 (类型、模型、颜色对象、颜色、动画暂停状态、故障状态)\nconst changeModleStatusColor = (opts: import('./index').ChangeMaterialOpts) => {\n  let { el, type, colorObj: cobj, color, paused } = opts\n  let colors = Utils.getColorArr(color)\n  color = colors[0]\n\n  const meshKey = DEFAULTCONFIG.meshKey\n\n  const colorModelType = props.colorModelType || []\n  if (colorModelType.includes(type) && color != void 0) {\n    const meshs = el[meshKey.color] || []\n    meshs.forEach((e: ThreeModelItem) => {\n      Utils.setMaterialColor(e, color)\n    })\n    return\n  }\n\n  // 场景\n  // 扩展数据\n  const extra = el.extra\n  // 状态运行则运动\n  if (!!extra) {\n    // 暂停状态\n    !!extra.action && (extra.action.paused = paused)\n    if (color != void 0) {\n      const meshs = extra.meshs || []\n      meshs.forEach((e: ThreeModelItem) => {\n        Utils.setMaterialColor(e, color)\n      })\n    }\n  }\n\n  // 主体变色\n  if (props.mainBodyChangeColor && el[meshKey.body]) {\n    const color = cobj.main != void 0 ? cobj.main : cobj.color\n    let colors = Utils.getColorArr(color)\n    if (colors.length) {\n      el[meshKey.body].forEach((e: ThreeModelItem, i: number) => {\n        Utils.setMaterialColor(e, colors[i % colors.length])\n      })\n    }\n  }\n}\n\nonMounted(() => {\n  options.container = containerRef.value\n  scene = new FloorThreeScene(options, {\n    onDblclick: object => {\n      const data = object.data\n      const index = scene.getFloor().findIndex(el => object.uuid === el.uuid)\n      if (typeof data.onDblclick === 'function') {\n        data.onDblclick(toRaw(data), object, index)\n      } else {\n        emits('dblclick', toRaw(data))\n      }\n      if (index > -1) {\n        floorAnimate(index)\n      }\n    },\n    onClickLeft(object) {\n      if (object) {\n        const data = object.data\n        const backData = toRaw(data)\n        emits('select', backData)\n        // 点位点击事件\n        if (typeof data.onClick === 'function') {\n          dialog.show = false\n          data.onClick(backData)\n        } else {\n          dialog.select = [object]\n          dialogShowData()\n        }\n      } else {\n        dialog.select = []\n        dialog.show = false\n      }\n    },\n    onClickRight: _e => {\n      dialog.show = false\n      if (typeof props.config?.back === 'function') {\n        props.config.back(scene)\n      } else {\n        floorAnimate(-1)\n      }\n    },\n    animateCall: () => {\n      // 弹窗位置\n      if (dialog.show && dialog.select && !!dialog.select.length) {\n        // 设备弹窗信息\n        const object = dialog.select[0] as ThreeModelItem\n        updateDialogPosition(object)\n      }\n    }\n  })\n  scene.run()\n  emits('init', scene)\n  initPage()\n})\n\ndefineExpose({\n  floorAnimate,\n  exportImage: () => scene?.exportImage(),\n  update: updateObject\n})\n</script>\n\n<style lang=\"scss\" module>\n@import './style.scss';\n</style>\n","<template>\n  <div :class=\"$style.page\" class=\"h-100 o-h\">\n    <div :class=\"$style.operate\">\n      <div class=\"flex flex-ac\">\n        <span>点位：</span>\n        <el-switch\n          v-model=\"pageOpts.dotShowStrict\"\n          active-text=\"严格\"\n          inactive-text=\"全显\"\n          inline-prompt\n        ></el-switch>\n      </div>\n      <el-link type=\"success\" @click=\"onChangeCruisePoint\">切换巡航点位</el-link>\n      <el-link type=\"primary\" size=\"small\" @click=\"onExport\">导出</el-link>\n    </div>\n    <t-floor-scene\n      ref=\"threeSceneRef\"\n      :dev-env=\"pageOpts.devEnv\"\n      :base-url=\"pageOpts.baseUrl\"\n      :bg-color=\"pageOpts.bgColor\"\n      :bg-url=\"pageOpts.bgUrl\"\n      :env=\"pageOpts.env\"\n      :indexDB=\"pageOpts.indexDB\"\n      :sky-code=\"pageOpts.skyCode\"\n      :camera=\"pageOpts.camera\"\n      :colors=\"pageOpts.colors\"\n      :cruise=\"pageOpts.cruise\"\n      :render=\"pageOpts.render\"\n      :controls=\"pageOpts.controls\"\n      :grid=\"pageOpts.grid\"\n      :directional-light=\"pageOpts.directionalLight\"\n      :config=\"pageOpts.config\"\n      :models=\"pageOpts.models\"\n      :anchor-type=\"pageOpts.anchorType\"\n      :dot-show-strict=\"pageOpts.dotShowStrict\"\n      :floor-model-type=\"pageOpts.floorModelType\"\n      :main-body-change-color=\"pageOpts.mainBodyChangeColor\"\n      :main-body-mesh-name=\"pageOpts.mainBodyMeshName\"\n      :animation-model-type=\"pageOpts.animationModelType\"\n      :objects=\"pageOpts.objects\"\n      :dot-update-object-call=\"dotUpdateObjectCall\"\n      :update-object-call=\"updateObjectCall\"\n      @init=\"onInit\"\n      @click-dot=\"onClickDot\"\n    >\n      <template #dialog=\"{ data, title }\">\n        <div :class=\"$style['dialog-wrap']\">\n          <div :class=\"$style.circle\"></div>\n          <div :class=\"$style.line\"></div>\n          <div :class=\"$style.content\">\n            <div :class=\"$style.title\">{{ title }}</div>\n            <div :class=\"$style.data\">{{ data }}</div>\n          </div>\n        </div>\n      </template>\n    </t-floor-scene>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport tFloorScene from '@/components/floor-scene/index.vue'\nimport { getPageOpts } from './data'\nimport * as request from './request'\n\nimport type { ObjectItem } from 'three-scene/types/model'\n\nimport { useResize } from '@/hooks/scene-resize'\n\nconst pageOpts = reactive(getPageOpts())\nconst threeSceneRef = ref()\n\n// 点位更新回调\nconst dotUpdateObjectCall = (obj: ObjectItem, _group) => {\n  // const val = wsStore.getKeyValue( code ).value\n  const val = Math.random() * 40\n  if (val !== void 0) {\n    obj.value = val\n  }\n\n  obj.show = Math.random() > 0.5\n  obj.value = Number(Number(obj.value || 0).toFixed(2))\n  return {\n    value: obj.value,\n    show: obj.show,\n    font: {\n      ...(obj.font || {}),\n      color: obj.value > 35 ? '#f00' : null\n    }\n  }\n}\n\n// 更新回调\nconst updateObjectCall = (_obj: ObjectItem, isRandom) => {\n  console.log(isRandom)\n  // const code = _obj.deviceCode || ''\n  // console.log( code )\n  const status = Math.random() > 0.5 ? 1 : 0\n  const error = Math.random() > 0.5 ? 1 : 0\n  const disabled = Math.random() > 0.8 ? 1 : 0\n  const ctl = Math.floor(Math.random() * 3)\n  return {\n    status: disabled > 0 ? 0 : status,\n    error: disabled > 0 ? 0 : error,\n    remote: ctl == 1 ? 1 : 0,\n    local: ctl == 2 ? 1 : 0,\n    disabled\n  }\n}\n\nconst onInit = scene => {\n  useResize(scene).resize()\n}\nconst onClickDot = (item, e) => {\n  console.log(item, e)\n}\n\n// 切换巡航点位\nconst onChangeCruisePoint = () => {\n  const points = [\n    [450, 1, 450],\n    [450, 1, -450],\n    [-450, 1, -450],\n    [-450, 1, 450]\n  ].map(items => {\n    return items.map(t => t * (0.5 - Math.random() * 0.5 + 1))\n  })\n  pageOpts.cruise && (pageOpts.cruise.points = points)\n}\n\nconst onExport = () => threeSceneRef.value?.exportImage()\n\nonMounted(() => {\n  request.getConfig().then(res => {\n    let list = res.JsonList\n    const url = res.ModelUrl\n    list.unshift({\n      name: res.Name,\n      type: '',\n      url: url ? `${pageOpts.baseUrl}${url}` : ''\n    })\n    let json = {}\n    if (res.ConfigJson instanceof Object) {\n      json = res.ConfigJson\n    } else if (typeof res.ConfigJson == 'string') {\n      try {\n        json = JSON.parse(res.ConfigJson)\n      } catch (er) {}\n    }\n    Object.keys(json).forEach(key => {\n      pageOpts.config && (pageOpts.config[key] = json[key])\n    })\n\n    pageOpts.objects = list.map(item => {\n      if (item.type === 'COLD_ROOM_INLET') {\n        item.onClick = e => {\n          ElMessage.success({\n            message: e.name,\n            grouping: true\n          })\n        }\n      }\n      return item\n    })\n  })\n})\n</script>\n\n<style lang=\"scss\" module>\n@import './style.scss';\n</style>\n","const base = import.meta.env.VITE_BEFORE_STATIC_PATH\n\nconst devEnv = import.meta.env.VITE_MODE !== 'production-'\n\nexport const getPageOpts = (): {} & Omit<\n  import('@/components/floor-scene/index').Props,\n  'formatObject'\n> => ({\n  devEnv,\n  baseUrl: base,\n  bgColor: '',\n  skyCode: '101',\n  render: {\n    alpha: true,\n    preserveDrawingBuffer: true\n  },\n  // bgUrl: '/oss/img/map/earth.jpg',\n  // bgUrl: [`/posX.jpeg`, `/negX.jpeg`, `/posY.jpeg`, `/negY.jpeg`, `/posZ.jpeg`, `/negZ.jpeg`].map(\n  //   u => `/oss/img/sky/216${u}`\n  // ),\n  // env: '/oss/textures/hdr/skidpan_2k.hdr',\n  env: '/oss/textures/hdr/3.hdr',\n  camera: {\n    far: 1000000\n  },\n  colors: {\n    normal: {\n      main: 0x00ff00\n    },\n    runing: {\n      main: 0xff0ff0,\n      text: 0x000000\n    }\n  },\n  cruise: {\n    visible: true,\n    // helper: true,\n    segment: 20,\n    tension: 0.1,\n    speed: 10,\n    alway: true,\n    points: [\n      [450, 490, 450],\n      [450, 490, -450],\n      [-450, 490, -450],\n      [-450, 490, 450]\n    ],\n    offset: 10\n  },\n  controls: {\n    screenSpacePanning: false,\n    maxDistance: 5000,\n    maxPolarAngle: Math.PI * 0.46\n  },\n  directionalLight: {\n    helper: !true\n  },\n  grid: {\n    visible: true\n  },\n\n  models: [\n    {\n      key: 'FLOOR_ONE',\n      name: '大堂', // 高 140\n      size: 8.5,\n      url: '/1楼.glb'\n    },\n    {\n      key: 'FLOOR_COMMON',\n      name: '楼层', // 高 60\n      size: 13.7,\n      url: '/楼层.glb'\n    },\n    {\n      key: 'FLOOR_ATTIC',\n      name: '楼顶', // 高 350\n      size: 0.1,\n      url: '/楼顶.glb'\n    },\n\n    {\n      key: 'COLD_CAMERA',\n      name: '摄像头',\n      type: 'sprite',\n      size: 1,\n      range: { x: 37, y: 77 },\n      mapUrl: '/sxt.png'\n    },\n    {\n      key: 'COLD_ROOM_INLET',\n      name: '房间入口',\n      type: 'sprite',\n      size: 1,\n      range: { x: 37, y: 77 },\n      mapUrl: '/fjdw.png'\n    },\n    {\n      key: 'COLD_GPS',\n      name: '定位',\n      type: 'sprite',\n      size: 1,\n      range: { x: 51, y: 56 },\n      mapUrl: '/dw.png'\n    }\n  ].map(item => {\n    if (item.url) {\n      item.url = '/oss/model/floor' + item.url\n    }\n    if (item.mapUrl) {\n      item.mapUrl = '/oss/textures/floor' + item.mapUrl\n    }\n    return item as import('three-scene/types/model').ModelItem\n  }),\n  objects: [],\n  config: {},\n\n  indexDB: {\n    cache: true,\n    dbName: 'THREE__FLOOR__DB',\n    tbName: 'TB',\n    version: 1\n  },\n  dotShowStrict: !true,\n  colorMeshName: [],\n  floorModelType: [\n    'FLOOR_COMMON',\n    'FLOOR_ONE',\n    'FLOOR_TWO_FIVE',\n    'FLOOR_SIX',\n    'FLOOR_SEVEN_ELEVEN',\n    'FLOOR_TWELVE_THIRTEEN',\n    'FLOOR_FOURTEEN_SIXTEEN',\n    'FLOOR_SEVENTEEN_EIGHTEEN'\n  ],\n  anchorType: ['COLD_CAMERA', 'COLD_ROOM_INLET', 'COLD_GPS'],\n  mainBodyChangeColor: true,\n  mainBodyMeshName: ['立方体062'],\n  animationModelType: ['FLOOR_COMMON']\n})\n","import { Axios, Api } from '@/config'\n\nexport const getConfig = () => {\n  return Axios.get(Api.d3.floor)\n}\n"],"names":["DEFAULTCONFIG","body","color","warning","local","disabled","pipe","Hooks","ThreeScene.Hooks","raycaster","pointer","update","raycasterUpdate","useRaycaster","initCSS2DRender","createCSS2DDom","useCSS2D","FloorThreeScene","ThreeScene.Scene","constructor","options","extend","super","__publicField","this","css2DRender","container","domElement","className","bindEvent","addDeviceGroup","addDotGroup","group","THREE.Group","name","deviceGroup","addObject","clearDevice","disposeObj","clearDot","addDevice","obj","add","dotGroup","scene","addDot","item","clickBack","pos","position","size","font","x","y","z","label","onClick","data","_position_","_a","modelAnimate","render","camera","animateCall","onDblclick","e","dom","scale","setFromCamera","objects","interscts","intersectObjects","length","object","findParentGroupGroup","onPointerMove","checkIntersectObjects","onPointerUp","isClick","timeStamp","tsp","button","onClickRight","type","children","filter","it","visible","_isAnchor_","style","cursor","_b","onClickLeft","_c","_find","parent","_isDevice_","getFloor","_isFloor_","hideOmitFloor","forEach","el","getAll","concat","getFlowMark","mark","followMark","getAnimTargetPos","config","_to","_target","controls","to","target","set","resize","width","height","setSize","dispose","colors","normal","main","text","FM","runing","error","props","__props","COLORS","Utils","deepMerge","change","changeBackground","load","backgroundLoad","skys","useBackground","progress","loadModel","loadModels","getModel","useModelLoader","baseUrl","dracoPath","basisPath","colorMeshName","indexDB","dialog","useDialog","emits","__emit","containerRef","ref","devEnv","bgUrl","env","bgColor","cruise","fog","grid","axes","directionalLight","watch","dotShowStrict","toggleDotVisible","v","setScale","points","isEnd","setCruisePoint","list","i","dotKey","updateDotVisible","floorAnimate","index","floors","isExist","floorExpandHiddenOther","k","margin","floorExpandMargin","mode","floorExpandMode","cy","ty","tz","items","fllowModelAnimate","TWEEN.Tween","easing","TWEEN.Easing","Quadratic","Out","start","floorExpandChangeViewAngle","_d","isCameraMove","cameraInSceneAnimate","Math","abs","cz","console","log","dotUpdateObjectCall","res","Object","keys","key","warn","Error","show","element","getElementsByClassName","fontSize","textContent","value","unit","updateDialogPosition","getPlanePosition","left","top","loopLoadObject","async","url","model","POS","SCA","rotation","ROT","get_P_S_R_param","_isBase_","Promise","resolve","loadBase","toRaw","createDotObject","floorType","floorModelType","anchorType","modelDeepClone","animationModelType","includes","mainBodyChangeColor","mesh","mainBodyMeshName","some","t","indexOf","cobj","colrs","getColorArr","setMaterialColor","meshs","findObjectsByHasProperty","action","mixer","THREE.AnimationMixer","animations","clipAction","paused","timeScale","play","extra","traverse","push","deviceConfigs","assemblyScenario","percentage","nextTick","formatObject","len","_loop","initDevices","floorIndex","floorExpandIndex","nA","then","controlSave","initPage","models","skyCode","updateObject","isRandom","emitData","updateObjectCall","_i","status","remote","getColorCall","cr","changeModleStatusColor","colorObj","opts","colors2","meshKey","colorModelType","color2","colors3","onMounted","findIndex","uuid","backData","select","title","_e","back","run","__expose","exportImage","pageOpts","reactive","alpha","preserveDrawingBuffer","far","segment","tension","speed","alway","offset","screenSpacePanning","maxDistance","maxPolarAngle","PI","helper","range","mapUrl","map","cache","dbName","tbName","version","threeSceneRef","_group","val","random","Number","toFixed","_obj","ctl","floor","onInit","useResize","onClickDot","onChangeCruisePoint","onExport","Axios","get","Api","d3","JsonList","ModelUrl","unshift","Name","json","ConfigJson","JSON","parse","er","ElMessage","success","message","grouping"],"mappings":"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"}