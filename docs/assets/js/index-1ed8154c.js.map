{"version":3,"file":"index-1ed8154c.js","sources":["../../../code/src/pages/webgl/geometry/buffer/methods.ts","../../../code/src/pages/webgl/geometry/buffer/index.vue"],"sourcesContent":["import * as THREE from 'three'\n\nimport * as ThreeScene from 'three-scene'\n\nconst createBufferGeometry = () => {\n  // 三角形数量\n  const triangles = 5000\n\n  // 几何缓冲器\n  let geometry = new THREE.BufferGeometry()\n\n  // 位置\n  const positions = new Float32Array(triangles * 3 * 3)\n  // 顶点法线\n  const normals = new Float32Array(triangles * 3 * 3)\n  // 顶点颜色\n  const colors = new Float32Array(triangles * 3 * 3)\n\n  const color = new THREE.Color()\n\n  // 立方体大小\n  const n = 500,\n    n2 = n / 2\n  // 大小\n  const d = 80,\n    d2 = d / 2\n\n  // 三维向量\n  const pA = new THREE.Vector3()\n  const pB = new THREE.Vector3()\n  const pC = new THREE.Vector3()\n\n  const cb = new THREE.Vector3()\n  const ab = new THREE.Vector3()\n\n  // 随机生成\n  for (let i = 0; i < positions.length; i += 9) {\n    // 位置\n    // 单个三角形坐标位置\n    const x = Math.random() * n - n2\n    const y = Math.random() * n - n2\n    const z = Math.random() * n - n2\n\n    // 顶点坐标\n    const ax = x + Math.random() * d - d2\n    const ay = y + Math.random() * d - d2\n    const az = z + Math.random() * d - d2\n\n    const bx = x + Math.random() * n - n2\n    const by = y + Math.random() * n - n2\n    const bz = z + Math.random() * n - n2\n\n    const cx = x + Math.random() * n - n2\n    const cy = y + Math.random() * n - n2\n    const cz = z + Math.random() * n - n2\n\n    positions[i] = ax\n    positions[i + 1] = ay\n    positions[i + 2] = az\n\n    positions[i + 3] = bx\n    positions[i + 4] = by\n    positions[i + 5] = bz\n\n    positions[i + 6] = cx\n    positions[i + 7] = cy\n    positions[i + 8] = cz\n\n    // 顶点法线\n    pA.set(ax, ay, az)\n    pB.set(bx, by, bz)\n    pC.set(cx, cy, cz)\n\n    // 子向量\n    cb.subVectors(pC, pB)\n    ab.subVectors(pA, pB)\n    // 判断左右\n    cb.cross(ab)\n\n    // 向量方向归一化\n    cb.normalize()\n\n    const nx = cb.x\n    const ny = cb.y\n    const nz = cb.z\n\n    normals[i] = nx\n    normals[i + 1] = ny\n    normals[i + 2] = nz\n\n    normals[i + 3] = nx\n    normals[i + 4] = ny\n    normals[i + 5] = nz\n\n    normals[i + 6] = nx\n    normals[i + 6] = ny\n    normals[i + 7] = nz\n\n    // 颜色\n    const vx = x / n + 0.5\n    const vy = y / n + 0.5\n    const vz = z / n + 0.5\n\n    color.setRGB(vx, vy, vz)\n\n    colors[i] = color.r\n    colors[i + 1] = color.g\n    colors[i + 2] = color.b\n\n    colors[i + 3] = color.r\n    colors[i + 4] = color.g\n    colors[i + 5] = color.b\n\n    colors[i + 6] = color.r\n    colors[i + 7] = color.g\n    colors[i + 8] = color.b\n  }\n\n  // 创建顶点属性\n  geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3))\n  geometry.setAttribute('normal', new THREE.BufferAttribute(normals, 3))\n  geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3))\n\n  const material = new THREE.MeshPhongMaterial({\n    color: 0xaaaaaa,\n    // 镜面反射光\n    specular: 0xffffff,\n    // 光泽度\n    shininess: 250,\n    side: THREE.DoubleSide,\n    // 顶点颜色\n    vertexColors: true\n  })\n  const mesh = new THREE.Mesh(geometry, material)\n  mesh.name = '缓冲几何图形'\n  return mesh\n}\n\nconst createLine = () => {\n  const geometry = new THREE.BufferGeometry()\n  geometry.setAttribute('position', new THREE.BufferAttribute(new Float32Array(4 * 3), 3))\n  const material = new THREE.LineBasicMaterial({\n    color: 0xffffff,\n    transparent: true\n  })\n  return new THREE.Line(geometry, material)\n}\n\nexport class NewThreeScene extends ThreeScene.Scene {\n  mesh: InstanceType<typeof THREE.Mesh>\n  // 射线拾取\n  raycaster: InstanceType<typeof THREE.Raycaster>\n  // 坐标（二维向量）\n  position: InstanceType<typeof THREE.Vector2>\n  // 线网格\n  line: InstanceType<typeof THREE.Line>\n  constructor(options: ConstructorParameters<typeof ThreeScene.Scene>[0]) {\n    super(options)\n\n    this.mesh = createBufferGeometry()\n    this.raycaster = new THREE.Raycaster()\n    this.position = new THREE.Vector2()\n    this.line = createLine()\n    this.bindEvent()\n  }\n\n  bindEvent() {\n    this.addObject(this.mesh)\n    this.addObject(this.line)\n\n    this.renderer.domElement.addEventListener('positionmove', this.onPointerMove.bind(this))\n  }\n\n  onPointerMove(e) {\n    const dom = this.container\n    // 获取元素偏移量\n    const rect = dom.getBoundingClientRect() || { left: 0, top: 0 }\n    // 渲染元素作为子组件可能有缩放处理，元素大小需要计算处理\n    const scale = this.options.scale\n\n    // 设置二维向量坐标 （-1， 1 范围）\n    this.position.x = ((e.clientX - rect.left) / (dom.clientWidth * scale)) * 2 - 1\n    this.position.y = -((e.clientY - rect.top) / (dom.clientHeight * scale)) * 2 + 1\n  }\n\n  modelAnimate() {\n    const ts = Date.now() * 0.001\n\n    this.mesh.rotation.x = ts * 0.15\n    this.mesh.rotation.y = ts * 0.25\n\n    // 设置新的原点和方向向量更新射线, 用照相机的原点和点击的点构成一条直线\n    this.raycaster.setFromCamera(this.position, this.camera)\n    // 检查射线和物体之间的交叉点（包含或不包含后代）\n    const interscts = this.raycaster.intersectObject(this.mesh)\n\n    if (interscts.length > 0) {\n      const intersect = interscts[0]\n      // 面\n      const face = intersect.face as any\n\n      const linePosition = this.line.geometry.attributes.position as any\n      const meshPosition = this.mesh.geometry.attributes.position as any\n\n      // 复制 (索引， 属性，索引 )\n      linePosition.copyAt(0, meshPosition, face.a)\n      linePosition.copyAt(1, meshPosition, face.b)\n      linePosition.copyAt(2, meshPosition, face.c)\n      linePosition.copyAt(3, meshPosition, face.a)\n\n      // 更新矩阵\n      this.mesh.updateMatrix()\n\n      // 顶点坐标进行矩阵变换\n      this.line.geometry.applyMatrix4(this.mesh.matrix)\n\n      this.line.visible = true\n    } else {\n      this.line.visible = false\n    }\n  }\n}\n","<template>\n  <div :class=\"$style.page\" class=\"h-100 o-h\">\n    <div class=\"h-100\" ref=\"containerRef\"></div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { NewThreeScene } from './methods'\nimport { useResize } from '@/hooks/scene-resize'\n\nconst containerRef = ref()\n\nconst options: ConstructorParameters<typeof NewThreeScene>[0] = {\n  camera: {\n    position: [0, 1000, 2000]\n  },\n  render: {\n    alpha: true\n  },\n  grid: {\n    visible: true\n  },\n  axes: {\n    visible: true\n  }\n}\n\nlet scene: InstanceType<typeof NewThreeScene>\n\nonMounted(() => {\n  options.container = containerRef.value\n  scene = new NewThreeScene(options)\n  scene.run()\n  useResize(scene).resize()\n})\n</script>\n\n<style lang=\"scss\" module>\n.page {\n  position: relative;\n}\n</style>\n"],"names":["NewThreeScene","ThreeScene.Scene","constructor","options","super","__publicField","this","mesh","geometry","THREE.BufferGeometry","positions","Float32Array","triangles","normals","colors","color","THREE.Color","n","n2","pA","THREE.Vector3","pB","pC","cb","ab","i","length","x","Math","random","y","z","ax","d","ay","az","bx","by","bz","cx","cy","cz","set","subVectors","cross","normalize","nx","ny","nz","vx","vy","vz","setRGB","r","g","b","setAttribute","THREE.BufferAttribute","material","THREE.MeshPhongMaterial","specular","shininess","side","THREE.DoubleSide","vertexColors","THREE.Mesh","name","createBufferGeometry","raycaster","THREE.Raycaster","position","THREE.Vector2","line","THREE.LineBasicMaterial","transparent","THREE.Line","createLine","bindEvent","addObject","renderer","domElement","addEventListener","onPointerMove","bind","e","dom","container","rect","getBoundingClientRect","left","top","scale","clientX","clientWidth","clientY","clientHeight","modelAnimate","ts","Date","now","rotation","setFromCamera","camera","interscts","intersectObject","face","linePosition","attributes","meshPosition","copyAt","a","c","updateMatrix","applyMatrix4","matrix","visible","containerRef","ref","render","alpha","grid","axes","scene","onMounted","value","run","useResize","resize"],"mappings":"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"}