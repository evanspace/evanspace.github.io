{"version":3,"file":"index-e371377a.js","sources":["../../../code/src/pages/webgpu/texture/parallax/methods.ts","../../../code/src/pages/webgpu/texture/parallax/index.vue"],"sourcesContent":["import * as THREE from 'three/webgpu'\n\nimport * as ThreeScene from 'three-scene'\n\nimport { GUI } from 'dat.gui'\n\nconst { uniform, texture, parallaxUV, uv, blendOverlay } = THREE.TSL\n\nconst base = import.meta.env.VITE_BEFORE_STATIC_PATH\n\nconst textureLoader = new THREE.TextureLoader().setPath(`${base}/oss/textures/gpu/`)\n\nconst parallaScale = uniform(0.3)\n\nconst { backgroundLoad } = ThreeScene.Hooks.useBackground()\n\nexport class ParallaxScene extends ThreeScene.Scene {\n  gui: InstanceType<typeof GUI>\n\n  constructor(options: ConstructorParameters<typeof ThreeScene.Scene>[0]) {\n    super(options)\n\n    backgroundLoad(this.scene, '501')\n    // @ts-ignore\n    this.scene.environment = this.scene.background\n\n    this.gui = new GUI()\n    this.addGui()\n  }\n\n  async initModel() {\n    // 顶部贴图\n    const topTexture = await textureLoader.loadAsync('Ice002_1K-JPG_Color.jpg')\n    topTexture.colorSpace = THREE.SRGBColorSpace\n\n    // 粗糙度贴图\n    const roughnessTexture = await textureLoader.loadAsync('Ice002_1K-JPG_Roughness.jpg')\n    roughnessTexture.colorSpace = THREE.NoColorSpace\n\n    // 法线\n    const normalTexture = await textureLoader.loadAsync('Ice002_1K-JPG_NormalGL.jpg')\n    normalTexture.colorSpace = THREE.NoColorSpace\n\n    // 置换\n    const displaceTexture = await textureLoader.loadAsync('Ice002_1K-JPG_Displacement.jpg')\n    displaceTexture.colorSpace = THREE.NoColorSpace\n\n    // 底部贴图\n    const bottomTexture = await textureLoader.loadAsync('Ice003_1K-JPG_Color.jpg')\n    bottomTexture.colorSpace = THREE.SRGBColorSpace\n    bottomTexture.wrapS = THREE.RepeatWrapping\n    bottomTexture.wrapT = THREE.RepeatWrapping\n\n    // 视差效果\n    // 偏差贴图\n    const offsetUv = texture(displaceTexture).mul(parallaScale)\n    // 视差贴图偏差\n    const parallaxUVOffset = parallaxUV(uv(), offsetUv)\n    const parallaxResult = texture(bottomTexture, parallaxUVOffset)\n\n    const iceNode = blendOverlay(texture(topTexture), parallaxResult)\n\n    const material = new THREE.MeshStandardNodeMaterial({\n      colorNode: iceNode.mul(5), // 颜色强度增加到\n      normalMap: normalTexture,\n      metalness: 0\n    })\n    material.roughnessNode = texture(roughnessTexture)\n\n    const geometry = new THREE.BoxGeometry(10, 10, 10)\n    const ground = new THREE.Mesh(geometry, material)\n    ground.rotateX(-Math.PI / 2)\n    ground.scale.setScalar(40)\n    this.addObject(ground)\n  }\n\n  render() {\n    this.renderer.renderAsync(this.scene, this.camera)\n  }\n\n  createAmbientLight(color: string | number, intensity: number) {\n    return new THREE.AmbientLight(color, intensity)\n  }\n\n  createDirectionalLight(color: string | number, intensity: number) {\n    return new THREE.DirectionalLight(color, intensity)\n  }\n\n  createRender() {\n    return new THREE.WebGPURenderer(this.options.render) as any\n  }\n\n  addGui() {\n    const gui = this.gui\n\n    gui.add(this.controls, 'autoRotate').name('自动旋转')\n    gui.add(parallaScale, 'value', 0, 1).name('视差大小')\n\n    gui.domElement.className += ' gui-wrap'\n    this.container.parentNode?.appendChild(gui.domElement)\n  }\n}\n","<template>\n  <div class=\"three-page\">\n    <div class=\"h-100\" ref=\"containerRef\"></div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { ParallaxScene } from './methods'\n\nimport { useResize } from '@/hooks/scene-resize'\n\nconst containerRef = ref()\nconst options: ConstructorParameters<typeof ParallaxScene>[0] = {\n  grid: {\n    // visible: true\n  },\n  controls: {\n    autoRotate: true\n  }\n}\nlet scene: InstanceType<typeof ParallaxScene>\n\nonMounted(() => {\n  options.container = containerRef.value\n  scene = new ParallaxScene(options).run()\n\n  useResize(scene).resize()\n})\n</script>\n\n<style lang=\"scss\"></style>\n"],"names":["uniform","texture","parallaxUV","uv","blendOverlay","THREE.TSL","textureLoader","THREE.TextureLoader","setPath","parallaScale","backgroundLoad","ThreeScene.Hooks","useBackground","ParallaxScene","ThreeScene.Scene","constructor","options","super","__publicField","this","scene","environment","background","gui","GUI","addGui","initModel","topTexture","loadAsync","colorSpace","THREE.SRGBColorSpace","roughnessTexture","THREE.NoColorSpace","normalTexture","displaceTexture","bottomTexture","wrapS","THREE.RepeatWrapping","wrapT","offsetUv","mul","parallaxUVOffset","parallaxResult","iceNode","material","THREE.MeshStandardNodeMaterial","colorNode","normalMap","metalness","roughnessNode","geometry","THREE.BoxGeometry","ground","THREE.Mesh","rotateX","Math","PI","scale","setScalar","addObject","render","renderer","renderAsync","camera","createAmbientLight","color","intensity","THREE.AmbientLight","createDirectionalLight","THREE.DirectionalLight","createRender","THREE.WebGPURenderer","add","controls","name","domElement","className","_a","container","parentNode","appendChild","containerRef","ref","grid","autoRotate","onMounted","value","run","useResize","resize"],"mappings":"qaAMA,MAAMA,QAAEA,EAASC,QAAAA,EAAAC,WAASA,EAAYC,GAAAA,EAAAC,aAAIA,GAAiBC,EAIrDC,GAAgB,IAAIC,GAAsBC,QAAQ,sBAElDC,EAAeT,EAAQ,KAEvBU,eAAEA,GAAmBC,EAAiBC,gBAE/B,MAAAC,UAAsBC,EAGjC,WAAAC,CAAYC,GACVC,MAAMD,GAHRE,EAAAC,KAAA,OAKiBT,EAAAS,KAAKC,MAAO,OAEtBD,KAAAC,MAAMC,YAAcF,KAAKC,MAAME,WAE/BH,KAAAI,IAAM,IAAIC,EACfL,KAAKM,QACP,CAEA,eAAMC,GAEJ,MAAMC,QAAmBrB,EAAcsB,UAAU,2BACjDD,EAAWE,WAAaC,EAGxB,MAAMC,QAAyBzB,EAAcsB,UAAU,+BACvDG,EAAiBF,WAAaG,EAG9B,MAAMC,QAAsB3B,EAAcsB,UAAU,8BACpDK,EAAcJ,WAAaG,EAG3B,MAAME,QAAwB5B,EAAcsB,UAAU,kCACtDM,EAAgBL,WAAaG,EAG7B,MAAMG,QAAsB7B,EAAcsB,UAAU,2BACpDO,EAAcN,WAAaC,EAC3BK,EAAcC,MAAQC,EACtBF,EAAcG,MAAQD,EAItB,MAAME,EAAWtC,EAAQiC,GAAiBM,IAAI/B,GAExCgC,EAAmBvC,EAAWC,IAAMoC,GACpCG,EAAiBzC,EAAQkC,EAAeM,GAExCE,EAAUvC,EAAaH,EAAQ0B,GAAae,GAE5CE,EAAW,IAAIC,EAA+B,CAClDC,UAAWH,EAAQH,IAAI,GACvBO,UAAWd,EACXe,UAAW,IAEJJ,EAAAK,cAAgBhD,EAAQ8B,GAEjC,MAAMmB,EAAW,IAAIC,EAAkB,GAAI,GAAI,IACzCC,EAAS,IAAIC,EAAWH,EAAUN,GACxCQ,EAAOE,SAASC,KAAKC,GAAK,GACnBJ,EAAAK,MAAMC,UAAU,IACvBvC,KAAKwC,UAAUP,EACjB,CAEA,MAAAQ,GACEzC,KAAK0C,SAASC,YAAY3C,KAAKC,MAAOD,KAAK4C,OAC7C,CAEA,kBAAAC,CAAmBC,EAAwBC,GAClC,OAAA,IAAIC,EAAmBF,EAAOC,EACvC,CAEA,sBAAAE,CAAuBH,EAAwBC,GACtC,OAAA,IAAIG,EAAuBJ,EAAOC,EAC3C,CAEA,YAAAI,GACE,OAAO,IAAIC,EAAqBpD,KAAKH,QAAQ4C,OAC/C,CAEA,MAAAnC,SACE,MAAMF,EAAMJ,KAAKI,IAEjBA,EAAIiD,IAAIrD,KAAKsD,SAAU,cAAcC,KAAK,QAC1CnD,EAAIiD,IAAI/D,EAAc,QAAS,EAAG,GAAGiE,KAAK,QAE1CnD,EAAIoD,WAAWC,WAAa,YAC5B,OAAAC,EAAA1D,KAAK2D,UAAUC,aAAYF,EAAAG,YAAYzD,EAAIoD,WAC7C,4DCzFF,MAAAM,EAAAC,IACAlE,EAAA,CAAgEmE,KAAA,CACxD,EAENV,SAAA,CACUW,YAAA,IAIZ,IAAAhE,SAEAiE,GAAA,KACErE,EAAA8D,UAAAG,EAAAK,MACAlE,EAAA,IAAAP,EAAAG,GAAAuE,MAEAC,EAAApE,GAAAqE"}