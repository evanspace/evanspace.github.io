{"version":3,"file":"index-117190a4.js","sources":["../../../code/src/pages/echarts/map/methods.ts","../../../code/src/pages/echarts/map/index.vue","../../../code/src/pages/echarts/map/request.ts"],"sourcesContent":["/* map */\n// 获取 visualMap 配置\nexport const getMapVisualMapCif = () => {\n  return {\n    left: '2%',\n    bottom: '2%',\n    // type: 'piecewise',\n    type: 'continuous',\n    show: true,\n    max: 1000,\n    // splitList,\n    seriesIndex: [0], // 仅使第一个series生效\n    calculable: true, // 拖拽用的手柄\n    inRange: {\n      // color: [ '#0B4187', '#cda819', '#0e8b43' ]\n      color: ['#1e72ba', '#33b1e7']\n    },\n    textStyle: {\n      color: '#ffffff',\n      fontSize: 16\n    }\n  }\n}\n\n// 获取 tooltip 配置\nconst getMapTooltipCif = () => {\n  return {\n    trigger: 'item',\n    padding: 0,\n    enterable: !true,\n    transitionDuration: 1,\n    backgroundColor: 'rgba(9, 24, 89, 1)',\n    borderColor: 'transparent',\n    formatter: opts => {\n      // 类型\n      let type = opts.seriesType\n\n      let param = <import('.').MapTipOpts>{\n        title: '',\n        list: []\n      }\n\n      // 地图区域\n      if (type == 'map' || type == 'map3D') {\n        if (!opts.data) return\n        // @ts-ignore\n        const list = window.MapData.cityJson\n        const obj = list.find(v => v.code == opts.data.code)\n        if (!obj) return\n        param.city = obj.city\n        param.count = obj.count\n        param.list = [{ label: '今日用电量', value: obj.value, unit: 'kWh' }]\n      }\n      // 带有涟漪特效动画的散点（气泡）图\n      else if (type == 'effectScatter') {\n        let val = opts.value\n        param.title = opts.name\n        param.list = [\n          { label: '经度', value: val[0], color: '#25f4f2' },\n          { label: '维度', value: val[1], color: '#25f4f2' }\n        ]\n      }\n      // 散点（气泡）图\n      else if (type == 'scatter') {\n        // 获取全局存储的数据查找对应项目\n        // @ts-ignore\n        const list = window.MapData.scatters\n        const obj = list.find(v => v.id == opts.data.id)\n        if (!obj) return ''\n        param.city = obj.city\n        param.count = obj.count\n        param.title = obj.name\n        param.list = [\n          { label: '今日用电量', value: obj.use, unit: 'kWh' },\n          { label: '今日碳排放', value: obj.carbon, unit: 'kgCO₂' }\n        ]\n      }\n      // 地图线的动画效果\n      else if (type == 'lines') {\n        let path = opts.data.path\n        let coords = opts.data.coords\n        param.title = path\n        param.list = [\n          { label: '起点', value: coords[0].join('-'), color: '#25f4f2' },\n          { label: '终点', value: coords[1].join('-'), color: '#25f4f2' }\n        ]\n      }\n      return getMaptipHtml(param)\n    }\n  }\n}\n\n// 获取地图提示 html\nconst getMaptipHtml = (opts: import('.').MapTipOpts) => {\n  const base = import.meta.env.VITE_BEFORE_STATIC_PATH\n  let tipHtml = `\n    <div class=\"map-tooltip\">\n    `\n  if (opts.city) {\n    tipHtml += `\n      <div class=\"city flex\">\n        <span class=\"name\">${opts.city || ''}</span>\n        <span class=\"to\">共${opts.count ?? 0}个项目</span>\n      </div>`\n  }\n  if (opts.title) {\n    tipHtml += `\n        <div class=\"project flex flex-ac\">\n          <img src=\"${base}oss/img/map/pos.png\" alt=\"\">\n          <span class=\"name\">${opts.title}</span>\n        </div>\n      `\n  }\n  tipHtml += '<div class=\"count\">'\n  tipHtml += opts.list\n    .map(it => {\n      return `\n        <div class=\"item\">\n          <span>${it.label || ''}</span>\n          <span>${it.value ?? 0}</span>\n          <span>${it.unit || ''}</span>\n        </div>\n      `\n    })\n    .join('')\n\n  tipHtml += `\n      </div>\n    </div>\n  `\n  return tipHtml\n}\n\n// 获取 geo 配置\nconst getMapGeoCif = (zoom = 1, roam = true) => {\n  return {\n    map: 'map',\n    zoom: zoom,\n    roam,\n    label: {\n      // show: true,\n      color: '#fff'\n    },\n    itemStyle: {\n      borderColor: 'rgba(19, 122, 202, .9)',\n      areaColor: '#0B4187',\n      borderWidth: 1,\n      shadowColor: 'rgba(0, 0, 0, .9)',\n      shadowBlur: 1,\n      shadowOffsetX: 1,\n      shadowOffsetY: 1\n    },\n    // 选中样式\n    select: null,\n    // 高亮样式\n    emphasis: {\n      itemStyle: {\n        // show: false,\n        areaColor: '#091859'\n        // opacity: .8\n      },\n      label: {\n        show: false,\n        color: '#ffffff'\n      }\n    }\n  }\n  return {\n    map: 'map',\n    zoom: zoom,\n    roam,\n    itemStyle: {\n      borderColor: '#91D3EA',\n      shadowColor: '#094575',\n      shadowOffsetX: 0,\n      shadowOffsetY: 10\n    }\n  }\n}\n\n// 获取 series map 配置\nconst getMapMapCif = (zoom = 1, roam = true) => {\n  return {}\n  return {\n    map: 'map',\n    zoom: zoom,\n    roam,\n    label: {\n      color: '#fff'\n    },\n    itemStyle: {\n      borderColor: '#b4eafc',\n      areaColor: '#0B4187',\n      borderWidth: 1,\n      shadowBlur: 1,\n      shadowColor: '#35c1ee',\n      shadowOffsetX: 1,\n      shadowOffsetY: 1\n    },\n    // 选中样式\n    select: null,\n    // 高亮样式\n    emphasis: {\n      itemStyle: {\n        areaColor: '#091859'\n      },\n      label: {\n        show: false,\n        color: '#ffffff'\n      }\n    },\n    regions: [\n      {\n        name: '南海诸岛',\n        label: {\n          show: true,\n          color: '#fff'\n        },\n        itemStyle: {\n          shadowColor: 'transparent'\n        }\n      }\n    ]\n  }\n}\n\n// 获取 effectScatter 配置\nexport const getMapEffectScatterCif = () => {\n  return {\n    // 带有涟漪特效动画的散点（气泡）图\n    type: 'effectScatter',\n    showEffectOn: 'render',\n    coordinateSystem: 'geo',\n    zlevel: 1,\n    rippleEffect: {\n      color: '#1DE9B6',\n      period: 4,\n      scale: 3,\n      brushType: 'fill'\n    },\n    hoverAnimation: true,\n    itemStyle: {\n      color: '#1DE9B6',\n      shadowColor: '#333'\n    }\n  }\n}\n\n// 获取 scatter 配置\nconst getMapScatterCif = () => {\n  const base = import.meta.env.VITE_BEFORE_STATIC_PATH\n  return {\n    // 散点（气泡）图\n    type: 'scatter',\n    showEffectOn: 'render',\n    coordinateSystem: 'geo',\n    symbol: `image://${base}oss/img/map/map.png`,\n    symbolSize: 32,\n    itemStyle: {\n      color: '#ffffff',\n      borderWidth: 1,\n      borderColor: '#1DE9B6'\n    }\n  }\n}\n\n// 获取 lines 配置\nexport const getMapLinesCif = () => {\n  return {\n    // 地图线的动画效果\n    type: 'lines',\n    zlevel: 2,\n    effect: {\n      show: true,\n      // 箭头指向速度，值越小速度越快\n      period: 3,\n      // 特效尾迹长度[0,1]值越大，尾迹越长重\n      trailLength: 0.1,\n      // 箭头图标\n      symbol: 'arrow',\n      // 图标大小\n      symbolSize: 10\n    },\n    lineStyle: {\n      width: 1,\n      // 尾迹线条透明度\n      opacity: 0.5,\n      // 尾迹线条曲直度\n      curveness: 0.3\n    }\n  }\n}\n\n// 获取省份配置\nexport const getCityMapOptions = (city = 'map', data) => {\n  // 大地图\n  const cityJson = data.cityJson || []\n  // 散点\n  const scatters = data.scatters || []\n\n  // 导航\n  // const splitList = data.splitList || []\n  // 指示点\n  const points = data.points || []\n  // 指示线\n  const lines = data.lines || []\n\n  const zoom = 1.25,\n    roam = true\n\n  return {\n    title: {},\n    tooltip: getMapTooltipCif(),\n    visualMap: getMapVisualMapCif(),\n    globe: {\n      show: false\n    },\n    geo: {\n      ...getMapGeoCif(zoom, roam),\n      map: city\n    },\n    series: [\n      {\n        type: 'map',\n        ...getMapMapCif(zoom, roam),\n        map: city,\n        geoIndex: 0,\n        data: cityJson\n      },\n      {\n        ...getMapScatterCif(),\n        data: scatters\n      },\n      {\n        ...getMapEffectScatterCif(),\n        data: points\n      },\n      {\n        ...getMapLinesCif(),\n        data: lines\n      }\n    ]\n  }\n}\n\n// 3D 配置\nexport const getCityMap3DOptions = (city = 'map', data) => {\n  //3D地图旋转主要配置\n  const viewControl = {\n    alpha: 50,\n    beta: -2,\n    rotateSensitivity: 3,\n    panSensitivity: 3,\n    panMouseButton: 'right',\n    distance: 180,\n    minAlpha: 5,\n    maxAlpha: 100,\n    animation: false,\n    animationDurationUpdate: 1000,\n    animationEasingUpdate: 'cubicInOut'\n  }\n  return {\n    tooltip: {\n      show: true,\n      ...getMapTooltipCif()\n    },\n    // visualMap: {\n    //   ...getMapVisualMapCif(),\n    // },\n    geo3D: {\n      map: city,\n      show: false,\n      boxWidth: 200,\n      boxHeight: 15, //4:没有bar. 30:有bar,bar最高度30，按比例分配高度\n      regionHeight: 5,\n      shading: 'lambert',\n      top: -15, //文字悬浮高度\n      viewControl: viewControl\n    },\n    series: [\n      {\n        type: 'map3D',\n        map: city,\n        data: data.scatters || [],\n        show: true,\n        boxWidth: 200,\n        boxHeight: 20, //4:没有bar. 30:有bar,bar最高度30，按比例分配高度\n        regionHeight: 10,\n        shading: 'lambert',\n        itemStyle: {\n          color: '#0B4187',\n          borderWidth: 2,\n          borderColor: '#3475c1'\n        },\n        label: {\n          show: false,\n          distance: 2,\n          color: 'rgba(255,255,255,0.5)'\n        },\n        emphasis: {\n          label: {\n            show: false,\n            fontSize: 20,\n            color: '#ff0'\n          },\n          itemStyle: {\n            color: '#50e6fd'\n          }\n        },\n        light: {\n          main: {\n            shadow: true, // 光源投影\n            shadowQuality: 'ultra' // 阴影质量 'low', 'medium', 'high', 'ultra'\n          }\n        },\n        viewControl: viewControl\n      }\n    ]\n  }\n}\n\n// 地球配置\nexport const getEarthOptions = () => {\n  const base = import.meta.env.VITE_BEFORE_STATIC_PATH\n  return {\n    backgroundColor: '#000',\n    globe: {\n      globeRadius: 80,\n      baseTexture: `${base}oss/img/map/earth.jpg`,\n      shading: 'lambert',\n      environment: `${base}oss/img/map/starfield.jpg`,\n      atmosphere: {\n        show: true\n      },\n      light: {\n        ambient: {\n          intensity: 0.1\n        },\n        main: {\n          intensity: 1.8\n        }\n      },\n      viewControl: {\n        // 是否开启视角绕物体的自动旋转查看\n        autoRotate: true,\n        // 物体自转的速度。单位为角度 / 秒，默认为10 ，也就是36秒转一圈\n        autoRotateSpeed: 25,\n        // 视角绕 x 轴，即上下旋转的角度\n        alpha: 50,\n        // 视角绕 y 轴，即左右旋转的角度。\n        beta: 170,\n        // 旋转操作的灵敏度，值越大越灵敏。支持使用数组分别设置横向和纵向的旋转灵敏度。\n        rotateSensitivity: 3,\n        // 平移操作的灵敏度，值越大越灵敏。支持使用数组分别设置横向和纵向的平移灵敏度\n        panSensitivity: 1,\n        // 平移操作使用的鼠标按键\n        panMouseButton: 'right',\n        // 视角距离主体的距离\n        distance: 180,\n        // 上下旋转的最小 alpha 值。即视角能旋转到达最上面的角度\n        minAlpha: 5,\n        // 上下旋转的最大 alpha 值。即视角能旋转到达最下面的角度。\n        maxAlpha: 100,\n        // 左右旋转的最小 beta 值。即视角能旋转到达最左的角度\n        // minBeta: 10,\n        // 左右旋转的最大 beta 值。即视角能旋转到达最右的角度\n        // maxBeta: 360,\n        // 是否开启动画。\n        animation: true,\n        // 过渡动画的时长\n        animationDurationUpdate: 1000,\n        // 过渡动画的缓动效果\n        animationEasingUpdate: 'cubicInOut'\n      }\n    },\n    series: []\n  }\n}\n\n// 地球缩放\nexport const zoomEarth = (chart, startRadius: number, endRadius: number, done) => {\n  chart.setOption({\n    globe: {\n      globeRadius: startRadius\n    }\n  })\n\n  // 如果当前半径大于结束半径，则停止动画\n  if (startRadius > endRadius) {\n    if (typeof done === 'function') done()\n    return\n  }\n\n  // 使用 setTimeout 进行递归调用，实现动画效果\n  setTimeout(function () {\n    zoomEarth(chart, startRadius * 1.05, endRadius, done)\n  }, 100)\n}\n","<template>\n  <div :class=\"$style.page\">\n    <div :class=\"$style['echarts-view']\">\n      <e-echarts ref=\"earthRef\" auto-size></e-echarts>\n    </div>\n    <div :class=\"$style['echarts-view']\">\n      <e-echarts ref=\"mapRef\" auto-size></e-echarts>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport 'echarts-gl'\nimport { getCityMapOptions, getEarthOptions } from './methods'\nimport * as request from './request'\n\nconst base = import.meta.env.VITE_BEFORE_STATIC_PATH\n\nconst earthRef = ref()\nconst renderEarth = () => {\n  const earth = earthRef.value\n  let options = getEarthOptions()\n  earth.setOption(options)\n}\n\nconst mapRef = ref()\nconst renderMap = async (DATA, max) => {\n  const map = mapRef.value\n  // 名称不为 china 则不显示南海诸岛\n  const cityPy = 'china'\n  const response = await fetch(base + 'oss/map/china.json')\n  const mapJson = await response.json()\n\n  // 全局\n  // @ts-ignore\n  window.MapData = DATA\n  if (map.getOption()) {\n    // map.clear()\n    // 定时查询开启后，数据从全局变量中获取\n    return\n  }\n  let options = getCityMapOptions(cityPy, DATA)\n  map.registerMap(cityPy, mapJson)\n  map.hideLoading()\n  options.visualMap.max = max ?? 1000\n  map.setOption(options)\n}\n\nconst queryProjectMap = DATA => {\n  request.getMap().then(res => {\n    const { citys, projects, max } = res\n    DATA.cityJson = citys\n    DATA.scatters = projects\n    renderMap(DATA, max)\n  })\n}\n\nconst initQuery = async () => {\n  renderEarth()\n\n  const res = await request.getConfig()\n  queryProjectMap(res)\n}\n\nonMounted(initQuery)\n</script>\n\n<style lang=\"scss\" module>\n@import './style.scss';\n</style>\n","import { Axios, Api } from '@/config'\n\n// 配置\nexport const getConfig = () => {\n  return Axios.get(Api.echarts.get)\n}\n\n// 地图数据\nexport const getMap = () => {\n  return Axios.get(Api.echarts.map).then(list => {\n    const projects: import('./index').MapPoint[] = []\n    let max = 0\n    const citys = list.map(item => {\n      const len = item.projects.length\n      let city = item.province\n      item.projects.forEach(it => {\n        projects.push({\n          value: [it.lng, it.lat],\n          name: it.name,\n          carbon: it.carbon,\n          use: it.use,\n          count: len,\n          city: item.province,\n          id: it.id\n        })\n      })\n      const value = item.total\n      if (value > max) max = value\n      return {\n        name: city,\n        code: item.code,\n        count: len,\n        city: item.province,\n        value: 0\n      }\n    })\n    return {\n      projects,\n      citys,\n      max: Math.ceil(max / 100) * 100 || 100\n    }\n  })\n}\n"],"names":["getMaptipHtml","opts","tipHtml","city","count","title","list","map","it","label","value","unit","join","getMapGeoCif","zoom","roam","color","itemStyle","borderColor","areaColor","borderWidth","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","select","emphasis","show","earthRef","ref","mapRef","renderMap","async","DATA","max","cityPy","response","fetch","mapJson","json","window","MapData","getOption","options","data","cityJson","scatters","points","lines","tooltip","trigger","padding","enterable","transitionDuration","backgroundColor","formatter","type","seriesType","param","obj","find","v","code","val","name","id","use","carbon","path","coords","visualMap","left","bottom","seriesIndex","calculable","inRange","textStyle","fontSize","globe","geo","series","geoIndex","showEffectOn","coordinateSystem","symbol","symbolSize","zlevel","rippleEffect","period","scale","brushType","hoverAnimation","effect","trailLength","lineStyle","width","opacity","curveness","getCityMapOptions","registerMap","hideLoading","setOption","queryProjectMap","Axios","get","Api","echarts","then","projects","citys","item","len","length","province","forEach","push","lng","lat","total","Math","ceil","res","onMounted","globeRadius","baseTexture","shading","environment","atmosphere","light","ambient","intensity","main","viewControl","autoRotate","autoRotateSpeed","alpha","beta","rotateSensitivity","panSensitivity","panMouseButton","distance","minAlpha","maxAlpha","animation","animationDurationUpdate","animationEasingUpdate"],"mappings":"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"}