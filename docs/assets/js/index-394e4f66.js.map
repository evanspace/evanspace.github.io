{"version":3,"file":"index-394e4f66.js","sources":["../../../code/src/pages/webgpu/outline/data.ts","../../../code/src/pages/webgpu/outline/methods.ts","../../../code/src/pages/webgpu/outline/index.vue"],"sourcesContent":["const base = import.meta.env.VITE_BEFORE_STATIC_PATH\n\nexport const getPageOpts = () => ({\n  base,\n\n  models: [\n    {\n      key: 'tree',\n      name: '大树',\n      size: 0.1,\n      url: '/oss/model/gpu/tree.glb'\n    }\n  ],\n\n  objects: [\n    {\n      type: 'tree',\n      name: '大树'\n    }\n  ]\n})\n","import * as THREE from 'three/webgpu'\nimport { outline } from 'three/examples/jsm/tsl/display/OutlineNode'\nimport * as ThreeScene from 'three-scene'\nimport { GUI } from 'dat.gui'\n\nconst { pass, uniform, time, oscSine } = THREE.TSL\n\nconst { pointer, update, raycaster } = ThreeScene.Hooks.useRaycaster()\n\n// 边缘强度\nconst edgeStrength = uniform(3.0)\n// 边缘发光\nconst edgeGlow = uniform(0.0)\n// 边缘厚度\nconst edgeThickness = uniform(1.0)\n// 脉冲周期\nconst pulsePeriod = uniform(0)\n// 可见边缘颜色\nconst visibleEdgeColor = uniform(new THREE.Color(0xffffff))\n// 不可见边缘颜色\nconst hiddenEdgeColor = uniform(new THREE.Color(0x4e3636))\n\nexport class OutlineScene extends ThreeScene.Scene {\n  gui: InstanceType<typeof GUI>\n  group = new THREE.Group()\n\n  select: any[] = []\n  outlinePass: ReturnType<typeof outline>\n  postProcessing: InstanceType<typeof THREE.PostProcessing>\n  constructor(options: ConstructorParameters<typeof ThreeScene.Scene>[0]) {\n    super(options)\n\n    this.addObject(this.group)\n\n    const outlinePass = outline(this.scene, this.camera, {\n      // 选中对象\n      selectedObjects: this.select,\n      // 边缘发光\n      edgeGlow,\n      // 边缘厚度\n      edgeThickness\n    })\n    this.outlinePass = outlinePass\n\n    const { visibleEdge, hiddenEdge } = outlinePass\n\n    // 周期\n    const period = time.div(pulsePeriod).mul(2)\n    // 脉冲器\n    const osc = oscSine(period).mul(0.5).add(0.5) // osc [ 0.5, 1.0 ]\n    // 边缘颜色\n    const outlineColor = visibleEdge\n      .mul(visibleEdgeColor)\n      .add(hiddenEdge.mul(hiddenEdgeColor))\n      .mul(edgeStrength)\n    // 脉冲\n    const outlinePulse = pulsePeriod.greaterThan(0).select(outlineColor.mul(osc), outlineColor)\n\n    const scenePass = pass(this.scene, this.camera)\n\n    const postProcessing = new THREE.PostProcessing(this.renderer)\n    postProcessing.outputNode = outlinePulse.add(scenePass)\n    this.postProcessing = postProcessing\n\n    this.gui = new GUI()\n    this.addGui()\n\n    this.bindEvent()\n  }\n\n  createRender() {\n    return new THREE.WebGPURenderer()\n  }\n\n  createAmbientLight(color: string | number, intensity: number) {\n    return new THREE.AmbientLight(color, intensity)\n  }\n\n  createDirectionalLight(color: string | number, intensity: number) {\n    return new THREE.DirectionalLight(color, intensity)\n  }\n\n  addModel(model) {\n    this.group.children.length = 0\n    let scale = 1\n    model.traverse(el => {\n      if (el.isMesh) {\n        // 居中几何体\n        el.geometry.center()\n        // 计算当前几何体边界球形，更新已有的 boundingSphere\n        el.geometry.computeBoundingSphere()\n        scale = 0.2 * el.geometry.boundingSphere.radius\n\n        const phongMaterial = new THREE.MeshPhongMaterial({\n          color: 0xffffff,\n          specular: 0x111111,\n          shininess: 5\n        })\n        el.material = phongMaterial\n        el.receiveShadow = true\n        el.castShadow = true\n      }\n    })\n\n    model.position.y = 1\n    // 倍数除以 标量\n    model.scale.divideScalar(scale)\n\n    this.group.add(model)\n\n    // 添加随机球\n    const geometry = new THREE.SphereGeometry(3, 48, 24)\n    for (let i = 0; i < 20; i++) {\n      const material = new THREE.MeshLambertMaterial()\n      material.color.setHSL(Math.random(), 1, 0.3)\n\n      const mesh = new THREE.Mesh(geometry, material)\n      mesh.position.set(Math.random() * 4 - 2, Math.random() * 4 - 2, Math.random() * 4 - 2)\n\n      mesh.scale.multiplyScalar(Math.random() * 0.3 + 0.1)\n      this.group.add(mesh)\n    }\n\n    // 地面\n    const floor = new THREE.Mesh(\n      new THREE.PlaneGeometry(12, 12),\n      new THREE.MeshLambertMaterial({\n        color: 0x315f86,\n        side: THREE.DoubleSide\n      })\n    )\n    floor.rotation.x -= Math.PI * 0.5\n    floor.position.y -= 1.5\n    floor.receiveShadow = true\n    this.group.add(floor)\n  }\n\n  onPointerMove(e: PointerEvent) {\n    if (!e.isPrimary) return\n\n    update(e, this.container)\n\n    raycaster.setFromCamera(pointer, this.camera)\n    const intersects = raycaster.intersectObject(this.group, true)\n    if (intersects.length > 0) {\n      const object = intersects[0].object\n      this.select = []\n      this.select.push(object)\n\n      this.outlinePass.selectedObjects = this.select\n    }\n  }\n\n  addGui() {\n    const gui = this.gui\n\n    gui.add(edgeStrength, 'value', 0.01, 10).name('边缘强度')\n    gui.add(edgeGlow, 'value', 0, 1).step(0.01).name('边缘发光')\n    gui.add(edgeThickness, 'value', 0, 6).step(0.01).name('边缘厚度')\n    gui.add(pulsePeriod, 'value', 0, 6).step(0.01).name('脉冲周期')\n    gui\n      .addColor({ color: visibleEdgeColor.value.getHex() }, 'color')\n      .name('可见区域颜色')\n      .onChange(v => {\n        visibleEdgeColor.value.set(v)\n      })\n    gui\n      .addColor({ color: hiddenEdgeColor.value.getHex() }, 'color')\n      .name('不可见区域颜色')\n      .onChange(v => {\n        hiddenEdgeColor.value.set(v)\n      })\n\n    gui.domElement.className += ' gui-wrap'\n    this.container.parentNode?.appendChild(gui.domElement)\n  }\n\n  setEnv(texture: InstanceType<typeof THREE.DataTexture>) {\n    this.scene.environment = texture\n    this.scene.background = texture\n  }\n\n  animate() {\n    this.postProcessing.renderAsync()\n  }\n}\n","<template>\n  <div class=\"three-page\">\n    <div class=\"h-100\" ref=\"containerRef\"></div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { getPageOpts } from './data'\nimport { OutlineScene } from './methods'\nimport { useResize } from '@/hooks/scene-resize'\n\nimport { Hooks, Utils } from 'three-scene'\n\nconst pageOpts = reactive(getPageOpts())\nconst { progress, loadModels, getModel, initModels } = Hooks.useModelLoader({\n  baseUrl: pageOpts.base\n})\n\nconst containerRef = ref()\nconst options: ConstructorParameters<typeof OutlineScene>[0] = {\n  baseUrl: pageOpts.base,\n  env: '/oss/textures/hdr/moonless_golf_1k.hdr',\n  camera: {\n    position: [0, 0, 15]\n  }\n}\nlet scene: InstanceType<typeof OutlineScene>\n\nconst initPage = () => {\n  loadModels(pageOpts.models, () => {\n    // 加载进度 100\n    progress.percentage = 100\n    progress.show = false\n\n    // 初始化模型\n    initModels(pageOpts.objects, item => {\n      const { type } = item\n      const obj = getModel(type)\n      if (!obj) return Promise.resolve()\n\n      // 深克隆\n      let model = Utils.modelDeepClone(obj)\n      const { position: POS, scale: SCA, rotation: ROT } = Utils.get_P_S_R_param(model, item)\n      const [x, y, z] = POS\n\n      // 缩放\n      model.scale.set(...SCA)\n\n      // 摆放位置\n      model.position.set(x, y, z)\n      // 转换方位\n      model.rotation.set(...ROT)\n\n      scene.addModel(model)\n      return Promise.resolve()\n    })\n  })\n}\n\nonMounted(() => {\n  options.container = containerRef.value\n  scene = new OutlineScene(options).run()\n\n  useResize(scene).resize()\n\n  initPage()\n})\n</script>\n\n<style lang=\"scss\"></style>\n"],"names":["pass","uniform","time","oscSine","THREE.TSL","pointer","update","raycaster","ThreeScene.Hooks","useRaycaster","edgeStrength","edgeGlow","edgeThickness","pulsePeriod","visibleEdgeColor","THREE.Color","hiddenEdgeColor","OutlineScene","ThreeScene.Scene","constructor","options","super","__publicField","this","THREE.Group","addObject","group","outlinePass","outline","scene","camera","selectedObjects","select","visibleEdge","hiddenEdge","period","div","mul","osc","add","outlineColor","outlinePulse","greaterThan","scenePass","postProcessing","THREE.PostProcessing","renderer","outputNode","gui","GUI","addGui","bindEvent","createRender","THREE.WebGPURenderer","createAmbientLight","color","intensity","THREE.AmbientLight","createDirectionalLight","THREE.DirectionalLight","addModel","model","children","length","scale","traverse","el","isMesh","geometry","center","computeBoundingSphere","boundingSphere","radius","phongMaterial","THREE.MeshPhongMaterial","specular","shininess","material","receiveShadow","castShadow","position","y","divideScalar","THREE.SphereGeometry","i","THREE.MeshLambertMaterial","setHSL","Math","random","mesh","THREE.Mesh","set","multiplyScalar","floor","THREE.PlaneGeometry","side","THREE.DoubleSide","rotation","x","PI","onPointerMove","e","isPrimary","container","setFromCamera","intersects","intersectObject","object","push","name","step","addColor","value","getHex","onChange","v","domElement","className","_a","parentNode","appendChild","setEnv","texture","environment","background","animate","renderAsync","pageOpts","reactive","base","models","key","size","url","objects","type","progress","loadModels","getModel","initModels","Hooks","useModelLoader","baseUrl","containerRef","ref","env","onMounted","run","useResize","resize","percentage","show","item","obj","Promise","resolve","Utils","modelDeepClone","POS","SCA","ROT","get_P_S_R_param","z"],"mappings":"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"}