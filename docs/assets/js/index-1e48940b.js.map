{"version":3,"file":"index-1e48940b.js","sources":["../../../code/src/pages/vue/directives/test.vue","../../../code/src/pages/vue/directives/index.vue"],"sourcesContent":["<template>\n  <div>\n    vue3.x\n    <input type=\"text\" v-myModel:value=\"value\" />\n    {{ value }}\n    <input type=\"checkbox\" v-myModel:checked=\"checked\" />\n    {{ checked }}\n  </div>\n</template>\n\n<script lang=\"ts\">\nexport default {\n  directives: {\n    myModel: {\n      mounted(el, binding: any, vnode: VNode) {\n        if (typeof binding.value == 'undefined') {\n          return console.error('v-myModel未赋值')\n        }\n        // 获得组件的实例对象\n        let vm = binding.instance\n        // 这里是获取input上type属性值\n        const type = vnode.props?.type\n        let event = ''\n        let targetValue = ''\n        switch (type) {\n          case 'text':\n            event = 'input'\n            targetValue = 'value'\n            break\n          case 'textarea':\n            event = 'input'\n            targetValue = 'value'\n            break\n          case 'checkbox':\n            event = 'change'\n            targetValue = 'checked'\n            break\n          case 'radio':\n            event = 'change'\n            targetValue = 'checked'\n            break\n          case 'select':\n            event = 'change'\n            targetValue = 'value'\n            break\n        }\n        el.value = binding.value\n        // 给元素添加监听的事件\n        el.addEventListener(event, e => {\n          // binding.arg 为v-myModel:value的value、v-myModel:checked的checked,为了修改组件实例下面的value和checked。\n          vm[binding.arg || ''] = e.target[targetValue]\n        })\n      }\n    }\n  },\n  setup() {\n    const value = ref('11')\n    const checked = ref(false)\n    return {\n      value,\n      checked\n    }\n  }\n}\n</script>\n","<template>\n  <div :class=\"$style.page\">\n    <div :class=\"$style.item\">\n      <div :class=\"$style.title\">v-model</div>\n      <div :class=\"$style.content\">\n        <span>自定义 v-mymodel：</span>\n        <input type=\"text\" v-mymodel:modelVal=\"modelVal\" />\n        <p>结果：{{ modelVal }}</p>\n        <span>内置 v-model：</span>\n        <input type=\"text\" v-model=\"modelVal\" placeholder=\"v-model\" />\n\n        <t-test></t-test>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport tTest from './test.vue'\nconst modelVal = ref('---')\n\n// v-model\nconst vMymodel = {\n  mounted(el, binding, vnode: VNode) {\n    console.log(binding, vnode)\n    if (typeof binding.value == 'undefined') {\n      return console.error('v-mymodel未赋值')\n    }\n    // 获得组件的实例对象\n    let vm = binding.instance\n    el.value = binding.value\n    // 给元素添加监听的事件\n    el.addEventListener('input', e => {\n      // `composing=true` 时不把 DOM 的值赋值给数据\n      if ((e.target as any).composing) return\n\n      // binding.arg 为v-myModel:value的value、v-myModel:checked的checked,为了修改组件实例下面的value和checked。\n      vm[binding.arg] = e.target.value\n    })\n\n    // 拼音输入法开始输入汉字时，这个事件会被触发 输入开始。\n    el.addEventListener('compositionstart', e => {\n      // 标记\n      ;(e.target as any).composing = true\n    })\n\n    // 当用户从输入法中确定选中了一些数据完成输入后（如中文输入法常见的按空格确认输入的文字）\n    el.addEventListener('compositionend', e => {\n      const target = e.target as any\n      if (target.composing) {\n        target.composing = false\n        target.dispatchEvent(new Event('input'))\n      }\n    })\n  },\n  beforeUnmount(el) {\n    el.removeEventListener('input', () => {})\n    el.removeEventListener('compositionstart', () => {})\n    el.removeEventListener('compositionend', () => {})\n  },\n  updated(el, binding) {\n    el.value = binding.value\n  }\n}\n\ndefineExpose({\n  modelVal\n})\n</script>\n\n<style lang=\"scss\" module>\n@import './style.scss';\n</style>\n"],"names":["directives","myModel","mounted","el","binding","vnode","value","console","error","vm","instance","type","_a","props","event","targetValue","addEventListener","e","arg","target","setup","ref","checked","_openBlock","_createElementBlock","_cache","_createTextVNode","_withDirectives","_createElementVNode","_hoisted_1","_directive_myModel","$setup","_toDisplayString","_hoisted_2","modelVal","vMymodel","log","composing","dispatchEvent","Event","beforeUnmount","removeEventListener","updated","__expose"],"mappings":"0KAWA,oDAAA,CAAeA,WAAA,CACDC,QAAA,CACD,OAAAC,CAAAC,EAAAC,EAAAC,SAEL,QAAA,IAAAD,EAAAE,MACE,OAAAC,QAAAC,MAAA,gBAGF,IAAAC,EAAAL,EAAAM,SAEA,MAAAC,EAAA,OAAAC,EAAAP,EAAAQ,YAAA,EAAAD,EAAAD,KACA,IAAAG,EAAA,GACAC,EAAA,GACA,OAAAJ,GAAc,IAAA,OAIV,IAAA,WAEAG,EAAA,QACAC,EAAA,QACA,MAAA,IAAA,WAIA,IAAA,QAEAD,EAAA,SACAC,EAAA,UACA,MAAA,IAAA,SAEAD,EAAA,SACAC,EAAA,QAGJZ,EAAAG,MAAAF,EAAAE,MAEAH,EAAAa,iBAAAF,GAAAG,IAEER,EAAAL,EAAAc,KAAA,IAAAD,EAAAE,OAAAJ,EAAA,GACD,IAGPK,MAAA,KAIE,CAAOd,MAFPe,EAAA,MAGEC,QAFFD,GAAA,4DAtDA,OAAAE,IAAAC,EAAA,MAAA,KAAA,CAAAC,EAAA,KAAAA,EAAA,GAAAC,EAAA,aAAkCC,EAAAC,EAAA,QAAAC,EAAA,KAAA,KAAA,CAHtC,CAAAC,EAAAC,EAAAzB,MAAA,WAK8CoB,EAAA,IAAAM,EAAAD,EAAAzB,OAAA,IAAA,GAAFqB,EAAAC,EAAA,QAAAK,EAAA,KAAA,KAAA,CAL5C,CAAAH,EAAAC,EAAAT,QAAA,mGCmBA,MAAAY,EAAAb,EAAA,OAGAc,EAAA,CAAiB,OAAAjC,CAAAC,EAAAC,EAAAC,GAGb,GADAE,QAAA6B,IAAAhC,EAAAC,QACA,IAAAD,EAAAE,MACE,OAAAC,QAAAC,MAAA,gBAGF,IAAAC,EAAAL,EAAAM,SACAP,EAAAG,MAAAF,EAAAE,MAEAH,EAAAa,iBAAA,SAAAC,IAEEA,EAAAE,OAAAkB,YAGA5B,EAAAL,EAAAc,KAAAD,EAAAE,OAAAb,MAAA,IAIFH,EAAAa,iBAAA,oBAAAC,IAEGA,EAAAE,OAAAkB,WAAA,CAAA,IAIHlC,EAAAa,iBAAA,kBAAAC,IACE,MAAAE,EAAAF,EAAAE,OACAA,EAAAkB,YACElB,EAAAkB,WAAA,EACAlB,EAAAmB,cAAA,IAAAC,MAAA,UAAuC,GAE1C,EACH,aAAAC,CAAArC,GAEEA,EAAAsC,oBAAA,SAAA,SACAtC,EAAAsC,oBAAA,oBAAA,SACAtC,EAAAsC,oBAAA,kBAAA,QAAiD,EACnD,OAAAC,CAAAvC,EAAAC,GAEED,EAAAG,MAAAF,EAAAE,KAAmB,UAIvBqC,EAAA,CAAaT"}