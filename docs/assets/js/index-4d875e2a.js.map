{"version":3,"file":"index-4d875e2a.js","sources":["../../../code/src/pages/webgpu/effect/rain/methods.ts","../../../code/src/pages/webgpu/effect/rain/index.vue"],"sourcesContent":["import * as THREE from 'three/webgpu'\n\nimport * as BufferGeometryUtils from 'three/examples/jsm/utils/BufferGeometryUtils'\n\nimport * as ThreeScene from 'three-scene'\n\nimport { GUI } from 'dat.gui'\n\nconst TSL = THREE.TSL\n\nconst randUint = () => TSL.uint(Math.random() * 0xffffff)\n\nexport class RainThreeScene extends ThreeScene.Scene {\n  maxCount = 50000\n  count = 5000\n\n  collisionCamera: InstanceType<typeof THREE.OrthographicCamera>\n  // 渲染对象\n  renderTarget: InstanceType<typeof THREE.RenderTarget> | any\n  material: InstanceType<typeof THREE.MeshBasicNodeMaterial>\n\n  positionBuffer\n  velocityBuffer\n  ripplePositionBuffer\n  rippleTimeBuffer\n\n  computeParticles: any\n  rainParticles: any\n  rippleParticles: any\n  collisionBox?: InstanceType<typeof THREE.Mesh>\n\n  gui: InstanceType<typeof GUI>\n\n  constructor(options: ConstructorParameters<typeof ThreeScene.Scene>[0]) {\n    super(options)\n\n    // 碰撞相机、渲染目标\n    this.collisionCamera = this.createCollisionCamera()\n    this.renderTarget = this.createRenderTarget()\n\n    const material = new THREE.MeshBasicNodeMaterial()\n    material.colorNode = TSL.positionWorld\n    this.material = material\n\n    // 缓冲器\n    this.positionBuffer = this.createBuffer()\n    this.velocityBuffer = this.createBuffer()\n    this.ripplePositionBuffer = this.createBuffer()\n    this.rippleTimeBuffer = this.createBuffer()\n\n    const computeInit = this.initCompute()\n    const computeUpdate = this.computeUpdate()\n    this.computeParticles = computeUpdate().compute(this.maxCount)\n    this.addModel()\n    // @ts-ignore\n    this.renderer.computeAsync(computeInit)\n\n    this.gui = new GUI()\n    this.addGui()\n  }\n\n  render() {\n    this.renderer.renderAsync(this.scene, this.camera)\n  }\n\n  createRender() {\n    return new THREE.WebGPURenderer(this.options.render)\n  }\n\n  // 碰撞相机\n  createCollisionCamera() {\n    const camera = new THREE.OrthographicCamera(-50, 50, 50, -50, 0.1, 50)\n    camera.position.y = 50\n    camera.lookAt(0, 0, 0)\n    camera.layers.disableAll()\n    camera.layers.enable(1)\n    return camera\n  }\n\n  // 渲染目标\n  createRenderTarget() {\n    const renderTarget = new THREE.RenderTarget(1024, 1024)\n    const texture = renderTarget.texture\n    texture.type = THREE.HalfFloatType // 浮点数据类型\n    // 采样方式\n    texture.magFilter = THREE.NearestFilter // 最近点采样\n    texture.minFilter = THREE.NearestFilter\n    // 启用生成mipmaps\n    texture.generateMipmaps = false\n    return renderTarget\n  }\n\n  createBuffer(type = 'vec3') {\n    const count = this.maxCount\n    // 单个缓冲区存储多个属性\n    return TSL.storage(new THREE.StorageInstancedBufferAttribute(count, 3), type, count)\n  }\n\n  // 初始化计算\n  initCompute() {\n    // @ts-ignore\n    return TSL.Fn(() => {\n      const position = this.positionBuffer.element(TSL.instanceIndex)\n      const velocity = this.velocityBuffer.element(TSL.instanceIndex)\n      const rippleTime = this.rippleTimeBuffer.element(TSL.instanceIndex)\n\n      const randX = TSL.hash(TSL.instanceIndex)\n      const randY = TSL.hash(TSL.instanceIndex.add(randUint()))\n      const randZ = TSL.hash(TSL.instanceIndex.add(randUint()))\n\n      position.x = randX.mul(100).add(-50)\n      position.y = randY.mul(25)\n      position.z = randZ.mul(100).add(-50)\n\n      velocity.y = randX.mul(-0.04).add(-0.2)\n\n      rippleTime.x = 1000\n      // @ts-ignore\n    })().compute(this.maxCount)\n  }\n\n  // 计算更新\n  computeUpdate() {\n    // @ts-ignore\n    return TSL.Fn(() => {\n      const getCoord = pos => pos.add(50).div(100)\n\n      const position = this.positionBuffer.element(TSL.instanceIndex)\n      const velocity = this.velocityBuffer.element(TSL.instanceIndex)\n      const ripplePosition = this.ripplePositionBuffer.element(TSL.instanceIndex)\n      const rippleTime = this.rippleTimeBuffer.element(TSL.instanceIndex)\n      position.addAssign(velocity)\n\n      rippleTime.x = rippleTime.x.add(TSL.deltaTime.mul(4))\n\n      // 碰撞区域\n      const collisionArea = TSL.texture(this.renderTarget.texture, getCoord(position.xz))\n\n      const surfaceOffset = 0.05\n\n      const floorPosition = collisionArea.y.add(surfaceOffset)\n      // 地面\n      const ripplePivotOffsetY = -0.9\n\n      TSL.If(position.y.add(ripplePivotOffsetY).lessThan(floorPosition), () => {\n        position.y = 25\n\n        ripplePosition.xz = position.xz\n        ripplePosition.y = floorPosition\n\n        rippleTime.x = 1\n\n        // 下一滴不会落在同一个地方\n        position.x = TSL.hash(TSL.instanceIndex.add(TSL.time)).mul(100).add(-50)\n        position.z = TSL.hash(TSL.instanceIndex.add(TSL.time.add(randUint())))\n          .mul(100)\n          .add(-50)\n      })\n\n      const rippleOnSurface = TSL.texture(this.renderTarget.texture, getCoord(ripplePosition.xz))\n      const rippleFloorArea = rippleOnSurface.y.add(surfaceOffset)\n\n      TSL.If(ripplePosition.y.greaterThan(rippleFloorArea), () => {\n        rippleTime.x = 1000\n      })\n    })\n  }\n\n  addModel() {\n    this.createRainDrop()\n    this.createRainRipple()\n    this.createCollisionGround()\n    this.createCollisionModel()\n  }\n\n  // 雨滴（下落）\n  createRainDrop() {\n    const rainMaterial = new THREE.MeshBasicNodeMaterial()\n    rainMaterial.colorNode = TSL.uv().distance(TSL.vec2(0.5, 0)).oneMinus().mul(3).exp().mul(0.1)\n    rainMaterial.vertexNode = TSL.billboarding({ position: this.positionBuffer.toAttribute() })\n    rainMaterial.opacity = 0.2\n    rainMaterial.side = THREE.DoubleSide\n    rainMaterial.forceSinglePass = true\n    rainMaterial.depthWrite = false\n    rainMaterial.depthTest = true\n    rainMaterial.transparent = true\n\n    const rainParticles = new THREE.Mesh(new THREE.PlaneGeometry(0.1, 2), rainMaterial)\n    // @ts-ignore\n    rainParticles.count = this.count\n    this.rainParticles = rainParticles\n    this.addObject(rainParticles)\n  }\n\n  // 雨滴（地面涟漪效果）\n  createRainRipple() {\n    const rippleTime = this.rippleTimeBuffer.element(TSL.instanceIndex).x\n    // 水滴涟漪效果\n    const rippleEffect = TSL.Fn(() => {\n      const center = TSL.uv().add(TSL.vec2(-0.5)).length().mul(7)\n      const distance = rippleTime.sub(center)\n      return distance.min(1).sub(distance.max(1).sub(1))\n    })\n\n    // 涟漪材质\n    const rippleMaterial = new THREE.MeshBasicNodeMaterial()\n    rippleMaterial.colorNode = rippleEffect()\n    rippleMaterial.positionNode = TSL.positionGeometry.add(this.ripplePositionBuffer.toAttribute())\n    rippleMaterial.opacityNode = rippleTime.mul(0.3).oneMinus().max(0).mul(0.5)\n    rippleMaterial.side = THREE.DoubleSide\n    rippleMaterial.forceSinglePass = true\n    rippleMaterial.depthWrite = false\n    rippleMaterial.depthTest = true\n    rippleMaterial.transparent = true\n\n    // 水滴形状\n    // 水面网格\n    const surface = new THREE.PlaneGeometry(2.5, 2.5)\n    surface.rotateX(-Math.PI / 2)\n\n    // x 面 网格\n    const xRippleGeometry = new THREE.PlaneGeometry(1, 2)\n    xRippleGeometry.rotateY(-Math.PI / 2)\n\n    // z 面网格\n    const zRippleGeometry = new THREE.PlaneGeometry(1, 2)\n\n    // 合成水滴形状\n    const rippleGeometry = BufferGeometryUtils.mergeGeometries([\n      surface,\n      xRippleGeometry,\n      zRippleGeometry\n    ])\n\n    const rippleParticles = new THREE.Mesh(rippleGeometry, rippleMaterial)\n    // @ts-ignore\n    rippleParticles.count = this.count\n    this.rippleParticles = rippleParticles\n    this.addObject(rippleParticles)\n  }\n\n  // 碰撞地面\n  createCollisionGround() {\n    const floorGeometry = new THREE.PlaneGeometry(1000, 1000)\n    floorGeometry.rotateX(-Math.PI / 2)\n\n    const plane = new THREE.Mesh(floorGeometry, new THREE.MeshBasicMaterial({ color: 0x050505 }))\n    this.addObject(plane)\n  }\n\n  // 碰撞模型\n  createCollisionModel() {\n    const collisionBox = new THREE.Mesh(\n      new THREE.BoxGeometry(30, 1, 15),\n      new THREE.MeshStandardMaterial({\n        color: 0x333333\n      })\n    )\n    collisionBox.position.y = 12\n    collisionBox.scale.x = 3.5\n\n    // 增减图层对象与参数指定的图层对应关系\n    collisionBox.layers.enable(1)\n    collisionBox.castShadow = true\n    this.collisionBox = collisionBox\n    this.addObject(collisionBox)\n\n    const torusKnot = new THREE.Mesh(\n      new THREE.TorusKnotGeometry(5, 1, 128, 100),\n      new THREE.MeshStandardMaterial({\n        color: 0x333333\n      })\n    )\n    torusKnot.position.set(0, 12, 15)\n    // 增减图层对象与参数指定的图层对应关系\n    torusKnot.layers.enable(1)\n\n    this.addObject(torusKnot)\n  }\n\n  addGui() {\n    const gui = this.gui\n\n    gui.add(this.collisionBox?.position, 'z', -50, 50)\n    gui.add(this.collisionBox?.scale, 'x', 0.1, 4)\n\n    gui\n      .add(this.rainParticles, 'count', 200, this.maxCount)\n      .name('数量')\n      .onChange(e => {\n        this.rippleParticles.count = e\n      })\n    gui.domElement.className += ' gui-wrap'\n    this.container.parentNode?.appendChild(gui.domElement)\n  }\n\n  animate(): void {\n    const renderer = this.renderer as any\n    if (!renderer) return\n\n    this.scene.overrideMaterial = this.material\n    renderer.setRenderTarget(this.renderTarget)\n    renderer.renderAsync(this.scene, this.collisionCamera)\n\n    // 计算\n    renderer.computeAsync(this.computeParticles)\n\n    // 结果\n    this.scene.overrideMaterial = null\n    renderer.setRenderTarget(null)\n    this.render()\n  }\n}\n","<template>\n  <div class=\"three-page\">\n    <div class=\"h-100\" ref=\"containerRef\"></div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { RainThreeScene } from './methods'\n\nimport { useResize } from '@/hooks/scene-resize'\n\nconst containerRef = ref()\nconst options: ConstructorParameters<typeof RainThreeScene>[0] = {\n  grid: {\n    // visible: true\n  },\n  render: {\n    antialias: true,\n    logarithmicDepthBuffer: false\n  },\n  axes: {\n    visible: true\n  },\n  ambientLight: {\n    color: 0x111111\n  },\n  directionalLight: {\n    position: [3, 17, 17]\n  },\n  camera: {\n    position: [40, 8, 0]\n  },\n  controls: {\n    maxDistance: 50\n  }\n}\nlet scene: InstanceType<typeof RainThreeScene>\n\nonMounted(() => {\n  options.container = containerRef.value\n  scene = new RainThreeScene(options)\n  scene.run()\n\n  useResize(scene).resize()\n})\n</script>\n\n<style lang=\"scss\" module></style>\n"],"names":["TSL","THREE.TSL","randUint","uint","Math","random","RainThreeScene","ThreeScene.Scene","constructor","options","super","__publicField","this","collisionCamera","createCollisionCamera","renderTarget","createRenderTarget","material","THREE.MeshBasicNodeMaterial","colorNode","positionWorld","positionBuffer","createBuffer","velocityBuffer","ripplePositionBuffer","rippleTimeBuffer","computeInit","initCompute","computeUpdate","computeParticles","compute","maxCount","addModel","renderer","computeAsync","gui","GUI","addGui","render","renderAsync","scene","camera","createRender","THREE.WebGPURenderer","THREE.OrthographicCamera","position","y","lookAt","layers","disableAll","enable","THREE.RenderTarget","texture","type","THREE.HalfFloatType","magFilter","THREE.NearestFilter","minFilter","generateMipmaps","count","storage","THREE.StorageInstancedBufferAttribute","Fn","element","instanceIndex","velocity","rippleTime","randX","hash","randY","add","randZ","x","mul","z","getCoord","pos","div","ripplePosition","addAssign","deltaTime","floorPosition","xz","If","lessThan","time","rippleFloorArea","greaterThan","createRainDrop","createRainRipple","createCollisionGround","createCollisionModel","rainMaterial","uv","distance","vec2","oneMinus","exp","vertexNode","billboarding","toAttribute","opacity","side","THREE.DoubleSide","forceSinglePass","depthWrite","depthTest","transparent","rainParticles","THREE.Mesh","THREE.PlaneGeometry","addObject","rippleEffect","center","length","sub","min","max","rippleMaterial","positionNode","positionGeometry","opacityNode","surface","rotateX","PI","xRippleGeometry","rotateY","zRippleGeometry","rippleGeometry","BufferGeometryUtils.mergeGeometries","rippleParticles","floorGeometry","plane","THREE.MeshBasicMaterial","color","collisionBox","THREE.BoxGeometry","THREE.MeshStandardMaterial","scale","castShadow","torusKnot","THREE.TorusKnotGeometry","set","_a","_b","name","onChange","e","domElement","className","_c","container","parentNode","appendChild","animate","overrideMaterial","setRenderTarget","containerRef","ref","grid","antialias","logarithmicDepthBuffer","axes","visible","ambientLight","directionalLight","controls","maxDistance","onMounted","value","run","useResize","resize"],"mappings":"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"}