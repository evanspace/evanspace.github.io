{"version":3,"file":"index-6b7ff7b1.js","sources":["../../../code/src/pages/webgpu/effect/particle/particle-engine.ts","../../../code/src/pages/webgpu/effect/particle/examples.ts","../../../code/src/pages/webgpu/effect/particle/methods.ts","../../../code/src/pages/webgpu/effect/particle/index.vue"],"sourcesContent":["import * as THREE from 'three'\n\n// ParticleEngine\n// 类型\nexport const TYPE = Object.freeze({ CUBE: 1, SPHERE: 2 })\n\nconst particleVertexShader = [\n  // 'uniform vec3  uColor;',\n  // 'uniform float uOpacity;',\n  // 'uniform float uSize;',\n  // 'uniform float uAngle;',\n  // 'uniform float uVisible;', // float used as boolean (0 = false, 1 = true)\n\n  'in vec3  uColor;',\n  'in float uOpacity;',\n  'in float uSize;',\n  'in float uAngle;',\n  'in float uVisible;',\n\n  'varying vec4  vColor;',\n  'varying float vAngle;',\n  'void main() {',\n  '  if ( uVisible > 0.5 )', // true\n  '    vColor = vec4( uColor, uOpacity );', //     set color associated to vertex; use later in fragment shader.\n  '  else', // false\n  '    vColor = vec4(0.0, 0.0, 0.0, 0.0);', //     make particle invisible.\n\n  '  vAngle = uAngle;',\n\n  '  vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );',\n  '  gl_PointSize = uSize * ( 300.0 / length( mvPosition.xyz ) );', // scale particles as objects in 3D space\n  // '  gl_PointSize = 2.5;', // scale particles as objects in 3D space\n  '  gl_Position = projectionMatrix * mvPosition;',\n  '}'\n].join('\\n')\n\nconst particleFragmentShader = [\n  'uniform sampler2D uTx;',\n  'varying vec4 vColor;',\n  'varying float vAngle;',\n  'void main() {',\n  '  gl_FragColor = vColor;',\n\n  '  float c = cos(vAngle);',\n  '  float s = sin(vAngle);',\n  '  vec2 rotatedUV = vec2(c * (gl_PointCoord.x - 0.5) + s * (gl_PointCoord.y - 0.5) + 0.5,',\n  '  c * (gl_PointCoord.y - 0.5) - s * (gl_PointCoord.x - 0.5) + 0.5);', // rotate UV coordinates to rotate texture\n  '  vec4 rotatedTexture = texture2D( uTx,  rotatedUV );',\n  '  gl_FragColor = gl_FragColor * rotatedTexture;', // sets an otherwise white particle texture to desired color\n  '}'\n].join('\\n')\n\n// 动画\nexport class Tween {\n  times: any[]\n  values: any[]\n  constructor(timeArray?, valueArray?) {\n    this.times = timeArray || []\n    this.values = valueArray || []\n  }\n  lerp(t) {\n    var i = 0\n    var n = this.times.length\n    while (i < n && t > this.times[i]) i++\n    if (i == 0) return this.values[0]\n    if (i == n) return this.values[n - 1]\n    var p = (t - this.times[i - 1]) / (this.times[i] - this.times[i - 1])\n    if (this.values[0] instanceof THREE.Vector3)\n      return this.values[i - 1].clone().lerp(this.values[i], p)\n    // its a float\n    else return this.values[i - 1] + p * (this.values[i] - this.values[i - 1])\n  }\n}\n\n// 粒子材质\nexport class ParticleBasicMaterial extends THREE.Material {\n  color = new THREE.Color(0xffffff)\n\n  map = null\n\n  size = 1\n  sizeAttenuation = true\n\n  vertexColors = false\n\n  fog = true\n  constructor(parameters) {\n    super()\n    this.setValues(parameters)\n  }\n}\n\n// 粒子系统\nexport class ParticleSystem extends THREE.Object3D {\n  geometry: any\n  material: any\n  sortParticles = false\n  frustumCulled = false\n  constructor(geometry?, material?) {\n    super()\n\n    this.geometry = geometry !== void 0 ? geometry : new THREE.BufferGeometry()\n    this.material =\n      material !== void 0\n        ? material\n        : new ParticleBasicMaterial({ color: Math.random() * 0xffffff })\n  }\n\n  clone(object) {\n    if (object === void 0) {\n      object = new ParticleSystem(this.geometry, this.material)\n    }\n    object.sortParticles = this.sortParticles\n    super.clone(object)\n    return object\n  }\n}\n\n// 粒子\nexport class Particle {\n  position = new THREE.Vector3()\n  velocity = new THREE.Vector3() // units per second\n  acceleration = new THREE.Vector3()\n\n  angle = 0\n  angleVelocity = 0 // degrees per second\n  angleAcceleration = 0 // degrees per second, per second\n\n  size = 16.0\n\n  color = new THREE.Color()\n  opacity = 1.0\n\n  age = 0\n  alive = 0 // use float instead of boolean for shader purposes\n\n  sizeTween = new Tween()\n  colorTween = new Tween()\n  opacityTween = new Tween()\n\n  constructor() {}\n\n  update(dt) {\n    this.position.add(this.velocity.clone().multiplyScalar(dt))\n    this.velocity.add(this.acceleration.clone().multiplyScalar(dt))\n\n    // 度数转换弧度\n    this.angle += this.angleVelocity * 0.01745329251 * dt\n    this.angleVelocity += this.angleAcceleration * 0.01745329251 * dt\n\n    this.age += dt\n\n    // 值不为空则更新属性值\n    if (this.sizeTween.times.length > 0) this.size = this.sizeTween.lerp(this.age)\n\n    if (this.colorTween.times.length > 0) {\n      var colorHSL = this.colorTween.lerp(this.age)\n      this.color = new THREE.Color().setHSL(colorHSL.x, colorHSL.y, colorHSL.z)\n    }\n\n    if (this.opacityTween.times.length > 0) this.opacity = this.opacityTween.lerp(this.age)\n  }\n}\n\n// 粒子引擎\nexport class ParticleEngine {\n  positionStyle = TYPE.CUBE\n  positionBase = new THREE.Vector3()\n  // cube shape data\n  positionSpread = new THREE.Vector3()\n  // sphere shape data\n  positionRadius = 0 // distance from base at which particles start\n\n  velocityStyle = TYPE.CUBE\n  // cube movement data\n  velocityBase = new THREE.Vector3()\n  velocitySpread = new THREE.Vector3()\n  // sphere movement data\n  //   direction vector calculated using initial position\n  speedBase = 0\n  speedSpread = 0\n\n  accelerationBase = new THREE.Vector3()\n  accelerationSpread = new THREE.Vector3()\n\n  angleBase = 0\n  angleSpread = 0\n  angleVelocityBase = 0\n  angleVelocitySpread = 0\n  angleAccelerationBase = 0\n  angleAccelerationSpread = 0\n\n  sizeBase = 0.0\n  sizeSpread = 0.0\n  sizeTween = new Tween()\n\n  // store colors in HSL format in a THREE.Vector3 object\n  // http://en.wikipedia.org/wiki/HSL_and_HSV\n  colorBase = new THREE.Vector3(0.0, 1.0, 0.5)\n  colorSpread = new THREE.Vector3(0.0, 0.0, 0.0)\n  colorTween = new Tween()\n\n  opacityBase = 1.0\n  opacitySpread = 0.0\n  opacityTween = new Tween()\n\n  blendStyle = THREE.NormalBlending // false;\n\n  particleArray: any[] = []\n  particlesPerSecond = 100\n  particleDeathAge = 1.0\n\n  ////////////////////////\n  // EMITTER PROPERTIES //\n  ////////////////////////\n\n  emitterAge = 0.0\n  emitterAlive = true\n  emitterDeathAge = 60 // time (seconds) at which to stop creating particles.\n\n  // How many particles could be active at any time?\n  particleCount = 0\n\n  //////////////\n  // THREE.JS //\n  //////////////\n\n  particleGeometry = new THREE.BufferGeometry()\n  particleTexture = null\n  particleMaterial = new THREE.ShaderMaterial({\n    uniforms: {\n      uTx: { value: this.particleTexture },\n      uVisible: { value: [] },\n      uAngle: { value: [] },\n      uSize: { value: [] },\n      uColor: { value: [] },\n      uOpacity: { value: [] }\n    },\n    // 定点着色器\n    vertexShader: particleVertexShader,\n    // 片元着色器\n    fragmentShader: particleFragmentShader,\n    transparent: true,\n    alphaTest: 0.5, // if having transparency issues, try including: alphaTest: 0.5,\n    blending: THREE.NormalBlending,\n    depthTest: true\n  })\n  particleMesh: any = new ParticleSystem()\n\n  constructor() {\n    this.particleCount =\n      this.particlesPerSecond * Math.min(this.particleDeathAge, this.emitterDeathAge)\n  }\n\n  // helper functions for randomization\n  randomValue(base, spread) {\n    return base + spread * (Math.random() - 0.5)\n  }\n  randomVector3(base, spread) {\n    var rand3 = new THREE.Vector3(Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5)\n    return new THREE.Vector3().addVectors(base, new THREE.Vector3().multiplyVectors(spread, rand3))\n  }\n\n  createParticle() {\n    var particle = new Particle()\n\n    if (this.positionStyle == TYPE.CUBE) {\n      particle.position = this.randomVector3(this.positionBase, this.positionSpread)\n    } else if (this.positionStyle == TYPE.SPHERE) {\n      var z = 2 * Math.random() - 1\n      var t = 6.2832 * Math.random()\n      var r = Math.sqrt(1 - z * z)\n      var vec3 = new THREE.Vector3(r * Math.cos(t), r * Math.sin(t), z)\n\n      particle.position = new THREE.Vector3().addVectors(\n        this.positionBase,\n        vec3.multiplyScalar(this.positionRadius)\n      )\n    }\n\n    if (this.velocityStyle == TYPE.CUBE) {\n      particle.velocity = this.randomVector3(this.velocityBase, this.velocitySpread)\n    } else if (this.velocityStyle == TYPE.SPHERE) {\n      var direction = new THREE.Vector3().subVectors(particle.position, this.positionBase)\n      var speed = this.randomValue(this.speedBase, this.speedSpread)\n      particle.velocity = direction.normalize().multiplyScalar(speed)\n    }\n\n    particle.acceleration = this.randomVector3(this.accelerationBase, this.accelerationSpread)\n\n    particle.angle = this.randomValue(this.angleBase, this.angleSpread)\n    particle.angleVelocity = this.randomValue(this.angleVelocityBase, this.angleVelocitySpread)\n    particle.angleAcceleration = this.randomValue(\n      this.angleAccelerationBase,\n      this.angleAccelerationSpread\n    )\n\n    particle.size = this.randomValue(this.sizeBase, this.sizeSpread)\n\n    var color = this.randomVector3(this.colorBase, this.colorSpread)\n    particle.color = new THREE.Color().setHSL(color.x, color.y, color.z)\n\n    particle.opacity = this.randomValue(this.opacityBase, this.opacitySpread)\n\n    particle.age = 0\n    particle.alive = 0 // particles initialize as inactive\n\n    return particle\n  }\n\n  setValues(parameters) {\n    console.log('%cconfig', 'color: red', parameters)\n    if (parameters === void 0) return\n\n    // clear any previous tweens that might exist\n    this.sizeTween = new Tween()\n    this.colorTween = new Tween()\n    this.opacityTween = new Tween()\n\n    for (let key in parameters) this[key] = parameters[key]\n\n    // attach tweens to particles\n    Particle.prototype.sizeTween = this.sizeTween\n    Particle.prototype.colorTween = this.colorTween\n    Particle.prototype.opacityTween = this.opacityTween\n\n    // calculate/set derived particle engine values\n    this.particleArray = []\n    this.emitterAge = 0.0\n    this.emitterAlive = true\n    this.particleCount =\n      this.particlesPerSecond * Math.min(this.particleDeathAge, this.emitterDeathAge)\n\n    this.particleGeometry = new THREE.BufferGeometry()\n    this.particleMaterial = new THREE.ShaderMaterial({\n      uniforms: {\n        uTx: { value: this.particleTexture },\n        uVisible: { value: [] },\n        uAngle: { value: [] },\n        uSize: { value: [] },\n        uColor: { value: [] },\n        uOpacity: { value: [] }\n      },\n      vertexShader: particleVertexShader,\n      fragmentShader: particleFragmentShader,\n      transparent: true,\n      alphaTest: 0.5, // if having transparency issues, try including: alphaTest: 0.5,\n      blending: THREE.NormalBlending,\n      depthTest: true\n    })\n    // this.particleMaterial = new THREE.MeshBasicMaterial({\n    //   color: 0xf00f00\n    // })\n    // this.particleMesh = new ParticleSystem()\n  }\n\n  initialize() {\n    // link particle data with geometry/material data\n    const points: any[] = []\n    const uVisible: number[] = []\n    const uColor: number[] = []\n    const uOpacity: number[] = []\n    const uSize: number[] = []\n    const uAngle: number[] = []\n\n    for (var i = 0; i < this.particleCount; i++) {\n      // remove duplicate code somehow, here and in update function below.\n      const particle = this.createParticle()\n      this.particleArray[i] = particle\n\n      uVisible.push(particle.alive)\n      const c = particle.color\n      uColor.push(c.r, c.g, c.b)\n      uOpacity.push(particle.opacity)\n      uSize.push(particle.size)\n      uAngle.push(particle.angle)\n\n      // this.particleGeometry.vertices[i] = particle.position\n      points.push(particle.position)\n      const uniforms = this.particleMaterial.uniforms\n      if (uniforms) {\n        uniforms.uVisible.value[i] = particle.alive\n        uniforms.uColor.value[i] = particle.color\n        uniforms.uOpacity.value[i] = particle.opacity\n        uniforms.uSize.value[i] = particle.size\n        uniforms.uAngle.value[i] = particle.angle\n      }\n    }\n    this.particleGeometry.setFromPoints(points)\n    this.particleGeometry.setAttribute('uVisible', new THREE.Float32BufferAttribute(uVisible, 1))\n\n    this.particleGeometry.setAttribute('uColor', new THREE.Float32BufferAttribute(uColor, 3))\n    this.particleGeometry.setAttribute('uOpacity', new THREE.Float32BufferAttribute(uOpacity, 1))\n    this.particleGeometry.setAttribute('uSize', new THREE.Float32BufferAttribute(uSize, 1))\n    this.particleGeometry.setAttribute('uAngle', new THREE.Float32BufferAttribute(uAngle, 1))\n\n    // 创建一个包含顶点索引的BufferAttribute\n    // const indices = new THREE.Int16BufferAttribute(\n    //   points.map((_, index) => index),\n    //   1\n    // )\n    // 添加顶点属性\n    // this.particleGeometry.setAttribute('index', indices)\n\n    this.particleMaterial.blending = this.blendStyle\n    if (this.blendStyle != THREE.NormalBlending) this.particleMaterial.depthTest = false\n\n    // const material = new THREE.PointsMaterial({\n    //   size: 35,\n    //   sizeAttenuation: true,\n    //   map: this.particleTexture,\n    //   alphaTest: 0.5,\n    //   transparent: true,\n    //   color: 0xf00f00\n    // })\n    // material.color.setHSL(1.0, 0.3, 0.7, THREE.SRGBColorSpace)\n\n    // material.needsUpdate = true\n    // const particles = new THREE.Points(this.particleGeometry, material)\n    // this.particleMesh = particles\n\n    // this.particleMesh = new ParticleSystem(this.particleGeometry, this.particleMaterial)\n    this.particleMesh = new THREE.Mesh(this.particleGeometry, this.particleMaterial)\n\n    // this.particleMesh = new THREE.Points(\n    //   this.particleGeometry,\n    //   new THREE.PointsMaterial({\n    //     map: this.particleTexture,\n    //     size: 30,\n    //     alphaTest: 0.5,\n    //     transparent: true,\n    //     sizeAttenuation: true,\n    //     color: 0xf00f00\n    //   })\n    // )\n\n    // this.particleMesh.scale.setScalar(10)\n    this.particleMesh.dynamic = true\n    this.particleMesh.sortParticles = true\n  }\n\n  update(dt) {\n    const recycleIndices: number[] = []\n\n    if (!this.particleArray.length) return\n\n    const uVisible = this.particleGeometry.attributes.uVisible\n    const uOpacity = this.particleGeometry.attributes.uOpacity\n    const uSize = this.particleGeometry.attributes.uSize\n    const uAngle = this.particleGeometry.attributes.uAngle\n    const uColor = this.particleGeometry.attributes.uColor\n\n    // 更新粒子数据\n    for (let i = 0; i < this.particleCount; i++) {\n      const particle = this.particleArray[i]\n      if (particle.alive) {\n        particle.update(dt)\n\n        // 检查粒子是否过期\n        if (particle.age > this.particleDeathAge) {\n          particle.alive = 0.0\n          recycleIndices.push(i)\n        }\n\n        uVisible.setX(i, particle.alive)\n        uVisible.needsUpdate = true\n        uOpacity.setX(i, particle.opacity)\n        uOpacity.needsUpdate = true\n\n        uSize.setX(i, particle.size)\n        uSize.needsUpdate = true\n        uAngle.setX(i, particle.angle)\n        uAngle.needsUpdate = true\n        const c = particle.color\n        uColor.setXYZ(i, c.r, c.g, c.b)\n        uColor.needsUpdate = true\n\n        // 更新着色器属性\n        const uniforms = this.particleMaterial.uniforms\n        if (uniforms) {\n          uniforms.uVisible.value[i] = particle.alive\n          uniforms.uColor.value[i] = particle.color\n          uniforms.uOpacity.value[i] = particle.opacity\n          uniforms.uSize.value[i] = particle.size\n          uniforms.uAngle.value[i] = particle.angle\n        }\n      }\n    }\n\n    // 检测粒子引擎是否在运行\n    if (!this.emitterAlive) return\n\n    // 没有粒子死亡 则激活\n    if (this.emitterAge < this.particleDeathAge) {\n      // 粒子激活指数\n      const startIndex = Math.round(this.particlesPerSecond * (this.emitterAge + 0))\n      let endIndex = Math.round(this.particlesPerSecond * (this.emitterAge + dt))\n      if (endIndex > this.particleCount) endIndex = this.particleCount\n\n      for (let i = startIndex; i < endIndex; i++) this.particleArray[i].alive = 1.0\n    }\n\n    for (let j = 0; j < recycleIndices.length; j++) {\n      const i = recycleIndices[j]\n      const particle = this.createParticle()\n      // 激活\n      particle.alive = 1.0\n      this.particleArray[i] = particle\n\n      const position = this.particleGeometry.attributes.position\n      const { x, y, z } = particle.position\n      position.setXYZ(i, x, y, z)\n      // console.log(x, y, z)\n      position.needsUpdate = true\n\n      // this.particleGeometry.vertices[i] = particle.position\n    }\n\n    // stop emitter?\n    this.emitterAge += dt\n    if (this.emitterAge > this.emitterDeathAge) this.emitterAlive = false\n  }\n\n  destroy(scene) {\n    scene.remove(this.particleMesh)\n  }\n}\n","import * as THREE from 'three'\nimport { TYPE, Tween } from './particle-engine'\n\nconst base = import.meta.env.VITE_BEFORE_STATIC_PATH\n\nconst textureLoader = new THREE.TextureLoader()\n\nexport const Examples = {\n  fountain: {\n    positionStyle: TYPE.CUBE,\n    positionBase: new THREE.Vector3(0, 5, 0),\n    positionSpread: new THREE.Vector3(10, 0, 10),\n\n    velocityStyle: TYPE.CUBE,\n    velocityBase: new THREE.Vector3(0, 160, 0),\n    velocitySpread: new THREE.Vector3(100, 20, 100),\n\n    accelerationBase: new THREE.Vector3(0, -100, 0),\n\n    particleTexture: textureLoader.load(`${base}/oss/textures/effect/star.png`),\n\n    angleBase: 0,\n    angleSpread: 180,\n    angleVelocityBase: 0,\n    angleVelocitySpread: 360 * 4,\n\n    sizeTween: new Tween([0, 1], [1, 20]),\n    opacityTween: new Tween([2, 3], [1, 0]),\n    colorTween: new Tween([0.5, 2], [new THREE.Vector3(0, 1, 0.5), new THREE.Vector3(0.8, 1, 0.5)]),\n\n    particlesPerSecond: 200,\n    particleDeathAge: 3.0,\n    emitterDeathAge: 60\n  },\n  fireball: {\n    positionStyle: TYPE.SPHERE,\n    positionBase: new THREE.Vector3(0, 50, 0),\n    positionRadius: 2,\n\n    velocityStyle: TYPE.SPHERE,\n    speedBase: 40,\n    speedSpread: 8,\n\n    particleTexture: textureLoader.load(`${base}/oss/textures/effect/smokeparticle.png`),\n\n    sizeTween: new Tween([0, 0.1], [1, 150]),\n    opacityTween: new Tween([0.7, 1], [1, 0]),\n    colorBase: new THREE.Vector3(0.02, 1, 0.4),\n    blendStyle: THREE.AdditiveBlending,\n\n    particlesPerSecond: 60,\n    particleDeathAge: 1.5,\n    emitterDeathAge: 60\n  },\n\n  smoke: {\n    positionStyle: TYPE.CUBE,\n    positionBase: new THREE.Vector3(0, 0, 0),\n    positionSpread: new THREE.Vector3(10, 0, 10),\n\n    velocityStyle: TYPE.CUBE,\n    velocityBase: new THREE.Vector3(0, 150, 0),\n    velocitySpread: new THREE.Vector3(80, 50, 80),\n    accelerationBase: new THREE.Vector3(0, -10, 0),\n\n    particleTexture: textureLoader.load(`${base}/oss/textures/effect/smokeparticle.png`),\n\n    angleBase: 0,\n    angleSpread: 720,\n    angleVelocityBase: 0,\n    angleVelocitySpread: 720,\n\n    sizeTween: new Tween([0, 1], [32, 128]),\n    opacityTween: new Tween([0.8, 2], [0.5, 0]),\n    colorTween: new Tween([0.4, 1], [new THREE.Vector3(0, 0, 0.2), new THREE.Vector3(0, 0, 0.5)]),\n\n    particlesPerSecond: 200,\n    particleDeathAge: 2.0,\n    emitterDeathAge: 60\n  },\n\n  clouds: {\n    positionStyle: TYPE.CUBE,\n    positionBase: new THREE.Vector3(-100, 100, 0),\n    positionSpread: new THREE.Vector3(0, 50, 60),\n\n    velocityStyle: TYPE.CUBE,\n    velocityBase: new THREE.Vector3(40, 0, 0),\n    velocitySpread: new THREE.Vector3(20, 0, 0),\n\n    particleTexture: textureLoader.load(`${base}/oss/textures/effect/smokeparticle.png`),\n\n    sizeBase: 80.0,\n    sizeSpread: 100.0,\n    colorBase: new THREE.Vector3(0.0, 0.0, 1.0), // H,S,L\n    opacityTween: new Tween([0, 1, 4, 5], [0, 1, 1, 0]),\n\n    particlesPerSecond: 50,\n    particleDeathAge: 10.0,\n    emitterDeathAge: 60\n  },\n\n  snow: {\n    positionStyle: TYPE.CUBE,\n    positionBase: new THREE.Vector3(0, 200, 0),\n    positionSpread: new THREE.Vector3(500, 0, 500),\n\n    velocityStyle: TYPE.CUBE,\n    velocityBase: new THREE.Vector3(0, -60, 0),\n    velocitySpread: new THREE.Vector3(50, 20, 50),\n    accelerationBase: new THREE.Vector3(0, -10, 0),\n\n    angleBase: 0,\n    angleSpread: 720,\n    angleVelocityBase: 0,\n    angleVelocitySpread: 60,\n\n    particleTexture: textureLoader.load(`${base}/oss/textures/effect/snowflake.png`),\n\n    sizeTween: new Tween([0, 0.25], [1, 10]),\n    colorBase: new THREE.Vector3(0.66, 1.0, 0.9), // H,S,L\n    opacityTween: new Tween([2, 3], [0.8, 0]),\n\n    particlesPerSecond: 200,\n    particleDeathAge: 4.0,\n    emitterDeathAge: 60\n  },\n\n  rain: {\n    positionStyle: TYPE.CUBE,\n    positionBase: new THREE.Vector3(0, 200, 0),\n    positionSpread: new THREE.Vector3(600, 0, 600),\n\n    velocityStyle: TYPE.CUBE,\n    velocityBase: new THREE.Vector3(0, -400, 0),\n    velocitySpread: new THREE.Vector3(10, 50, 10),\n    accelerationBase: new THREE.Vector3(0, -10, 0),\n\n    particleTexture: textureLoader.load(`${base}/oss/textures/effect/raindrop2flip.png`),\n\n    sizeBase: 8.0,\n    sizeSpread: 4.0,\n    colorBase: new THREE.Vector3(0.66, 1.0, 0.7), // H,S,L\n    colorSpread: new THREE.Vector3(0.0, 0.0, 0.2),\n    opacityBase: 0.6,\n\n    particlesPerSecond: 1000,\n    particleDeathAge: 1.0,\n    emitterDeathAge: 60\n  },\n\n  starfield: {\n    positionStyle: TYPE.CUBE,\n    positionBase: new THREE.Vector3(0, 200, 0),\n    positionSpread: new THREE.Vector3(600, 400, 600),\n\n    velocityStyle: TYPE.CUBE,\n    velocityBase: new THREE.Vector3(0, 0, 0),\n    velocitySpread: new THREE.Vector3(0.5, 0.5, 0.5),\n\n    angleBase: 0,\n    angleSpread: 720,\n    angleVelocityBase: 0,\n    angleVelocitySpread: 4,\n\n    particleTexture: textureLoader.load(`${base}/oss/textures/effect/spikey.png`),\n\n    sizeBase: 10.0,\n    sizeSpread: 2.0,\n    colorBase: new THREE.Vector3(0.15, 1.0, 0.9), // H,S,L\n    colorSpread: new THREE.Vector3(0.0, 0.0, 0.2),\n    opacityBase: 1,\n\n    particlesPerSecond: 20000,\n    particleDeathAge: 60.0,\n    emitterDeathAge: 0.1\n  },\n\n  fireflies: {\n    positionStyle: TYPE.CUBE,\n    positionBase: new THREE.Vector3(0, 100, 0),\n    positionSpread: new THREE.Vector3(400, 200, 400),\n\n    velocityStyle: TYPE.CUBE,\n    velocityBase: new THREE.Vector3(0, 0, 0),\n    velocitySpread: new THREE.Vector3(60, 20, 60),\n\n    particleTexture: textureLoader.load(`${base}/oss/textures/effect/spark.png`),\n\n    sizeBase: 30.0,\n    sizeSpread: 2.0,\n    opacityTween: new Tween(\n      [0.0, 1.0, 1.1, 2.0, 2.1, 3.0, 3.1, 4.0, 4.1, 5.0, 5.1, 6.0, 6.1],\n      [0.2, 0.2, 1.0, 1.0, 0.2, 0.2, 1.0, 1.0, 0.2, 0.2, 1.0, 1.0, 0.2]\n    ),\n    colorBase: new THREE.Vector3(0.3, 1.0, 0.6), // H,S,L\n    colorSpread: new THREE.Vector3(0.3, 0.0, 0.0),\n\n    particlesPerSecond: 20,\n    particleDeathAge: 6.1,\n    emitterDeathAge: 600\n  },\n\n  startunnel: {\n    positionStyle: TYPE.CUBE,\n    positionBase: new THREE.Vector3(0, 0, 0),\n    positionSpread: new THREE.Vector3(10, 10, 10),\n\n    velocityStyle: TYPE.CUBE,\n    velocityBase: new THREE.Vector3(0, 100, 200),\n    velocitySpread: new THREE.Vector3(40, 40, 80),\n\n    angleBase: 0,\n    angleSpread: 720,\n    angleVelocityBase: 10,\n    angleVelocitySpread: 0,\n\n    particleTexture: textureLoader.load(`${base}/oss/textures/effect/spikey.png`),\n\n    sizeBase: 4.0,\n    sizeSpread: 2.0,\n    colorBase: new THREE.Vector3(0.15, 1.0, 0.8), // H,S,L\n    opacityBase: 1,\n    blendStyle: THREE.AdditiveBlending,\n\n    particlesPerSecond: 500,\n    particleDeathAge: 4.0,\n    emitterDeathAge: 60\n  },\n\n  firework: {\n    positionStyle: TYPE.SPHERE,\n    positionBase: new THREE.Vector3(0, 100, 0),\n    positionRadius: 10,\n\n    velocityStyle: TYPE.SPHERE,\n    speedBase: 90,\n    speedSpread: 10,\n\n    accelerationBase: new THREE.Vector3(0, -80, 0),\n\n    particleTexture: textureLoader.load(`${base}/oss/textures/effect/spark.png`),\n\n    sizeTween: new Tween([0.5, 0.7, 1.3], [5, 40, 1]),\n    opacityTween: new Tween([0.2, 0.7, 2.5], [0.75, 1, 0]),\n    colorTween: new Tween(\n      [0.4, 0.8, 1.0],\n      [new THREE.Vector3(0, 1, 1), new THREE.Vector3(0, 1, 0.6), new THREE.Vector3(0.8, 1, 0.6)]\n    ),\n    blendStyle: THREE.AdditiveBlending,\n\n    particlesPerSecond: 3000,\n    particleDeathAge: 2.5,\n    emitterDeathAge: 0.2\n  },\n\n  candle: {\n    positionStyle: TYPE.SPHERE,\n    positionBase: new THREE.Vector3(0, 50, 0),\n    positionRadius: 2,\n\n    velocityStyle: TYPE.CUBE,\n    velocityBase: new THREE.Vector3(0, 100, 0),\n    velocitySpread: new THREE.Vector3(20, 0, 20),\n\n    particleTexture: textureLoader.load(`${base}/oss/textures/effect/smokeparticle.png`),\n\n    sizeTween: new Tween([0, 0.3, 1.2], [20, 150, 1]),\n    opacityTween: new Tween([0.9, 1.5], [1, 0]),\n    colorTween: new Tween(\n      [0.5, 1.0],\n      [new THREE.Vector3(0.02, 1, 0.5), new THREE.Vector3(0.05, 1, 0)]\n    ),\n    blendStyle: THREE.AdditiveBlending,\n\n    particlesPerSecond: 60,\n    particleDeathAge: 1.5,\n    emitterDeathAge: 60\n  }\n}\n","import * as THREE from 'three/webgpu'\nimport * as ThreeScene from 'three-scene'\n\nimport { ParticleEngine } from './particle-engine'\nimport { Examples } from './examples'\n\nconst TSL = THREE.TSL\n\nconst base = import.meta.env.VITE_BEFORE_STATIC_PATH\nconst textureLoader = new THREE.TextureLoader()\n\n// 速度\nconst speed = TSL.uniform(0.2)\n\nexport class NewThreeScene extends ThreeScene.Scene {\n  engine?: any\n  constructor(options: ConstructorParameters<typeof ThreeScene.Scene>[0]) {\n    super(options)\n    // this.createClock()\n    this.addModel()\n  }\n\n  render() {\n    this.renderer.renderAsync(this.scene, this.camera)\n  }\n\n  createRender() {\n    return new THREE.WebGPURenderer(this.options.render)\n  }\n\n  addModel() {\n    // 动画周期范围\n    const lifeRange = TSL.range(0.1, 1)\n    // const offsetRange = TSL.range(new THREE.Vector3(-10, 15, -10), new THREE.Vector3(10, 20, 10))\n    const offsetRange = TSL.range(new THREE.Vector3(-4, 15, 4), new THREE.Vector3(4, 15, 8))\n\n    const scaledTime = TSL.time.add(5).mul(speed) // + 5 * speed\n\n    const lifeTime = scaledTime.mul(lifeRange).mod(1)\n    const scaleRange = TSL.range(0.3, 2)\n    const roteRange = TSL.range(0.1, 4)\n\n    const life = lifeTime.div(lifeRange)\n    const fakeLightEffect = TSL.positionLocal.y.oneMinus().max(0.9)\n\n    const textureNode = TSL.texture(\n      textureLoader.load(`${base}/oss/textures/effect/smokeparticle.png`),\n      TSL.rotateUV(TSL.uv(), scaledTime.mul(roteRange))\n    )\n\n    const opacityNode = textureNode.a.mul(life.oneMinus())\n\n    // 缩放倍数\n    const s = 40\n\n    // 烟\n    const smokeNodeMaterial = new THREE.SpriteNodeMaterial()\n    // 烟 混合颜色\n    smokeNodeMaterial.colorNode = TSL.mix(\n      TSL.color(0xffffff),\n      TSL.color(0xf00f00),\n      // TSL.color(0x0000ff),\n      life.mul(0.5).min(0.5)\n    ).mul(fakeLightEffect)\n\n    smokeNodeMaterial.opacityNode = opacityNode\n    smokeNodeMaterial.positionNode = offsetRange.mul(lifeTime)\n    smokeNodeMaterial.scaleNode = scaleRange.mul(lifeTime.max(0.3))\n    smokeNodeMaterial.depthWrite = false\n    smokeNodeMaterial.transparent = true\n\n    // 烟 精灵材质\n    const smokeInstancedSprite = new THREE.Mesh(new THREE.PlaneGeometry(1, 1), smokeNodeMaterial)\n    smokeInstancedSprite.scale.setScalar(s)\n    // @ts-ignore\n    smokeInstancedSprite.count = 600\n    smokeInstancedSprite.position.y = s / 4\n    this.addObject(smokeInstancedSprite)\n  }\n\n  addModel_() {\n    const engine = new ParticleEngine()\n    engine.setValues(Examples.rain)\n    engine.initialize()\n    this.engine = engine\n    console.log(engine)\n    this.addObject(engine.particleMesh)\n\n    const box = new THREE.BoxGeometry(10, 10, 10)\n\n    let colors = new Array(8)\n      .fill(0)\n      .map(() => [\n        1.0,\n        0.0,\n        0.0, // 颜色1 (红色)\n\n        0.0,\n        1.0,\n        0.0, // 颜色2 (绿色)\n\n        0.0,\n        0.0,\n        1.0 // 颜色3 (蓝色)\n      ])\n      .flat()\n\n    // 创建顶点颜色属性\n    let cat = new THREE.BufferAttribute(new Float32Array(colors), 3)\n    box.setAttribute('color', cat)\n    const boxMesh = new THREE.Mesh(\n      box,\n      new THREE.MeshBasicMaterial({\n        // color: 0xf00f00\n        vertexColors: true,\n        side: THREE.DoubleSide,\n        wireframe: false\n      })\n    )\n    boxMesh.position.x = 50\n    this.addObject(boxMesh)\n  }\n\n  modelAnimate() {\n    const dt = this.clock?.getDelta() as number\n\n    if (this.engine) {\n      this.engine.update(dt * 0.5)\n    }\n  }\n}\n","<template>\n  <div class=\"three-page\">\n    <div class=\"h-100\" ref=\"containerRef\"></div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { NewThreeScene } from './methods'\n\nimport { useResize } from '@/hooks/scene-resize'\n\nimport * as ThreeScene from 'three-scene/build/three-scene.module'\n\nconst Hooks = ThreeScene.Hooks\nconst { backgroundLoad } = Hooks.useBackground()\n\nconst containerRef = ref()\nconst options: ConstructorParameters<typeof NewThreeScene>[0] = {\n  axes: {\n    visible: true\n  },\n  grid: {\n    visible: true\n  },\n  render: {\n    logarithmicDepthBuffer: false\n  }\n}\nlet scene: InstanceType<typeof NewThreeScene>\n\nonMounted(() => {\n  options.container = containerRef.value\n  scene = new NewThreeScene(options)\n  scene.run()\n\n  useResize(scene).resize()\n\n  return\n  backgroundLoad(scene, '226')\n})\n</script>\n\n<style lang=\"scss\" module></style>\n"],"names":["TYPE","Object","freeze","CUBE","SPHERE","particleVertexShader","join","particleFragmentShader","Tween","constructor","timeArray","valueArray","__publicField","this","times","values","lerp","t","i","n","length","p","THREE.Vector3","clone","ParticleBasicMaterial","THREE.Material","parameters","THREE.Color","setValues","ParticleSystem","THREE.Object3D","geometry","material","THREE.BufferGeometry","color","Math","random","object","sortParticles","super","Particle","update","dt","position","add","velocity","multiplyScalar","acceleration","angle","angleVelocity","angleAcceleration","age","sizeTween","size","colorTween","colorHSL","setHSL","x","y","z","opacityTween","opacity","ParticleEngine","THREE.NormalBlending","THREE.ShaderMaterial","uniforms","uTx","value","particleTexture","uVisible","uAngle","uSize","uColor","uOpacity","vertexShader","fragmentShader","transparent","alphaTest","blending","depthTest","particleCount","particlesPerSecond","min","particleDeathAge","emitterDeathAge","randomValue","base","spread","randomVector3","rand3","addVectors","multiplyVectors","createParticle","particle","positionStyle","positionBase","positionSpread","r","sqrt","vec3","cos","sin","positionRadius","velocityStyle","velocityBase","velocitySpread","direction","subVectors","speed","speedBase","speedSpread","normalize","accelerationBase","accelerationSpread","angleBase","angleSpread","angleVelocityBase","angleVelocitySpread","angleAccelerationBase","angleAccelerationSpread","sizeBase","sizeSpread","colorBase","colorSpread","opacityBase","opacitySpread","alive","console","log","key","prototype","particleArray","emitterAge","emitterAlive","particleGeometry","particleMaterial","initialize","points","push","c","g","b","setFromPoints","setAttribute","THREE.Float32BufferAttribute","blendStyle","particleMesh","THREE.Mesh","dynamic","recycleIndices","attributes","setX","needsUpdate","setXYZ","startIndex","round","endIndex","j","destroy","scene","remove","textureLoader","THREE.TextureLoader","Examples","fountain","load","fireball","THREE.AdditiveBlending","smoke","clouds","snow","rain","starfield","fireflies","startunnel","firework","candle","TSL","THREE.TSL","uniform","NewThreeScene","ThreeScene.Scene","options","addModel","render","renderer","renderAsync","camera","createRender","THREE.WebGPURenderer","lifeRange","range","offsetRange","scaledTime","time","mul","lifeTime","mod","scaleRange","roteRange","life","div","fakeLightEffect","positionLocal","oneMinus","max","opacityNode","texture","rotateUV","uv","a","smokeNodeMaterial","THREE.SpriteNodeMaterial","colorNode","mix","positionNode","scaleNode","depthWrite","smokeInstancedSprite","THREE.PlaneGeometry","scale","setScalar","count","s","addObject","addModel_","engine","box","THREE.BoxGeometry","colors","Array","fill","map","flat","cat","THREE.BufferAttribute","Float32Array","boxMesh","THREE.MeshBasicMaterial","vertexColors","side","THREE.DoubleSide","wireframe","modelAnimate","_a","clock","getDelta","ThreeScene.Hooks","useBackground","containerRef","ref","axes","visible","grid","logarithmicDepthBuffer","onMounted","container","run","useResize","resize"],"mappings":"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"}