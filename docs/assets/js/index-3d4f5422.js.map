{"version":3,"file":"index-3d4f5422.js","sources":["../../../code/src/pages/webgl/light/hemisphere/methods.ts","../../../code/src/pages/webgl/light/hemisphere/index.vue"],"sourcesContent":["import * as THREE from 'three'\nimport { GUI } from 'three/examples/jsm/libs/lil-gui.module.min.js'\nimport * as ThreeScene from 'three-scene'\n\nconst params = {\n  wireframe: true,\n  helper: true,\n  intensity: 1,\n  skyColor: 0xffffff,\n  groundColor: 0x61c0bf\n}\n\nconst createGUI = container => {\n  const gui = new GUI()\n  gui.add(params, 'intensity', 0.1, 10).name('光照强度')\n  gui.add(params, 'helper').name('辅助器')\n  gui.addColor(params, 'skyColor').name('天空光颜色')\n  gui.addColor(params, 'groundColor').name('地面光颜色')\n\n  // @ts-ignore\n  gui.domElement.style = 'position: absolute; top: 10px; right: 10px'\n  container?.appendChild(gui.domElement)\n}\n\nexport class NewThreeScene extends ThreeScene.Scene {\n  hemisphereLight?: InstanceType<typeof THREE.HemisphereLight>\n  hemisphereLightHelper?: InstanceType<typeof THREE.HemisphereLightHelper>\n  wireframe?: InstanceType<typeof THREE.Mesh>\n  constructor(options: ConstructorParameters<typeof ThreeScene.Scene>[0]) {\n    super(options)\n\n    this.addModel()\n  }\n\n  addModel(): void {\n    // 天空颜色，地面颜色，光照强度\n    const light = new THREE.HemisphereLight(params.skyColor, params.groundColor, params.intensity)\n    light.position.set(0, 50, 0)\n    this.addObject(light)\n    this.hemisphereLight = light\n\n    const helper = new THREE.HemisphereLightHelper(light, 5)\n    helper.visible = params.helper\n    this.addObject(helper)\n    this.hemisphereLightHelper = helper\n\n    // 创建 20面几何体 (半径、增加顶点)\n    const icosahedronGeo = new THREE.IcosahedronGeometry(10, 10)\n    const icosahedron = new THREE.Mesh(icosahedronGeo, new THREE.MeshStandardMaterial())\n    icosahedron.position.set(0, 25, 0)\n    icosahedron.castShadow = true\n    this.addObject(icosahedron)\n\n    const groundGeo = new THREE.PlaneGeometry(500, 500)\n    const ground = new THREE.Mesh(\n      groundGeo,\n      // 光泽表面的材质，没有镜面高光\n      new THREE.MeshLambertMaterial({ color: 0xffffff })\n    )\n    ground.rotation.x = -Math.PI * 0.5\n    ground.receiveShadow = true\n    this.addObject(ground)\n\n    createGUI(this.container)\n  }\n\n  modelAnimate(): void {\n    if (this.hemisphereLight) {\n      this.hemisphereLight.intensity = params.intensity\n      this.hemisphereLight.color.set(params.skyColor)\n      this.hemisphereLight.groundColor.set(params.groundColor)\n    }\n    if (this.hemisphereLightHelper) {\n      this.hemisphereLightHelper.visible = params.helper\n      this.hemisphereLightHelper.update()\n    }\n  }\n}\n","<template>\n  <div :class=\"$style.page\" class=\"h-100 o-h\">\n    <div ref=\"containerRef\" class=\"h-100\"></div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { NewThreeScene } from './methods'\nimport { useResize } from '@/hooks/scene-resize'\n\nconst containerRef = ref()\n\nconst options: ConstructorParameters<typeof NewThreeScene>[0] = {\n  bgColor: 0x311d3f,\n  fog: {\n    visible: true,\n    color: 0xffffff,\n    near: 100,\n    far: 500\n  },\n  camera: {\n    position: [0, 100, 150]\n  },\n  ambientLight: {\n    visible: false\n  },\n  directionalLight: {\n    // visible: false\n    helper: true,\n    light2: false\n  },\n  grid: {\n    visible: true\n  }\n}\n\nlet scene: InstanceType<typeof NewThreeScene>\n\nonMounted(() => {\n  options.container = containerRef.value\n  scene = new NewThreeScene(options)\n  scene.run()\n  useResize(scene).resize()\n})\n</script>\n\n<style lang=\"scss\" module>\n.page {\n  position: relative;\n}\n</style>\n"],"names":["params","wireframe","helper","intensity","skyColor","groundColor","NewThreeScene","ThreeScene.Scene","constructor","options","super","__publicField","this","addModel","light","THREE.HemisphereLight","position","set","addObject","hemisphereLight","THREE.HemisphereLightHelper","visible","hemisphereLightHelper","icosahedronGeo","THREE.IcosahedronGeometry","icosahedron","THREE.Mesh","THREE.MeshStandardMaterial","castShadow","groundGeo","THREE.PlaneGeometry","ground","THREE.MeshLambertMaterial","color","rotation","x","Math","PI","receiveShadow","container","gui","GUI","add","name","addColor","domElement","style","appendChild","createGUI","modelAnimate","update","containerRef","ref","bgColor","fog","near","far","camera","ambientLight","directionalLight","light2","grid","scene","onMounted","value","run","useResize","resize"],"mappings":"4YAIA,MAAMA,EAAS,CACbC,WAAW,EACXC,QAAQ,EACRC,UAAW,EACXC,SAAU,SACVC,YAAa,SAeF,MAAAC,UAAsBC,EAIjC,WAAAC,CAAYC,GACVC,MAAMD,GAJRE,EAAAC,KAAA,mBACAD,EAAAC,KAAA,yBACAD,EAAAC,KAAA,aAIEA,KAAKC,UACP,CAEA,QAAAA,GAEQ,MAAAC,EAAQ,IAAIC,EAAsBf,EAAOI,SAAUJ,EAAOK,YAAaL,EAAOG,WACpFW,EAAME,SAASC,IAAI,EAAG,GAAI,GAC1BL,KAAKM,UAAUJ,GACfF,KAAKO,gBAAkBL,EAEvB,MAAMZ,EAAS,IAAIkB,EAA4BN,EAAO,GACtDZ,EAAOmB,QAAUrB,EAAOE,OACxBU,KAAKM,UAAUhB,GACfU,KAAKU,sBAAwBpB,EAG7B,MAAMqB,EAAiB,IAAIC,EAA0B,GAAI,IACnDC,EAAc,IAAIC,EAAWH,EAAgB,IAAII,GACvDF,EAAYT,SAASC,IAAI,EAAG,GAAI,GAChCQ,EAAYG,YAAa,EACzBhB,KAAKM,UAAUO,GAEf,MAAMI,EAAY,IAAIC,EAAoB,IAAK,KACzCC,EAAS,IAAIL,EACjBG,EAEA,IAAIG,EAA0B,CAAEC,MAAO,YAEzCF,EAAOG,SAASC,EAAe,IAAVC,KAAKC,GAC1BN,EAAOO,eAAgB,EACvB1B,KAAKM,UAAUa,GAjDD,CAAaQ,IACvB,MAAAC,EAAM,IAAIC,EAChBD,EAAIE,IAAI1C,EAAQ,YAAa,GAAK,IAAI2C,KAAK,QAC3CH,EAAIE,IAAI1C,EAAQ,UAAU2C,KAAK,OAC/BH,EAAII,SAAS5C,EAAQ,YAAY2C,KAAK,SACtCH,EAAII,SAAS5C,EAAQ,eAAe2C,KAAK,SAGzCH,EAAIK,WAAWC,MAAQ,6CACZ,MAAAP,GAAAA,EAAAQ,YAAYP,EAAIK,WAAA,EA0CzBG,CAAUpC,KAAK2B,UACjB,CAEA,YAAAU,GACMrC,KAAKO,kBACFP,KAAAO,gBAAgBhB,UAAYH,EAAOG,UACxCS,KAAKO,gBAAgBc,MAAMhB,IAAIjB,EAAOI,UACtCQ,KAAKO,gBAAgBd,YAAYY,IAAIjB,EAAOK,cAE1CO,KAAKU,wBACFV,KAAAU,sBAAsBD,QAAUrB,EAAOE,OAC5CU,KAAKU,sBAAsB4B,SAE/B,uCClEF,MAAAC,EAAAC,IAEA3C,EAAA,CAAgE4C,QAAA,QACrDC,IAAA,CACJjC,SAAA,EACMY,MAAA,SACFsB,KAAA,IACDC,IAAA,KAERC,OAAA,CACQzC,SAAA,CAAA,EAAA,IAAA,MAER0C,aAAA,CACcrC,SAAA,GAEdsC,iBAAA,CACkBzD,QAAA,EAER0D,QAAA,GAEVC,KAAA,CACMxC,SAAA,IAKR,IAAAyC,SAEAC,GAAA,KACEtD,EAAA8B,UAAAY,EAAAa,MACAF,EAAA,IAAAxD,EAAAG,GACAqD,EAAAG,MACAC,EAAAJ,GAAAK"}