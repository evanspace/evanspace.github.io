{"version":3,"file":"index-b77788ab.js","sources":["../../../code/src/pages/webgl/controls/fly/methods.ts","../../../code/src/pages/webgl/controls/fly/index.vue"],"sourcesContent":["import * as THREE from 'three'\nimport * as ThreeScene from 'three-scene'\nimport { FlyControls } from 'three/examples/jsm/controls/FlyControls'\nimport { GUI } from 'three/examples/jsm/libs/lil-gui.module.min.js'\n\nconst { backgroundLoad } = ThreeScene.Hooks.useBackground()\n\nexport class NewThreeScene extends ThreeScene.Scene {\n  clock: InstanceType<typeof THREE.Clock>\n  gui: InstanceType<typeof GUI>\n\n  constructor(options: ConstructorParameters<typeof ThreeScene.Scene>[0]) {\n    super(options)\n\n    this.clock = new THREE.Clock()\n\n    this.addControls()\n\n    this.gui = new GUI()\n    this.addGui()\n  }\n\n  addControls() {\n    const camera = this.camera\n    const controls = new FlyControls(camera, this.renderer.domElement)\n    // controls.movementSpeed = 1000\n    // controls.rollSpeed = Math.PI / 24\n    // controls.autoForward = !false\n    // controls.dragToLook = false\n    // 监听相机变化\n    controls.addEventListener('change', () => {\n      // console.log('相机位置:', camera.position)\n      // console.log('相机方向:', camera.getWorldDirection(new THREE.Vector3()))\n    })\n    this.controls = controls as any\n  }\n\n  addGui() {\n    const gui = this.gui\n    const ctr = this.controls as any\n    console.log(ctr)\n    gui.add(ctr, 'movementSpeed', 0.1, 1000).name('移动速度(方向按键、鼠标左右)')\n    gui.add(ctr, 'autoForward').name('自动向前')\n    gui.add(ctr, 'rollSpeed', 0.001, Math.PI).name('旋转速度')\n    gui.add(ctr, 'dragToLook').name('拖拽控制视角')\n    gui.domElement.style.position = 'absolute'\n    gui.domElement.style.top = 'opx'\n    gui.domElement.style.right = 'opx'\n    this.container.parentNode?.appendChild(gui.domElement)\n  }\n\n  initModel() {\n    const geo = new THREE.PlaneGeometry(300, 300)\n    const mat = new THREE.MeshStandardMaterial({\n      color: 0xb2dbdb\n      // shininess: 10\n    })\n    const ground = new THREE.Mesh(geo, mat)\n    ground.name = 'ground'\n    ground.rotation.x = Math.PI * 1.5\n    // 接收阴影\n    ground.receiveShadow = true\n    this.addObject(ground)\n\n    const size = 50\n    const box = new THREE.BoxGeometry(size, size, size)\n    const boxMat = new THREE.MeshStandardMaterial({\n      color: 0x137b02\n      // shininess: 10\n    })\n    const boxMesh = new THREE.Mesh(box, boxMat)\n    boxMesh.position.y = size / 2\n    boxMesh.castShadow = true\n    this.addObject(boxMesh)\n\n    backgroundLoad(this.scene, '102')\n  }\n\n  modelAnimate() {\n    const delta = this.clock.getDelta()\n\n    this.controls?.update(delta)\n  }\n}\n","<template>\n  <div class=\"three-page\">\n    <div class=\"h-100\" ref=\"containerRef\"></div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { NewThreeScene } from './methods'\nimport { useResize } from '@/hooks/scene-resize'\n\nconst containerRef = ref()\n\nconst options: ConstructorParameters<typeof NewThreeScene>[0] = {\n  axes: {\n    visible: true\n  },\n  render: {\n    alpha: true\n  },\n  grid: {\n    visible: true\n  },\n  controls: {\n    visible: false\n  }\n}\nlet scene: InstanceType<typeof NewThreeScene>\n\nonMounted(() => {\n  options.container = containerRef.value\n  scene = new NewThreeScene(options)\n  scene.run()\n\n  useResize(scene).resize()\n})\n</script>\n\n<style lang=\"scss\" module></style>\n"],"names":["backgroundLoad","ThreeScene.Hooks","useBackground","NewThreeScene","ThreeScene.Scene","constructor","options","super","__publicField","this","clock","THREE.Clock","addControls","gui","GUI","addGui","camera","controls","FlyControls","renderer","domElement","addEventListener","ctr","console","log","add","name","Math","PI","style","position","top","right","_a","container","parentNode","appendChild","initModel","geo","THREE.PlaneGeometry","mat","THREE.MeshStandardMaterial","color","ground","THREE.Mesh","rotation","x","receiveShadow","addObject","box","THREE.BoxGeometry","boxMat","boxMesh","y","size","castShadow","scene","modelAnimate","delta","getDelta","update","containerRef","ref","axes","visible","render","alpha","grid","onMounted","value","run","useResize","resize"],"mappings":"wXAKA,MAAMA,eAAEA,GAAmBC,EAAiBC,gBAE/B,MAAAC,UAAsBC,EAIjC,WAAAC,CAAYC,GACVC,MAAMD,GAJRE,EAAAC,KAAA,SACAD,EAAAC,KAAA,OAKOA,KAAAC,MAAQ,IAAIC,EAEjBF,KAAKG,cAEAH,KAAAI,IAAM,IAAIC,EACfL,KAAKM,QACP,CAEA,WAAAH,GACE,MAAMI,EAASP,KAAKO,OACdC,EAAW,IAAIC,EAAYF,EAAQP,KAAKU,SAASC,YAM9CH,EAAAI,iBAAiB,UAAU,SAIpCZ,KAAKQ,SAAWA,CAClB,CAEA,MAAAF,SACE,MAAMF,EAAMJ,KAAKI,IACXS,EAAMb,KAAKQ,SACjBM,QAAQC,IAAIF,GACZT,EAAIY,IAAIH,EAAK,gBAAiB,GAAK,KAAMI,KAAK,mBAC9Cb,EAAIY,IAAIH,EAAK,eAAeI,KAAK,QAC7Bb,EAAAY,IAAIH,EAAK,YAAa,KAAOK,KAAKC,IAAIF,KAAK,QAC/Cb,EAAIY,IAAIH,EAAK,cAAcI,KAAK,UAC5Bb,EAAAO,WAAWS,MAAMC,SAAW,WAC5BjB,EAAAO,WAAWS,MAAME,IAAM,MACvBlB,EAAAO,WAAWS,MAAMG,MAAQ,MAC7B,OAAAC,EAAAxB,KAAKyB,UAAUC,aAAYF,EAAAG,YAAYvB,EAAIO,WAC7C,CAEA,SAAAiB,GACE,MAAMC,EAAM,IAAIC,EAAoB,IAAK,KACnCC,EAAM,IAAIC,EAA2B,CACzCC,MAAO,WAGHC,EAAS,IAAIC,EAAWN,EAAKE,GACnCG,EAAOjB,KAAO,SACPiB,EAAAE,SAASC,EAAc,IAAVnB,KAAKC,GAEzBe,EAAOI,eAAgB,EACvBtC,KAAKuC,UAAUL,GAEf,MACMM,EAAM,IAAIC,EADH,UAEPC,EAAS,IAAIV,EAA2B,CAC5CC,MAAO,UAGHU,EAAU,IAAIR,EAAWK,EAAKE,GAC5BC,EAAAtB,SAASuB,EAAIC,GACrBF,EAAQG,YAAa,EACrB9C,KAAKuC,UAAUI,GAEApD,EAAAS,KAAK+C,MAAO,MAC7B,CAEA,YAAAC,SACQ,MAAAC,EAAQjD,KAAKC,MAAMiD,WAEpB,OAAA1B,EAAAxB,KAAAQ,aAAU2C,OAAOF,EACxB,4DCxEF,MAAAG,EAAAC,IAEAxD,EAAA,CAAgEyD,KAAA,CACxDC,SAAA,GAENC,OAAA,CACQC,OAAA,GAERC,KAAA,CACMH,SAAA,GAEN/C,SAAA,CACU+C,SAAA,IAIZ,IAAAR,SAEAY,GAAA,KACE9D,EAAA4B,UAAA2B,EAAAQ,MACAb,EAAA,IAAArD,EAAAG,GACAkD,EAAAc,MAEAC,EAAAf,GAAAgB"}