{"version":3,"file":"index-bb56235e.js","sources":["../../../code/src/pages/webgl/csg/model/methods.ts","../../../code/src/pages/webgl/csg/model/index.vue"],"sourcesContent":["import * as THREE from 'three'\nimport { GUI } from 'three/examples/jsm/libs/lil-gui.module.min.js'\nimport {\n  ADDITION,\n  SUBTRACTION,\n  REVERSE_SUBTRACTION,\n  INTERSECTION,\n  DIFFERENCE,\n  // @ts-ignore\n  HOLLOW_SUBTRACTION,\n  // @ts-ignore\n  HOLLOW_INTERSECTION,\n  Brush,\n  Evaluator\n} from 'three-bvh-csg'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js'\nimport { MeshoptDecoder } from 'three/examples/jsm/libs/meshopt_decoder.module.js'\nimport { MeshSurfaceSampler } from 'three/examples/jsm/math/MeshSurfaceSampler.js'\nimport * as ThreeScene from 'three-scene'\n\nconst base = import.meta.env.VITE_BEFORE_STATIC_PATH\n\nconst params = {\n  glb: `${base}/oss/model/csg/bunny.glb`,\n\n  operation: SUBTRACTION,\n  wireframe: false,\n  displayBrushes: false,\n  shadows: true,\n  useGroups: true,\n  consolidateGroups: true\n}\n\nconst materialMap = new Map()\nconst material = new THREE.MeshStandardMaterial({\n  opacity: 0.15,\n  transparent: true,\n  // 深度写入（半透明部分出现穿透问题）\n  depthWrite: false,\n  // 多边形偏移\n  polygonOffset: true,\n  // 偏移系数\n  polygonOffsetFactor: 0.1,\n  // 偏移单位\n  polygonOffsetUnits: 0.1,\n  side: THREE.DoubleSide,\n  // 是否预乘alpha值。默认为true\n  premultipliedAlpha: true,\n  // 金属粗糙度\n  roughness: 0.25,\n  color: 0x4dd0e1\n})\n\n// 缩放倍数\nconst SCALE_SIZE = 50\n\nlet csgEvaluator = new Evaluator()\ncsgEvaluator.attributes = ['position', 'normal']\ncsgEvaluator.useGroups = false\n\nconst loadBunnyBrush = async () => {\n  const gltf = await new GLTFLoader().setMeshoptDecoder(MeshoptDecoder).loadAsync(params.glb)\n\n  const obj = gltf.scene.children[0]\n  // 将该向量的x、y和z值同时设置为等于传入的scalar\n  // obj.scale.setScalar(SCALE_SIZE)\n\n  obj.updateMatrixWorld()\n\n  // 获取geometry的副本，以免修改原始geometry\n  // @ts-ignore\n  const geometry = obj.geometry.clone()\n  // 矩阵\n  const matrix = new THREE.Matrix4()\n  const pos = new THREE.Vector3(0, 0, 0)\n  // 四元数\n  const quaternion = new THREE.Quaternion()\n  // 欧拉对象\n  const rotation = new THREE.Euler()\n  // 缩放\n  const scale = new THREE.Vector3(SCALE_SIZE, SCALE_SIZE, SCALE_SIZE)\n\n  quaternion.setFromEuler(rotation)\n  matrix.compose(pos, quaternion, scale)\n  // 应用缩放矩阵到geometry的每个顶点\n  geometry.applyMatrix4(matrix)\n\n  // 计算法向量及自定义normal属性\n  geometry.computeVertexNormals()\n\n  // @ts-ignore\n  const mesh = new Brush(geometry, new THREE.MeshStandardMaterial()) as any\n  // mesh.position.y = 1\n  mesh.updateMatrixWorld()\n  //对象是否被渲染到阴影贴图中。默认值为false。\n  // mesh.castShadow = true\n\n  mesh.name = '兔子'\n  mesh.material.opacity = 0.15\n  mesh.material.transparent = true\n  mesh.material.depthWrite = false\n  mesh.material.polygonOffset = true\n  mesh.material.polygonOffsetFactor = 0.1\n  mesh.material.polygonOffsetUnits = 0.1\n  mesh.material.side = THREE.DoubleSide\n  mesh.material.premultipliedAlpha = true\n  mesh.material.color.set(0xe0f7fa)\n  return mesh\n}\n\nconst createBrushes = scene => {\n  let brushes: InstanceType<typeof THREE.Mesh>[] = []\n\n  for (let i = 0; i < 50; i++) {\n    // @ts-ignore\n    const b = new Brush(new THREE.SphereGeometry(1 * SCALE_SIZE, 15, 15), material) as InstanceType<\n      typeof THREE.Mesh\n    >\n    b.receiveShadow = true\n    scene.add(b)\n    brushes.push(b)\n  }\n  return { brushes, material }\n}\n\ntype NewBrush = InstanceType<typeof Brush> & InstanceType<typeof THREE.Mesh>\nexport class NewThreeScene extends ThreeScene.Scene {\n  bunnyBrush: NewBrush | undefined\n  brushResult: NewBrush | undefined\n  wireframeResult: InstanceType<typeof THREE.Mesh> | undefined\n  brushes: NewBrush[]\n  surfaceSampler: InstanceType<typeof MeshSurfaceSampler> | undefined\n  constructor(options: ConstructorParameters<typeof ThreeScene.Scene>[0]) {\n    super(options)\n\n    this.brushes = []\n    this.addModel()\n  }\n\n  initModel() {\n    const plane = new THREE.Mesh(\n      new THREE.PlaneGeometry(1000, 1000),\n      // 阴影材质\n      new THREE.ShadowMaterial({\n        color: 0xfae3d9,\n        transparent: true,\n        opacity: 0.35,\n        side: THREE.DoubleSide\n      })\n    )\n    plane.rotation.x = -Math.PI / 2\n    plane.scale.setScalar(10)\n    //材质是否接收阴影。默认值为false。\n    plane.receiveShadow = true\n    this.addObject(plane)\n  }\n\n  async addModel() {\n    const bunnyBrush = await loadBunnyBrush()\n    this.bunnyBrush = bunnyBrush\n    this.addObject(bunnyBrush)\n\n    // 网格采样器\n    const surfaceSampler = new MeshSurfaceSampler(bunnyBrush)\n    surfaceSampler.build()\n    this.surfaceSampler = surfaceSampler\n\n    const { brushes, material } = createBrushes(this.scene)\n    this.brushes = brushes as any\n\n    // 缓存材质\n    let mat\n    mat = bunnyBrush.material.clone()\n    mat.opacity = 1\n    mat.transparent = false\n    mat.depthWrite = true\n    materialMap.set(bunnyBrush.material, mat)\n\n    mat = material.clone()\n    mat.opacity = 1\n    mat.transparent = false\n    mat.depthWrite = true\n    materialMap.set(material, mat)\n\n    // 添加计算结果\n    const brushResult = new THREE.Mesh(\n      new THREE.BufferGeometry(),\n      new THREE.MeshStandardMaterial({\n        // 金属粗糙度\n        roughness: 0.1,\n        // 平面着色\n        flatShading: false,\n        // 多边形偏移\n        polygonOffset: true,\n        polygonOffsetUnits: SCALE_SIZE,\n        polygonOffsetFactor: SCALE_SIZE\n      })\n    )\n    brushResult.castShadow = true\n    brushResult.receiveShadow = true\n    this.brushResult = brushResult as any\n    this.addObject(brushResult)\n\n    // 线框材质\n    const wireframeResult = new THREE.Mesh(\n      brushResult.geometry,\n      new THREE.MeshBasicMaterial({\n        wireframe: true,\n        color: 0,\n        opacity: 0.15,\n        transparent: true\n      })\n    )\n    wireframeResult.material.color.set(0x001516)\n    this.wireframeResult = wireframeResult\n    this.addObject(wireframeResult)\n\n    this.randomizeBrushes()\n    this.updateCSG()\n    this.createGUI()\n  }\n\n  randomizeBrushes() {\n    const surfaceSampler = this.surfaceSampler\n    if (!surfaceSampler) return\n    const brushes = this.brushes\n    const bunnyBrush = this.bunnyBrush\n\n    if (!bunnyBrush) return\n    for (let i = 0; i < brushes.length; i++) {\n      const b = brushes[i]\n      surfaceSampler.sample(b.position)\n      // const { x, y, z } = b.position\n      // b.position.set(x * SCALE_SIZE, y * SCALE_SIZE, z * SCALE_SIZE)\n      // 定点坐标进行矩阵变换（ 世界矩阵 ）\n      b.position.applyMatrix4(bunnyBrush.matrixWorld)\n      // THREE.MathUtils.lerp - 返回给定区间线性插值\n      b.scale.setScalar(THREE.MathUtils.lerp(0.05, 0.15, Math.random()))\n      b.updateMatrixWorld()\n    }\n  }\n\n  updateCSG() {\n    const { brushes, bunnyBrush, brushResult } = this\n    if (!bunnyBrush || !brushResult) return\n    let finalBrush = brushes[0]\n    csgEvaluator.useGroups = params.useGroups\n\n    // 合并组\n    // @ts-ignore\n    csgEvaluator.consolidateGroups = params.consolidateGroups\n    for (let i = 1, l = brushes.length; i < l; i++) {\n      const b = brushes[i]\n      // 计算\n      finalBrush = csgEvaluator.evaluate(finalBrush, b, ADDITION)\n      finalBrush.material = material\n    }\n\n    csgEvaluator.evaluate(bunnyBrush, finalBrush, params.operation, brushResult)\n\n    if (params.useGroups) {\n      brushResult.material = (brushResult.material as any[]).map(m => materialMap.get(m))\n    } else {\n      brushResult.material = materialMap.get(bunnyBrush.material)\n    }\n  }\n\n  createGUI() {\n    const gui = new GUI()\n    gui\n      .add(params, 'operation', {\n        ADDITION,\n        SUBTRACTION,\n        REVERSE_SUBTRACTION,\n        INTERSECTION,\n        DIFFERENCE,\n        HOLLOW_SUBTRACTION,\n        HOLLOW_INTERSECTION\n      })\n      .name('布尔类型')\n      .onChange(() => {\n        this.updateCSG()\n      })\n    gui.add(params, 'wireframe').name('线框材质')\n    gui.add(params, 'displayBrushes').name('计算元素')\n    gui\n      .add(params, 'useGroups')\n      .name('使用组合')\n      .onChange(() => {\n        this.updateCSG()\n      })\n    gui\n      .add(params, 'consolidateGroups')\n      .name('合并组')\n      .onChange(() => {\n        this.updateCSG()\n      })\n    gui\n      .add(\n        {\n          randomize: () => {\n            this.randomizeBrushes()\n            this.updateCSG()\n          }\n        },\n        'randomize'\n      )\n      .name('随机更新')\n\n    // @ts-ignore\n    gui.domElement.style = 'position: absolute; top: 10px; right: 10px'\n    this.container?.appendChild(gui.domElement)\n  }\n\n  modelAnimate(): void {\n    // wireframeResult.visible = params.wireframe;\n    if (this.bunnyBrush) {\n      this.bunnyBrush.visible = params.displayBrushes\n    }\n    if (this.brushes.length) {\n      this.brushes.forEach(b => (b.visible = params.displayBrushes))\n    }\n    if (this.wireframeResult) {\n      this.wireframeResult.visible = params.wireframe\n    }\n  }\n}\n","<template>\n  <div :class=\"$style.page\" class=\"h-100 o-h\">\n    <div ref=\"containerRef\" class=\"h-100\"></div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { NewThreeScene } from './methods'\nimport { useResize } from '@/hooks/scene-resize'\n\nconst containerRef = ref()\n\nconst options: ConstructorParameters<typeof NewThreeScene>[0] = {\n  camera: {\n    position: [0, 80, 300]\n  },\n  render: {\n    alpha: true\n  },\n  grid: {\n    visible: true\n  },\n  axes: {\n    visible: true\n  }\n}\n\nlet scene: InstanceType<typeof NewThreeScene>\n\nonMounted(() => {\n  options.container = containerRef.value\n  scene = new NewThreeScene(options)\n  scene.run()\n  useResize(scene).resize()\n})\n</script>\n\n<style lang=\"scss\" module>\n.page {\n  position: relative;\n}\n</style>\n"],"names":["params","glb","operation","SUBTRACTION","wireframe","displayBrushes","shadows","useGroups","consolidateGroups","materialMap","Map","material","THREE.MeshStandardMaterial","opacity","transparent","depthWrite","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","side","THREE.DoubleSide","premultipliedAlpha","roughness","color","SCALE_SIZE","csgEvaluator","Evaluator","attributes","NewThreeScene","ThreeScene.Scene","constructor","options","super","__publicField","this","brushes","addModel","initModel","plane","THREE.Mesh","THREE.PlaneGeometry","THREE.ShadowMaterial","rotation","x","Math","PI","scale","setScalar","receiveShadow","addObject","bunnyBrush","async","obj","GLTFLoader","setMeshoptDecoder","MeshoptDecoder","loadAsync","scene","children","updateMatrixWorld","geometry","clone","matrix","THREE.Matrix4","pos","THREE.Vector3","quaternion","THREE.Quaternion","THREE.Euler","setFromEuler","compose","applyMatrix4","computeVertexNormals","mesh","Brush","name","set","loadBunnyBrush","surfaceSampler","MeshSurfaceSampler","build","i","b","THREE.SphereGeometry","add","push","createBrushes","mat","brushResult","THREE.BufferGeometry","flatShading","castShadow","wireframeResult","THREE.MeshBasicMaterial","randomizeBrushes","updateCSG","createGUI","length","sample","position","matrixWorld","THREE.MathUtils","lerp","random","finalBrush","l","evaluate","ADDITION","map","get","m","gui","GUI","REVERSE_SUBTRACTION","INTERSECTION","DIFFERENCE","HOLLOW_SUBTRACTION","HOLLOW_INTERSECTION","onChange","randomize","domElement","style","_a","container","appendChild","modelAnimate","visible","forEach","containerRef","ref","camera","render","alpha","grid","axes","onMounted","value","run","useResize","resize"],"mappings":"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"}