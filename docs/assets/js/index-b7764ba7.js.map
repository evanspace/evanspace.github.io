{"version":3,"file":"index-b7764ba7.js","sources":["../../../code/src/pages/webgpu/bloom/emissive/data.ts","../../../code/src/pages/webgpu/bloom/emissive/methods.ts","../../../code/src/pages/webgpu/bloom/emissive/index.vue"],"sourcesContent":["const base = import.meta.env.VITE_BEFORE_STATIC_PATH\n\nexport const getPageOpts = () => ({\n  base,\n\n  models: [\n    {\n      key: 'helmet',\n      name: '头盔',\n      size: 3.4,\n      url: '/oss/model/gpu/头盔.glb'\n    }\n  ],\n\n  objects: [\n    {\n      type: 'helmet',\n      name: '头盔'\n    }\n  ]\n})\n","import * as THREE from 'three/webgpu'\nimport { bloom } from 'three/examples/jsm/tsl/display/BloomNode'\nimport * as ThreeScene from 'three-scene'\nimport { GUI } from 'dat.gui'\n\nconst { pass, mrt, output, emissive } = THREE.TSL\n\nexport class EmissiveScene extends ThreeScene.Scene {\n  gui: InstanceType<typeof GUI>\n\n  postProcessing: InstanceType<typeof THREE.PostProcessing>\n  constructor(options: ConstructorParameters<typeof ThreeScene.Scene>[0]) {\n    super(options)\n\n    // 场景合成\n    const scenePass = pass(this.scene, this.camera)\n    scenePass.setMRT(\n      mrt({\n        output,\n        emissive\n      })\n    )\n\n    const outputPass = scenePass.getTextureNode()\n    const emissivePass = scenePass.getTextureNode('emissive')\n\n    const bloomPass = bloom(emissivePass, 2.5, 0.5)\n\n    // 色调映射\n    this.renderer.toneMapping = THREE.NeutralToneMapping\n    const postProcessing = new THREE.PostProcessing(this.renderer)\n    postProcessing.outputNode = outputPass.add(bloomPass)\n\n    this.postProcessing = postProcessing\n\n    this.gui = new GUI()\n    this.addGui(bloomPass)\n  }\n\n  setEnv(texture: InstanceType<typeof THREE.DataTexture>) {\n    this.scene.environment = texture\n    this.scene.background = texture\n  }\n\n  createRender() {\n    return new THREE.WebGPURenderer()\n  }\n\n  createAmbientLight(color: string | number, intensity: number) {\n    return new THREE.AmbientLight(color, intensity)\n  }\n\n  createDirectionalLight(color: string | number, intensity: number) {\n    return new THREE.DirectionalLight(color, intensity)\n  }\n\n  addGui(bloomPass) {\n    const gui = this.gui\n\n    const bloomFolder = gui.addFolder('发光')\n    bloomFolder.add(bloomPass.threshold, 'value', 0, 1).step(0.01).name('阈值/起点')\n    bloomFolder.add(bloomPass.strength, 'value', 0, 3).step(0.01).name('强度')\n    bloomFolder.add(bloomPass.radius, 'value', 0, 1).step(0.01).name('半径')\n    bloomFolder.open()\n\n    const toneMappingFolder = gui.addFolder('色调映射')\n    toneMappingFolder.add(this.renderer, 'toneMappingExposure', 0.1, 3).name('曝光')\n    toneMappingFolder.open()\n\n    gui.domElement.className += ' gui-wrap'\n    this.container.parentNode?.appendChild(gui.domElement)\n  }\n\n  animate(): void {\n    this.postProcessing.renderAsync()\n  }\n}\n","<template>\n  <div class=\"three-page\">\n    <div class=\"h-100\" ref=\"containerRef\"></div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { getPageOpts } from './data'\nimport { EmissiveScene } from './methods'\nimport { useResize } from '@/hooks/scene-resize'\n\nimport { Hooks, Utils } from 'three-scene'\n\nconst pageOpts = reactive(getPageOpts())\nconst { progress, loadModels, getModel, initModels } = Hooks.useModelLoader({\n  baseUrl: pageOpts.base\n})\n\nconst containerRef = ref()\nconst options: ConstructorParameters<typeof EmissiveScene>[0] = {\n  baseUrl: pageOpts.base,\n  env: '/oss/textures/hdr/moonless_golf_1k.hdr',\n  camera: {\n    position: [0, 0, 10]\n  }\n}\nlet scene: InstanceType<typeof EmissiveScene>\n\nconst initPage = () => {\n  loadModels(pageOpts.models, () => {\n    // 加载进度 100\n    progress.percentage = 100\n    progress.show = false\n\n    // 初始化模型\n    initModels(pageOpts.objects, item => {\n      const { type } = item\n      const obj = getModel(type)\n      if (!obj) return Promise.resolve()\n\n      // 深克隆\n      let model = Utils.modelDeepClone(obj)\n      const { position: POS, scale: SCA, rotation: ROT } = Utils.get_P_S_R_param(model, item)\n      const [x, y, z] = POS\n\n      // 缩放\n      model.scale.set(...SCA)\n\n      // 摆放位置\n      model.position.set(x, y, z)\n      // 转换方位\n      model.rotation.set(...ROT)\n\n      scene.addObject(model)\n      return Promise.resolve()\n    })\n  })\n}\n\nonMounted(() => {\n  options.container = containerRef.value\n  scene = new EmissiveScene(options).run()\n\n  useResize(scene).resize()\n\n  initPage()\n})\n</script>\n\n<style lang=\"scss\"></style>\n"],"names":["pass","mrt","output","emissive","THREE.TSL","EmissiveScene","ThreeScene.Scene","constructor","options","super","__publicField","this","scenePass","scene","camera","setMRT","outputPass","getTextureNode","emissivePass","bloomPass","bloom","renderer","toneMapping","THREE.NeutralToneMapping","postProcessing","THREE.PostProcessing","outputNode","add","gui","GUI","addGui","setEnv","texture","environment","background","createRender","THREE.WebGPURenderer","createAmbientLight","color","intensity","THREE.AmbientLight","createDirectionalLight","THREE.DirectionalLight","bloomFolder","addFolder","threshold","step","name","strength","radius","open","toneMappingFolder","domElement","className","_a","container","parentNode","appendChild","animate","renderAsync","pageOpts","reactive","base","models","key","size","url","objects","type","progress","loadModels","getModel","initModels","Hooks","useModelLoader","baseUrl","containerRef","ref","env","position","onMounted","value","run","useResize","resize","percentage","show","item","obj","Promise","resolve","model","Utils","modelDeepClone","POS","scale","SCA","rotation","ROT","get_P_S_R_param","x","y","z","set","addObject"],"mappings":"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"}