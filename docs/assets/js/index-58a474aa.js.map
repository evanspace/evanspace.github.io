{"version":3,"mappings":"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","names":["MusicFileLoader","constructor","load","url","onLoad","onProgress","onError","req","Request","headers","Headers","credentials","fetch","then","response","status","reader","body","getReader","contentLength","get","total","parseInt","lengthComputable","loaded","ReadableStream","start","controller","readData","read","done","value","close","byteLength","event","ProgressEvent","enqueue","Error","statusText","stream","Response","text","data","res","this","formste","catch","er","lyric","lrcObj","ti","ar","al","by","offset","lrc","split","filter","trim","map","line","parseLyricLine","type","push","rgx","RegExp","forEach","item","index","nextTsp","tsp","duration","Number","toString","match","result","m","s","ms","time","timeDispose","minutes","seconds","_REG_","modulesFiles","assign","__vitePreload","import","audios","Object","entries","path","replace","mysong","ref","cvs","control","reactive","src","totalTime","currentTime","process","volume","audio","list","name","show","active","color","predefineColors","__play__","__isAudio__","__isMic__","onPlay","_a","play","__timer__","playProgress","clearInterval","setInterval","calcProcess","_b","onCutSong","findLyricIndex","findIndex","it","analyser","micAnalyser","buffer","initAudioAnalyser","audioContext","AudioContext2","window","AudioContext","createAnalyser","Uint8Array","frequencyBinCount","createMediaElementSource","connect","destination","__animationId__","update","_analyser","requestAnimationFrame","getByteFrequencyData","Math","floor","length","datas","Array","i","draw","maxValue","max","canvas","w","width","h","height","context","getContext","lineWidth","clearRect","arc","min","len","cArc","maxLen","count","step","round","x","beginPath","r","strokeStyle","save","translate","rotate","PI","moveTo","lineTo","closePath","stroke","restore","onPause","pause","cut","onAssinSong","keys","key","nextTick","onFast","onVolume","onGetMicrophone","navigator","mediaDevices","getUserMedia","_stream","analyser2","createMediaStreamSource","console","log","onCloseMicrophone","getAudioTracks","track","stop","autoPlayAudio","canAutoPlay","state","onKeydown","e","keyCode","ctrlKey","initCanvas","pm","parentNode","offsetWidth","offsetHeight","onMounted","fill","addEventListener","onBeforeUnmount","cancelAnimationFrame","removeEventListener"],"sources":["../../../code/src/pages/media/music-player/methods.ts","../../../code/src/pages/media/music-player/index.vue"],"sourcesContent":["\n\nexport class MusicFileLoader {\n\n\tconstructor() {\n\t}\n\n  load( url, onLoad, onProgress?, onError? ) {\n    // start the fetch\n\t\tconst req = new Request( url, {\n\t\t\theaders: new Headers( {} ),\n\t\t\tcredentials: 'same-origin',\n\t\t} )\n    fetch( req )\n    .then( ( response: any ) => {\n      if ( response.status == 200 || response.status === 0 ) {\n        const reader = response.body.getReader()\n        const contentLength = response.headers.get( 'Content-Length' )\n        const total = contentLength ? parseInt( contentLength ) : 0\n        const lengthComputable = total !== 0\n        let loaded = 0\n        return new ReadableStream( {\n          start( controller ) {\n            readData()\n            function readData() {\n              reader.read().then( ( { done, value } ) => {\n                if ( done ) {\n                  controller.close()\n                } else {\n                  loaded += value.byteLength\n                  const event = new ProgressEvent( 'progress', { lengthComputable, loaded, total } )\n                  if ( onProgress ) onProgress( event )\n                  controller.enqueue( value )\n                  readData()\n                }\n              } )\n            }\n          }\n        } )\n      } else {\n        throw Error( `fetch for \"${ response.url }\" responded with ${ response.status }: ${ response.statusText }` )\n      }\n    } )\n    .then( stream => {\n      const response = new Response( stream )\n      return response.text()\n    } )\n    .then( data => {\n      const res = this.formste( data )\n      if ( res ) {\n        if ( onLoad ) onLoad( res )\n      } else {\n        throw Error( `文件格式不对!` )\n      }\n    } )\n    .catch( er => {\n      if ( onError ) onError( er )\n    } )\n  }\n\n  formste( lyric ) {\n    const lrcObj: any = {\n      ti: '',    // 曲名\n      ar: '',    // 艺人\n      al: '',    // 专辑\n      by: '',    // 编者\n      offset: 0, // 歌词偏移时间\n      lrc: []\n    }\n    lyric.split( '\\n' ).filter( value => {\n      // 1.通过回车去分割歌词每一行,遍历数组，去除空行空格\n      return value.trim() !== ''\n    } ).map( value => {\n        // 2.解析歌词\n        const line = this.parseLyricLine( value.trim() )\n        if ( !line ) return false\n        if ( line.type === 'lyric' ) {\n            lrcObj.lrc.push( line.data )\n        } else {\n            lrcObj[ line.type ] = line.data\n        }\n        return value.trim()\n    } )\n    let rgx = new RegExp( `^\\\\d+(?:\\\\.\\\\d{0,${ 3 }})?` )\n    lrcObj.lrc.forEach( ( item, index ) => {\n      const nextTsp = ( lrcObj.lrc[ index + 1 ] || {} ).tsp\n      let duration = nextTsp ? nextTsp - item.tsp : 2\n      duration = Number( duration.toString().match( rgx ) )\n      item.duration = duration\n    } )\n    return lrcObj\n  }\n\n  parseLyricLine( line ) {\n    const tiArAlByExp = /^\\[(ti|ar|al|by|offset):(.*)\\]$/\n    const lyricExp = /^\\[(\\d{2}):(\\d{2}).(\\d{2})\\](.*)/\n    let result\n    if ( ( result = line.match( tiArAlByExp ) ) !== null ) {\n      return {\n        type: result[ 1 ],\n        data: result[ 2 ]\n      }\n    } else if ( ( result = line.match( lyricExp ) ) !== null ) {\n      const m = Number( result[ 1 ] )\n      const s = Number( result[ 2 ] )\n      const ms = Number( result[ 3 ] )\n      return {\n        type: 'lyric',\n        data: {\n          time: {\n            m,\n            s,\n            ms\n          },\n          tsp: ( ( m * 60 * 1000 ) + ( s * 1000 ) + ms ) / 1000,\n          lyric: result[ 4 ].trim()\n        }\n      }\n    }\n  }\n}\n\n// 时间\nexport const timeDispose = ( time: number ) => {\n  let minutes: any = parseInt( ( time / 60 ).toString() )\n  let seconds: any = parseInt( ( time % 60 ).toString() )\n  minutes = minutes > 9 ? minutes : '0' + minutes\n  seconds = seconds > 9 ? seconds : '0' + seconds\n  return minutes + ':' + seconds\n}\n","<template>\n  <div class=\"page\">\n\n    <div class=\"music-box\">\n      <!-- 方法一：将音频文件放在static目录中，然后进行调用 -->\n      <!-- 方法二：给项目配置mp3格式的解析器 -->\n      <audio :src=\"control.src\" ref=\"mysong\" controls></audio>\n\n      <div class=\"left-control\">\n        <el-link :underline=\"false\" type=\"info\" @click.stop=\"onCutSong( -1 )\">\n          <icon-ep-d-arrow-left/>\n        </el-link>\n        <el-link title=\"快退\" :underline=\"false\" type=\"info\" @click=\"onFast( -10 )\">\n          <icon-ep-arrow-left/>\n        </el-link>\n        <el-link title=\"播放\" :underline=\"false\" type=\"info\" @click=\"onPlay\">\n          <icon-ep-video-play/>\n        </el-link>\n        <el-link title=\"暂停\" :underline=\"false\" type=\"info\" @click=\"onPause\">\n          <icon-ep-video-pause/>\n        </el-link>\n        <el-link title=\"快进\" :underline=\"false\" type=\"info\" @click=\"onFast( 10 )\">\n          <icon-ep-arrow-right/>\n        </el-link>\n        <el-link title=\"下一首\" :underline=\"false\" type=\"info\" @click=\"onCutSong( 1 )\">\n          <icon-ep-d-arrow-right/>\n        </el-link>\n      </div>\n\n      <div class=\"process-control\">\n        <div class=\"up\">\n          <div class=\"music-name\">{{ audio.name }}</div>\n          <div class=\"time\">\n            <span class=\"cu\">{{ timeDispose( control.currentTime ) }}</span>\n            <span class=\"line\"></span>\n            <span class=\"total\">{{ timeDispose( control.totalTime ) }}</span>\n          </div>\n        </div>\n        <div class=\"progress\">\n          <div class=\"bar\" :style=\"{ width: control.process + '%' }\"></div>\n        </div>\n      </div>\n\n      <div class=\"right-control\">\n        <div class=\"min\" title=\"音量-\" @click=\"onVolume( -.1 )\"></div>\n        <div class=\"progress\">\n          <div class=\"bar\" :style=\"{ width: control.volume + '%' }\"></div>\n        </div>\n        <div class=\"max\" title=\"音量+\" @click=\"onVolume( .1 )\"></div>\n\n        <el-link title=\"歌单\" :underline=\"false\" type=\"info\" @click.stop=\"audio.show = !audio.show\">\n          <icon-ep-menu />\n        </el-link>\n        <el-link title=\"麦克风\" :underline=\"false\" type=\"info\" @click.stop=\"onGetMicrophone\">\n          <icon-ep-mic />\n        </el-link>\n\n        <el-color-picker\n          title=\"歌词颜色\"\n          v-model=\"color\"\n          show-alpha\n          size=\"small\"\n          :style=\"{ marginLeft: '4px' }\"\n          :predefine=\"predefineColors\">\n        </el-color-picker>\n\n      </div>\n\n      <transition name=\"el-zoom-in-bottom\">\n        <div class=\"music-list\" v-show=\"audio.show\">\n          <div\n            v-for=\"( name, index ) in audio.list\"\n            :key=\"index\"\n            class=\"item\"\n            :class=\"{ 'is-active': index == audio.index }\"\n            @click.stop=\"onAssinSong( index )\"\n          >{{ name }}</div>\n        </div>\n      </transition>\n\n    </div>\n\n\n    <div class=\"canvas-box\">\n\n      <!-- 歌词 -->\n      <div class=\"lrc-box\">\n        <div\n          class=\"move\"\n          :style=\"{\n            top: `-${ lrcObj.active * 30 }px`,\n            '--color': color\n          }\"\n        >\n          <div class=\"list\">\n            <div\n              v-for=\"( item, index ) in lrcObj.lrc\"\n              :key=\"index\"\n              class=\"item\"\n              :style=\"{\n                '--time': item.duration + 's'\n              }\"\n            >\n              <span class=\"w\">\n                {{ item.lyric }}\n                <span v-if=\"index == lrcObj.active\" :key=\"index\" class=\"c\" :style=\"{ animationPlayState: control.status == 'paused' ? 'paused' : ''  }\">{{ item.lyric }}</span>\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- 画布 -->\n      <canvas ref=\"cvs\"></canvas>\n    </div>\n\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { nextTick } from 'vue';\nimport { MusicFileLoader, timeDispose } from './methods'\n\nlet _REG_ = /\\.(mp3|ogg)$/\nconst modulesFiles = import.meta.glob( '../../../../public/audio/*.(mp3|ogg)' )\nconst audios = Object.entries( modulesFiles ).map( ( [ path ] ) => {\n  const filename = ( ( path || '' ).match(/\\/([^\\/]+)\\.\\w+$/) || [''] )[ 0 ].replace( /\\//, '')\n  return filename\n} )\n\nconst mysong = ref()\nconst cvs = ref()\n// 控制器\nconst control = reactive( {\n  src: '',\n  status: '',\n  totalTime: 0,\n  currentTime: 0,\n  process: 0,\n  volume: 100,\n} )\n\n// 音乐\nconst audio = reactive( {\n  list: audios,\n  index: -1,\n  name: '',\n  show: false,\n} )\n\n// 歌词\nconst lrcObj = reactive<any>( {\n  al: '',\n  lrc: [],\n  active: 0,\n} )\n\n// 颜色\nconst color =  ref( '#ff4500' )\nconst predefineColors = ref( [\n  '#0add31', '#ff4500', '#ff8c00',\n  '#ffd700', '#90ee90', '#00ced1',\n  '#1e90ff', '#c71585', 'rgba(255, 69, 0, 0.68)',\n  'rgb(255, 120, 0)', 'hsv(51, 100, 98)', 'hsva(120, 40, 94, 0.5)',\n  'hsl(181, 100%, 37%)', 'hsla(209, 100%, 56%, 0.73)',\n  '#c7158577'\n] )\n\n// 播放 音乐 麦克风\nlet __play__ = false\nlet __isAudio__ = false\nlet __isMic__ = false\n// 播放\nconst onPlay = () => {\n  mysong.value?.play()\n  __play__ = true\n  playProgress()\n  control.status = 'play'\n\n  if ( __isAudio__ ) return\n\n  initAudioAnalyser()\n\n  __isAudio__ = true\n  update()\n}\n\n// 播放进度\nlet __timer__: any\nconst playProgress = () => {\n  clearInterval( __timer__ )\n  __timer__ = setInterval( calcProcess, 300 )\n}\n\n// 计算当前进度\nconst calcProcess = () => {\n  let currentTime = mysong.value?.currentTime || 0\n  let duration = mysong.value?.duration || 0\n  control.totalTime = duration\n  control.currentTime = currentTime\n  control.process = currentTime / duration * 100\n\n  findLyricIndex()\n  // 当前播放完毕\n  if ( duration > 0 && currentTime == duration ) {\n    onCutSong( 1 )\n  }\n}\n\n// 查找歌词位置\nconst findLyricIndex = () => {\n  if ( !mysong.value ) return\n  if ( control.status !== 'play' ) return\n  let currentTime = mysong.value.currentTime || 0\n  const index = lrcObj.lrc.findIndex( it => it.tsp <=  currentTime && currentTime <= it.tsp + it.duration )\n  if ( index == lrcObj.active ) return\n  lrcObj.active = index\n}\n\n// 初始化音频\nlet analyser: any\nlet micAnalyser: any\nlet buffer: any\nconst initAudioAnalyser = () => {\n  // 创建音频上下文\n  const AudioContext = window.AudioContext\n  const audioContext = new AudioContext()\n  // 创建音频分析节点\n  analyser = audioContext.createAnalyser()\n  // analyser.fftSize = 1024\n\n  // 存储频谱数据，Uint8Array 数组创建的时候必须制定长度，\n  // 长度就从 analyser.frequencyBinCount里面获取，长度是fftSize 一半\n  buffer = new Uint8Array( analyser.frequencyBinCount )\n\n  // 创建输入源\n  let source = audioContext.createMediaElementSource( mysong.value )\n  // 连接：source → analyser → destination\n  source.connect( analyser )\n  //声音连接到扬声器\n  analyser.connect( audioContext.destination )\n}\n\n// 更新\nlet __animationId__: any\nconst update = () => {\n  __animationId__ = requestAnimationFrame( update )\n  let _analyser\n  if ( __isAudio__ ) _analyser = analyser\n  if ( __isMic__ ) _analyser = micAnalyser\n  if ( !_analyser ) return\n\n  // 获取音频分析数据\n  _analyser.getByteFrequencyData( buffer )\n  // 音频数据后面基本为0 取一部分\n  const offset = Math.floor( buffer.length * 2 / 3 )\n  // 为了效果对称取双倍\n  const datas = new Array( offset * 2 )\n  for ( let i = 0; i < offset; i++ ) {\n    datas[ i ] = datas[ datas.length - i - 1 ] = buffer[ i ]\n  }\n  draw( datas, 255, 250 )\n}\n\n// 绘图\nconst draw = ( datas, maxValue, max = 100 ) => {\n  const canvas = cvs.value, w = canvas.width, h = canvas.height\n  const context = canvas.getContext( '2d' )\n  // 设置线条宽度\n  context.lineWidth = 2\n\n  // 每次要清除画布\n  context.clearRect( 0, 0, w, h )\n  // 半径\n  const arc = Math.min( w, h ) / 2\n  // 圆形背景\n  // context.arc( w / 2, h / 2, arc, 0, 2 * Math.PI )\n  // context.fillStyle = 'rgba(255,255,255,.1)'\n  // context.fill()\n\n  const len = datas.length\n  // 内圈半径\n  const cArc = parseInt( ( arc * .5 ).toString() )\n  // 可用最长度\n  const maxLen = parseInt( ( arc * .99 - cArc ).toString() )\n  // 能量柱个数,不能大于数组长度\n  const count = Math.min( max, len )\n  // 步数\n  const step = Math.round( len / count )\n  for ( let i = 0; i < count; i ++ ) {\n    const value = datas[ i * step + step ]\n    // 换算点位置 最小为1 不至于没声音时没有\n    const x = parseInt( ( maxLen * ( value / maxValue ) ).toString() ) || 1\n    // 开始一条路径\n    context.beginPath()\n    // 设置画笔颜色，hsl通过这个公式出来的是很漂亮的彩虹色\n    // H：Hue(色调)。0(或360)表示红色，120表示绿色，240表示蓝色，\n    //   也可取其他数值来指定颜色。取值为：0 - 360\n    // S：Saturation(饱和度)。取值为：0.0% - 100.0%\n    // L：Lightness(亮度)。取值为：0.0% - 100.0%\n    // context.strokeStyle = `hsl( ${ 360 - value }, 100%, 50%)`\n    // const r = parseInt( 360 - 360 * ( value / 360 ) )\n    const r = Math.round( i * 360 / count )\n    context.strokeStyle = `hsla(${r}, 100%, 50%, 1)`\n\n    context.save()\n    // 改变起点位置\n    context.translate( w / 2, h / 2)\n    // 旋转\n    context.rotate( i * Math.PI * 2 / count - Math.PI * .5 )\n    context.moveTo( 0, cArc )\n    context.lineTo( 0, cArc + x )\n\n    // stroke方法才是真正的绘制方法,顺便也相当于结束了这次的绘画路径,就不用调用closePath方法了\n    // 之前的是水平排布显示条块，不需要 但此处是做了圆圈布局显示需要闭合一下如果不闭合。会出现收尾相连进行描绘的操作。既会出现白色的条块显示bug\n    context.closePath()\n    context.stroke()\n    context.restore()\n  }\n}\n\n// 暂停\nconst onPause = () => {\n  __play__ = false\n  mysong.value?.pause()\n  control.status = 'paused'\n  clearInterval( __timer__ )\n}\n\n// 切歌\nconst onCutSong = ( cut = 1 ) => {\n  let index = audio.index\n  index += cut\n  const len = audio.list.length\n  if ( index >= len ) {\n    index = 0\n  } else if ( index < 0 ) {\n    index = len - 1\n  }\n  onAssinSong( index )\n}\n\nconst base = import.meta.env.VITE_BEFORE_STATIC_PATH\n// 指定歌曲\nconst onAssinSong = ( index = 0 ) => {\n  if ( audio.index == index ) return\n  audio.index = index\n  // 播放地址\n  let name = audio.list[ index ]\n  control.src = `${ base }/audio/${ name }`\n  name = name.replace( _REG_, '' )\n  audio.name = name\n  const lrc = `${ base }/audio/${ name }.lrc`\n\n  lrcObj.active = -1\n  new MusicFileLoader().load( lrc, data => {\n    Object.keys( data ).forEach( key => {\n      lrcObj[ key ] = data[ key ]\n    } )\n  }, void 0, () => {\n    Object.keys( lrcObj ).forEach( key => {\n      lrcObj[ key ] = key == 'lrc' ? [] : key == 'active' ? 0 : ''\n    } )\n  } )\n\n  if ( __isAudio__ ) {\n    nextTick( () => {\n      mysong.value?.play()\n    } )\n  }\n}\n\n// 快进\nconst onFast = ( seconds = 0 ) => {\n  mysong.value.currentTime += seconds\n  calcProcess()\n}\n\n// 音量\nconst onVolume = ( step = .1 ) => {\n  let volume = mysong.value.volume\n  volume += step\n  if ( volume > 1 ) {\n    volume = 1\n  } else if ( volume < 0 ) {\n    volume = 0\n  }\n  mysong.value.volume = volume\n  control.volume = volume * 100\n\n}\n\n// 麦克风\nlet stream: any\nconst onGetMicrophone = () => {\n  if ( !navigator.mediaDevices ) {\n    console.log('获取麦克风失败!')\n    return\n  }\n  if ( __isMic__ ) {\n    onCloseMicrophone()\n    onPlay()\n    return\n  } else {\n    onPause()\n  }\n  navigator.mediaDevices.getUserMedia( { audio: true } )\n  .then( _stream => {\n    stream = _stream\n\n    // 创建音频上下文\n    const AudioContext = window.AudioContext\n    const audioContext = new AudioContext()\n    // 创建音频分析节点\n    const analyser = audioContext.createAnalyser()\n    // analyser.fftSize = 1024\n    micAnalyser = analyser\n\n    // 存储频谱数据，Uint8Array 数组创建的时候必须制定长度，\n    // 长度就从 analyser.frequencyBinCount里面获取，长度是fftSize 一半\n    buffer = new Uint8Array( analyser.frequencyBinCount )\n\n    // 创建输入源\n    let source = audioContext.createMediaStreamSource( stream )\n    // 连接：source → analyser → destination\n    source.connect( analyser )\n    //声音连接到扬声器\n    analyser.connect( audioContext.destination )\n\n    __isMic__ = true\n\n    update()\n  } )\n}\n\n// 关闭麦克风\nconst onCloseMicrophone = () => {\n  if ( !stream ) return\n  __isMic__ = false\n  stream.getAudioTracks().forEach( track => {\n    track.stop()\n  } )\n}\n\n// 自动播放\nconst autoPlayAudio = () => {\n  // 音频上下文\n  const ctx = new AudioContext()\n  // 是否可自动播放\n  const canAutoPlay = ctx.state === 'running'\n  console.log('是否可自动播放', canAutoPlay)\n\n  __play__ = canAutoPlay\n  if ( canAutoPlay ) {\n    onPlay()\n  }\n}\n\nconst onKeydown = ( e ) => {\n  const code = e.keyCode\n  switch( code ) {\n    case 32: // 空格\n      if ( __play__ ) {\n        onPause()\n      } else {\n        onPlay()\n      }\n      break\n    case 37:  // 左箭头\n      // Ctrl 键是否被按下\n      if ( e.ctrlKey ) {\n        onCutSong( -1 )\n      } else {\n        onFast( -10 )\n      }\n      break\n    case 39:  // 右箭头\n      // Ctrl 键是否被按下\n      if ( e.ctrlKey ) {\n        onCutSong( 1 )\n      } else {\n        onFast( 10 )\n      }\n      break\n\n  }\n\n}\n\n// 初始化 画布\nconst initCanvas = () => {\n  const canvas = cvs.value\n  const pm = canvas.parentNode, w = pm.offsetWidth, h = pm.offsetHeight\n  canvas.width = w\n  canvas.height = h\n}\n\nconst initPlayer = () => {\n  onAssinSong( 1 )\n  nextTick( autoPlayAudio )\n\n  initCanvas()\n\n  let datas = new Array( 256 ).fill( 0 )\n  draw( datas, 255, 190 )\n}\n\nonMounted( () =>{\n  initPlayer ()\n  \n  window.addEventListener( 'resize', initCanvas )\n  window.addEventListener( 'keydown', onKeydown )\n})\nonBeforeUnmount(() => {\n  clearInterval( __timer__ )\n  cancelAnimationFrame( __animationId__ ) // 停止动画\n  window.removeEventListener( 'resize', initCanvas )\n  window.removeEventListener( 'keydown', onKeydown )\n})\n</script>\n  \n<style lang=\"scss\" src=\"./style.scss\" scoped>\n</style>"],"file":"assets/js/index-58a474aa.js"}