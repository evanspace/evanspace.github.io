{"version":3,"file":"index-ed775193.js","sources":["../../../code/src/pages/webgpu/bloom/selective/methods.ts","../../../code/src/pages/webgpu/bloom/selective/index.vue"],"sourcesContent":["import * as THREE from 'three/webgpu'\nimport { bloom } from 'three/examples/jsm/tsl/display/BloomNode'\nimport * as ThreeScene from 'three-scene'\nimport { GUI } from 'dat.gui'\n\nconst { pass, mrt, output, float, uniform } = THREE.TSL\n\nconst { pointer, update, raycaster } = ThreeScene.Hooks.useRaycaster()\n\nexport class SelectiveScene extends ThreeScene.Scene {\n  gui: InstanceType<typeof GUI>\n\n  postProcessing: InstanceType<typeof THREE.PostProcessing>\n  constructor(options: ConstructorParameters<typeof ThreeScene.Scene>[0]) {\n    super(options)\n\n    this.addModel()\n\n    // 场景合成\n    const scenePass = pass(this.scene, this.camera)\n    scenePass.setMRT(\n      mrt({\n        output,\n        bloomIntensity: float(0)\n      })\n    )\n\n    const outputPass = scenePass.getTextureNode()\n    const bloomIntensityPass = scenePass.getTextureNode('bloomIntensity')\n\n    const bloomPass = bloom(outputPass.mul(bloomIntensityPass))\n\n    // 色调映射\n    this.renderer.toneMapping = THREE.NeutralToneMapping\n    const postProcessing = new THREE.PostProcessing(this.renderer)\n    postProcessing.outputColorTransform = false\n    postProcessing.outputNode = outputPass.add(bloomPass).renderOutput()\n    this.postProcessing = postProcessing\n\n    this.gui = new GUI()\n    this.addGui(bloomPass)\n\n    this.bindEvent()\n  }\n\n  createAmbientLight(color: string | number, intensity: number) {\n    return new THREE.AmbientLight(color, intensity)\n  }\n\n  createDirectionalLight(color: string | number, intensity: number) {\n    return new THREE.DirectionalLight(color, intensity)\n  }\n\n  createRender() {\n    return new THREE.WebGPURenderer()\n  }\n\n  addModel() {\n    // 20 面几何体\n    const geometry = new THREE.IcosahedronGeometry(1, 15)\n\n    for (let i = 0; i < 50; i++) {\n      // 随机颜色\n      const color = new THREE.Color()\n      color.setHSL(Math.random(), 0.7, Math.random() * 0.2 + 0.05)\n\n      // 发光强度\n      const bloomIntensity = Math.random() > 0.5 ? 1 : 0\n\n      const material = new THREE.MeshBasicNodeMaterial({\n        color: color\n      })\n      material.mrtNode = mrt({\n        bloomIntensity: uniform(bloomIntensity)\n      })\n\n      const sphere = new THREE.Mesh(geometry, material)\n      sphere.position.set(Math.random() * 10 - 5, Math.random() * 10 - 5, Math.random() * 10 - 5)\n\n      // normalize 转换为单位向量\n      sphere.position.normalize().multiplyScalar(Math.random() * 20 + 10)\n      sphere.scale.setScalar(Math.random() * 4 + 3)\n      this.addObject(sphere)\n    }\n  }\n\n  onPointerDown(e) {\n    update(e, this.container)\n    raycaster.setFromCamera(pointer, this.camera)\n\n    const intersects = raycaster.intersectObjects(this.scene.children, false)\n    if (intersects.length > 0) {\n      // @ts-ignore\n      const material = intersects[0].object.material\n      // 发光强度\n      const bloomIntensity = material.mrtNode.get('bloomIntensity')\n      bloomIntensity.value = bloomIntensity.value === 0 ? 1 : 0\n    }\n  }\n\n  addGui(bloomPass) {\n    const gui = this.gui\n\n    const bloomFolder = gui.addFolder('发光')\n    bloomFolder.add(bloomPass.threshold, 'value', 0, 1).step(0.01).name('阈值/起点')\n    bloomFolder.add(bloomPass.strength, 'value', 0, 3).step(0.01).name('强度')\n    bloomFolder.add(bloomPass.radius, 'value', 0, 1).step(0.01).name('半径')\n    bloomFolder.open()\n\n    const toneMappingFolder = gui.addFolder('色调映射')\n    toneMappingFolder.add(this.renderer, 'toneMappingExposure', 0.1, 3).name('曝光')\n    toneMappingFolder.open()\n\n    gui.domElement.className += ' gui-wrap'\n    this.container.parentNode?.appendChild(gui.domElement)\n  }\n\n  animate(): void {\n    this.postProcessing.renderAsync()\n  }\n}\n","<template>\n  <div class=\"three-page\">\n    <div class=\"h-100\" ref=\"containerRef\"></div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { SelectiveScene } from './methods'\nimport { useResize } from '@/hooks/scene-resize'\n\nconst containerRef = ref()\nconst options: ConstructorParameters<typeof SelectiveScene>[0] = {\n  camera: {\n    position: [0, 0, 100]\n  }\n}\nlet scene: InstanceType<typeof SelectiveScene>\n\nonMounted(() => {\n  options.container = containerRef.value\n  scene = new SelectiveScene(options).run()\n\n  useResize(scene).resize()\n})\n</script>\n\n<style lang=\"scss\"></style>\n"],"names":["pass","mrt","output","float","uniform","THREE.TSL","pointer","update","raycaster","ThreeScene.Hooks","useRaycaster","SelectiveScene","ThreeScene.Scene","constructor","options","super","__publicField","this","addModel","scenePass","scene","camera","setMRT","bloomIntensity","outputPass","getTextureNode","bloomIntensityPass","bloomPass","bloom","mul","renderer","toneMapping","THREE.NeutralToneMapping","postProcessing","THREE.PostProcessing","outputColorTransform","outputNode","add","renderOutput","gui","GUI","addGui","bindEvent","createAmbientLight","color","intensity","THREE.AmbientLight","createDirectionalLight","THREE.DirectionalLight","createRender","THREE.WebGPURenderer","geometry","THREE.IcosahedronGeometry","i","THREE.Color","setHSL","Math","random","material","THREE.MeshBasicNodeMaterial","mrtNode","sphere","THREE.Mesh","position","set","normalize","multiplyScalar","scale","setScalar","addObject","onPointerDown","e","container","setFromCamera","intersects","intersectObjects","children","length","object","get","value","bloomFolder","addFolder","threshold","step","name","strength","radius","open","toneMappingFolder","domElement","className","_a","parentNode","appendChild","animate","renderAsync","containerRef","ref","onMounted","run","useResize","resize"],"mappings":"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"}