{"version":3,"file":"index-0d39f4c3.js","sources":["../../../code/src/pages/webgl/light/rectarea/methods.ts","../../../code/src/pages/webgl/light/rectarea/index.vue"],"sourcesContent":["import * as THREE from 'three'\nimport * as ThreeScene from 'three-scene'\nimport { RectAreaLightHelper } from 'three/examples/jsm/helpers/RectAreaLightHelper'\nimport { RectAreaLightUniformsLib } from 'three/examples/jsm/lights/RectAreaLightUniformsLib'\n\nimport { GUI } from 'dat.gui'\n\nexport class RectareaScene extends ThreeScene.Scene {\n  gui: InstanceType<typeof GUI>\n  meshKnot: InstanceType<typeof THREE.Mesh>\n  constructor(options: ConstructorParameters<typeof ThreeScene.Scene>[0]) {\n    super(options)\n\n    const gui = new GUI()\n    this.gui = gui\n\n    gui.domElement.className += ' gui-wrap'\n    this.container.parentNode?.appendChild(gui.domElement)\n\n    RectAreaLightUniformsLib.init()\n\n    // 面光 (颜色、强度、宽度、高度)\n    const rectLight1 = new THREE.RectAreaLight(0xff0000, 5, 4, 10)\n    rectLight1.position.set(-5, 5, 5)\n    this.addObject(rectLight1)\n\n    const rectLight2 = new THREE.RectAreaLight(0x00ff00, 5, 4, 10)\n    rectLight2.position.set(0, 5, 5)\n    this.addObject(rectLight2)\n\n    const rectLight3 = new THREE.RectAreaLight(0x0000ff, 5, 4, 10)\n    rectLight3.position.set(5, 5, 5)\n    this.addObject(rectLight3)\n\n    const rectLightHelper1 = new RectAreaLightHelper(rectLight1)\n    const rectLightHelper2 = new RectAreaLightHelper(rectLight2)\n    const rectLightHelper3 = new RectAreaLightHelper(rectLight3)\n    this.addObject(rectLightHelper1, rectLightHelper2, rectLightHelper3)\n\n    this.addGui(rectLight1, '面光 1')\n    this.addGui(rectLight2, '面光 2')\n    this.addGui(rectLight3, '面光 3')\n\n    // 地面\n    const geoFloor = new THREE.BoxGeometry(2000, 0.1, 2000)\n    const matStdFloor = new THREE.MeshStandardMaterial({\n      color: 0xbcbcbc,\n      roughness: 0.1,\n      metalness: 0\n    })\n    const mshStdFloor = new THREE.Mesh(geoFloor, matStdFloor)\n    this.addObject(mshStdFloor)\n\n    // 环形扭曲\n    const geoKnot = new THREE.TorusKnotGeometry(1.5, 0.5, 200, 16)\n    const matKnot = new THREE.MeshStandardMaterial({ color: 0xffffff, roughness: 0, metalness: 0 })\n    const meshKnot = new THREE.Mesh(geoKnot, matKnot)\n    meshKnot.position.set(0, 5, 0)\n    this.meshKnot = meshKnot\n    this.addObject(meshKnot)\n  }\n\n  addGui(light, name) {\n    const gui = this.gui\n\n    gui\n      .addColor({ color: light.color.getHex() }, 'color')\n      .name(name)\n      .onChange(v => {\n        light.color.set(v)\n      })\n  }\n\n  modelAnimate(): void {\n    this.meshKnot.rotation.y = Date.now() / 1000\n  }\n}\n","<template>\n  <div class=\"three-page\">\n    <div class=\"h-100\" ref=\"containerRef\"></div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { RectareaScene } from './methods'\n\nimport { useResize } from '@/hooks/scene-resize'\n\nconst containerRef = ref()\nconst options: ConstructorParameters<typeof RectareaScene>[0] = {\n  ambientLight: {\n    visible: false\n  },\n  directionalLight: {\n    visible: false\n  },\n  camera: {\n    position: [0, 5, -35]\n  }\n}\nlet scene: InstanceType<typeof RectareaScene>\n\nonMounted(() => {\n  options.container = containerRef.value\n  scene = new RectareaScene(options)\n  scene.run()\n\n  useResize(scene).resize()\n})\n</script>\n\n<style lang=\"scss\"></style>\n"],"names":["RectareaScene","ThreeScene.Scene","constructor","options","super","__publicField","this","gui","GUI","domElement","className","_a","container","parentNode","appendChild","RectAreaLightUniformsLib","init","rectLight1","THREE.RectAreaLight","position","set","addObject","rectLight2","rectLight3","rectLightHelper1","RectAreaLightHelper","rectLightHelper2","rectLightHelper3","addGui","geoFloor","THREE.BoxGeometry","matStdFloor","THREE.MeshStandardMaterial","color","roughness","metalness","mshStdFloor","THREE.Mesh","geoKnot","THREE.TorusKnotGeometry","matKnot","meshKnot","light","name","addColor","getHex","onChange","v","modelAnimate","rotation","y","Date","now","containerRef","ref","ambientLight","visible","directionalLight","camera","scene","onMounted","value","run","useResize","resize"],"mappings":"8XAOa,MAAAA,UAAsBC,EAGjC,WAAAC,CAAYC,SACVC,MAAMD,GAHRE,EAAAC,KAAA,OACAD,EAAAC,KAAA,YAIQ,MAAAC,EAAM,IAAIC,EAChBF,KAAKC,IAAMA,EAEXA,EAAIE,WAAWC,WAAa,YAC5B,OAAAC,EAAAL,KAAKM,UAAUC,aAAYF,EAAAG,YAAYP,EAAIE,YAE3CM,EAAyBC,OAGzB,MAAMC,EAAa,IAAIC,EAAoB,SAAU,EAAG,EAAG,IAC3DD,EAAWE,SAASC,KAAQ,EAAA,EAAG,GAC/Bd,KAAKe,UAAUJ,GAEf,MAAMK,EAAa,IAAIJ,EAAoB,MAAU,EAAG,EAAG,IAC3DI,EAAWH,SAASC,IAAI,EAAG,EAAG,GAC9Bd,KAAKe,UAAUC,GAEf,MAAMC,EAAa,IAAIL,EAAoB,IAAU,EAAG,EAAG,IAC3DK,EAAWJ,SAASC,IAAI,EAAG,EAAG,GAC9Bd,KAAKe,UAAUE,GAET,MAAAC,EAAmB,IAAIC,EAAoBR,GAC3CS,EAAmB,IAAID,EAAoBH,GAC3CK,EAAmB,IAAIF,EAAoBF,GAC5CjB,KAAAe,UAAUG,EAAkBE,EAAkBC,GAE9CrB,KAAAsB,OAAOX,EAAY,QACnBX,KAAAsB,OAAON,EAAY,QACnBhB,KAAAsB,OAAOL,EAAY,QAGxB,MAAMM,EAAW,IAAIC,EAAkB,IAAM,GAAK,KAC5CC,EAAc,IAAIC,EAA2B,CACjDC,MAAO,SACPC,UAAW,GACXC,UAAW,IAEPC,EAAc,IAAIC,EAAWR,EAAUE,GAC7CzB,KAAKe,UAAUe,GAGf,MAAME,EAAU,IAAIC,EAAwB,IAAK,GAAK,IAAK,IACrDC,EAAU,IAAIR,EAA2B,CAAEC,MAAO,SAAUC,UAAW,EAAGC,UAAW,IACrFM,EAAW,IAAIJ,EAAWC,EAASE,GACzCC,EAAStB,SAASC,IAAI,EAAG,EAAG,GAC5Bd,KAAKmC,SAAWA,EAChBnC,KAAKe,UAAUoB,EACjB,CAEA,MAAAb,CAAOc,EAAOC,GACArC,KAAKC,IAGdqC,SAAS,CAAEX,MAAOS,EAAMT,MAAMY,UAAY,SAC1CF,KAAKA,GACLG,UAAcC,IACPL,EAAAT,MAAMb,IAAI2B,EAAC,GAEvB,CAEA,YAAAC,GACE1C,KAAKmC,SAASQ,SAASC,EAAIC,KAAKC,MAAQ,GAC1C,4DChEF,MAAAC,EAAAC,IACAnD,EAAA,CAAgEoD,aAAA,CAChDC,SAAA,GAEdC,iBAAA,CACkBD,SAAA,GAElBE,OAAA,CACQvC,SAAA,CAAA,EAAA,GAAA,MAIV,IAAAwC,SAEAC,GAAA,KACEzD,EAAAS,UAAAyC,EAAAQ,MACAF,EAAA,IAAA3D,EAAAG,GACAwD,EAAAG,MAEAC,EAAAJ,GAAAK"}