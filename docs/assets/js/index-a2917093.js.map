{"version":3,"file":"index-a2917093.js","sources":["../../../code/src/pages/webgl/effect/side/methods.ts","../../../code/src/pages/webgl/effect/side/index.vue"],"sourcesContent":["import * as THREE from 'three'\nimport * as ThreeScene from 'three-scene'\nimport { GUI } from 'dat.gui'\n\nexport class NewThreeScene extends ThreeScene.Scene {\n  gui: InstanceType<typeof GUI>\n\n  material?: InstanceType<typeof THREE.MeshPhongMaterial>\n  outLineMaterial?: InstanceType<typeof THREE.MeshPhongMaterial>\n\n  constructor(options: ConstructorParameters<typeof ThreeScene.Scene>[0]) {\n    super(options)\n    this.addModel()\n\n    this.gui = new GUI()\n    this.addGui()\n  }\n\n  addModel() {\n    // const ground = this.createGround()\n    // this.addObject(ground)\n\n    const gap = 20\n    // 球形几何体\n    const shpere = new THREE.SphereGeometry(10, 32, 32)\n    const mat = new THREE.MeshPhongMaterial({\n      color: 0x137b02,\n      shininess: 2, // 高亮\n      specular: 0x30e3ca,\n      side: THREE.BackSide\n    })\n    const shpereMesh = new THREE.Mesh(shpere, mat)\n    shpereMesh.position.y = gap\n    shpereMesh.position.x = -gap\n    shpereMesh.castShadow = true\n\n    // 圆环缓冲扭结几何体\n    const torus = new THREE.TorusKnotGeometry(10, 3, 100, 16)\n    const torusMesh = new THREE.Mesh(torus, mat)\n    torusMesh.position.x = gap\n    torusMesh.position.y = gap\n    torusMesh.castShadow = true\n\n    const outMat = new THREE.MeshPhongMaterial({\n      color: 0xffde7d,\n      side: THREE.BackSide\n    })\n    this.outLineMaterial = outMat\n    const outline = new THREE.Mesh(torus, outMat)\n    outline.scale.setScalar(1.05)\n    outline.position.copy(torusMesh.position)\n\n    // 平面\n    const size = 20\n    const plane = new THREE.PlaneGeometry(size, size)\n    const planeMesh = new THREE.Mesh(plane, mat)\n    planeMesh.position.x = -2 * gap - size\n    planeMesh.position.y = gap\n    planeMesh.castShadow = true\n\n    this.addObject(shpereMesh, torusMesh, outline, planeMesh)\n\n    this.material = mat\n  }\n\n  addGui() {\n    const gui = this.gui\n\n    // THREE.FrontSide\t背面\n    // THREE.BackSide\t前面\n    // THREE.DoubleSide 双面\n    gui\n      .add(this.material, 'side', {\n        FrontSide: THREE.FrontSide,\n        BackSide: THREE.BackSide,\n        DoubleSide: THREE.DoubleSide\n      })\n      .onChange(e => {\n        if (!this.material) return\n        this.material.side = Number(e) as any\n      })\n\n    if (!this.outLineMaterial) return\n    const option = {\n      color: this.outLineMaterial.color.getHex()\n    }\n    gui\n      .addColor(option, 'color')\n      .name('轮廓颜色')\n      .onChange(e => {\n        if (!this.outLineMaterial) return\n        this.outLineMaterial.color.set(e)\n      })\n\n    gui.domElement.className += ' gui-wrap'\n    this.container.parentNode?.appendChild(gui.domElement)\n  }\n}\n","<template>\n  <div class=\"three-page\">\n    <div class=\"h-100\" ref=\"containerRef\"></div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { NewThreeScene } from './methods'\n\nimport { useResize } from '@/hooks/scene-resize'\nimport { Hooks } from 'three-scene'\n\nconst containerRef = ref()\nconst options: ConstructorParameters<typeof NewThreeScene>[0] = {\n  grid: {\n    visible: true\n  }\n}\nlet scene: InstanceType<typeof NewThreeScene>\n\nconst { backgroundLoad } = Hooks.useBackground()\n\nconst initPage = () => {\n  backgroundLoad(scene, '501')\n}\n\nonMounted(() => {\n  options.container = containerRef.value\n  scene = new NewThreeScene(options)\n  scene.run()\n  useResize(scene).resize()\n\n  initPage()\n})\n</script>\n\n<style lang=\"scss\" module></style>\n"],"names":["NewThreeScene","ThreeScene.Scene","constructor","options","super","__publicField","this","addModel","gui","GUI","addGui","gap","shpere","THREE.SphereGeometry","mat","THREE.MeshPhongMaterial","color","shininess","specular","side","THREE.BackSide","shpereMesh","THREE.Mesh","position","y","x","castShadow","torus","THREE.TorusKnotGeometry","torusMesh","outMat","outLineMaterial","outline","scale","setScalar","copy","plane","THREE.PlaneGeometry","planeMesh","addObject","material","add","FrontSide","BackSide","DoubleSide","onChange","e","Number","option","getHex","addColor","name","set","domElement","className","_a","container","parentNode","appendChild","containerRef","ref","grid","visible","scene","backgroundLoad","Hooks","useBackground","onMounted","value","run","useResize","resize"],"mappings":"6YAIa,MAAAA,UAAsBC,EAMjC,WAAAC,CAAYC,GACVC,MAAMD,GANRE,EAAAC,KAAA,OAEAD,EAAAC,KAAA,YACAD,EAAAC,KAAA,mBAIEA,KAAKC,WAEAD,KAAAE,IAAM,IAAIC,EACfH,KAAKI,QACP,CAEA,QAAAH,GAIE,MAAMI,EAAM,GAENC,EAAS,IAAIC,EAAqB,GAAI,GAAI,IAC1CC,EAAM,IAAIC,EAAwB,CACtCC,MAAO,QACPC,UAAW,EACXC,SAAU,QACVC,KAAMC,IAEFC,EAAa,IAAIC,EAAWV,EAAQE,GAC1CO,EAAWE,SAASC,EAAIb,EACbU,EAAAE,SAASE,GAAI,GACxBJ,EAAWK,YAAa,EAGxB,MAAMC,EAAQ,IAAIC,EAAwB,GAAI,EAAG,IAAK,IAChDC,EAAY,IAAIP,EAAWK,EAAOb,GACxCe,EAAUN,SAASE,EAAId,EACvBkB,EAAUN,SAASC,EAAIb,EACvBkB,EAAUH,YAAa,EAEjB,MAAAI,EAAS,IAAIf,EAAwB,CACzCC,MAAO,SACPG,KAAMC,IAERd,KAAKyB,gBAAkBD,EACvB,MAAME,EAAU,IAAIV,EAAWK,EAAOG,GAC9BE,EAAAC,MAAMC,UAAU,MAChBF,EAAAT,SAASY,KAAKN,EAAUN,UAGhC,MACMa,EAAQ,IAAIC,EADL,OAEPC,EAAY,IAAIhB,EAAWc,EAAOtB,GAC9BwB,EAAAf,SAASE,GAAI,GACvBa,EAAUf,SAASC,EAAIb,EACvB2B,EAAUZ,YAAa,EAEvBpB,KAAKiC,UAAUlB,EAAYQ,EAAWG,EAASM,GAE/ChC,KAAKkC,SAAW1B,CAClB,CAEA,MAAAJ,SACE,MAAMF,EAAMF,KAAKE,IAgBjB,GAVGA,EAAAiC,IAAInC,KAAKkC,SAAU,OAAQ,CAC1BE,YACAC,WACAC,eAEDC,UAAcC,IACRxC,KAAKkC,WACLlC,KAAAkC,SAASrB,KAAO4B,OAAOD,GAAC,KAG5BxC,KAAKyB,gBAAiB,OAC3B,MAAMiB,EAAS,CACbhC,MAAOV,KAAKyB,gBAAgBf,MAAMiC,UAGjCzC,EAAA0C,SAASF,EAAQ,SACjBG,KAAK,QACLN,UAAcC,IACRxC,KAAKyB,iBACLzB,KAAAyB,gBAAgBf,MAAMoC,IAAIN,EAAC,IAGpCtC,EAAI6C,WAAWC,WAAa,YAC5B,OAAAC,EAAAjD,KAAKkD,UAAUC,aAAYF,EAAAG,YAAYlD,EAAI6C,WAC7C,4DCpFF,MAAAM,EAAAC,IACAzD,EAAA,CAAgE0D,KAAA,CACxDC,SAAA,IAIR,IAAAC,EAEA,MAAAC,eAAAA,GAAAC,EAAAC,uBAMAC,GAAA,KACEhE,EAAAqD,UAAAG,EAAAS,MACAL,EAAA,IAAA/D,EAAAG,GACA4D,EAAAM,MACAC,EAAAP,GAAAQ,SAPAP,EAAAD,EAAA"}