{"version":3,"file":"index-0b561405.js","sources":["../../../code/src/pages/webgpu/effect/sky/methods.ts","../../../code/src/pages/webgpu/effect/sky/index.vue"],"sourcesContent":["import * as THREE from 'three/webgpu'\nimport { RGBMLoader } from 'three/examples/jsm/loaders/RGBMLoader'\nimport * as ThreeScene from 'three-scene'\nimport { gaussianBlur } from 'three/examples/jsm/tsl/display/GaussianBlurNode'\n\nimport { GUI } from 'dat.gui'\n\nconst TSL = THREE.TSL\n\nconst {\n  color,\n  vec2,\n  pass,\n  linearDepth,\n  normalWorld,\n  // triplanarTexture,\n  // texture,\n  objectPosition,\n  screenUV,\n  viewportLinearDepth,\n  viewportDepthTexture,\n  viewportSharedTexture,\n  mx_worley_noise_float,\n  positionWorld,\n  time\n} = TSL\nconst Hooks = ThreeScene.Hooks\n\nconst { getBgGroup } = Hooks.useBackground()\n\nconst base = import.meta.env.VITE_BEFORE_STATIC_PATH\nconst textureLoader = new THREE.TextureLoader()\nconst iceDiffuse = textureLoader.load(`${base}/oss/textures/gpu/water.jpg`)\niceDiffuse.wrapS = THREE.RepeatWrapping\niceDiffuse.wrapT = THREE.RepeatWrapping\niceDiffuse.colorSpace = THREE.NoColorSpace\n\nconst adjustments = {\n  mix: 0,\n  procedural: 0,\n  intensity: 1,\n  hue: 0,\n  saturation: 1\n}\n\nconst params = {\n  offsetCube1: 0,\n  offsetCube2: 0\n}\n\nexport class SkyScene extends ThreeScene.Scene {\n  // 水面\n  water?: any\n\n  blurNode: any\n\n  mixNode: any\n  proceduralNode: any\n  intensityNode: any\n  hueNode: any\n  saturationNode: any\n\n  rotateY1Matrix: any\n  rotateY2Matrix: any\n\n  cube1Texture: any\n  cube2Texture: any\n\n  postProcessing: any\n\n  gui: InstanceType<typeof GUI>\n\n  floor: any\n\n  constructor(options: ConstructorParameters<typeof ThreeScene.Scene>[0]) {\n    super(options)\n\n    this.postProcessing = null\n    this.blurNode = TSL.uniform(0)\n\n    this.mixNode = TSL.reference('mix', 'float', adjustments)\n    this.proceduralNode = TSL.reference('procedural', 'float', adjustments)\n    this.intensityNode = TSL.reference('intensity', 'float', adjustments)\n    this.hueNode = TSL.reference('hue', 'float', adjustments)\n    this.saturationNode = TSL.reference('saturation', 'float', adjustments)\n\n    this.rotateY1Matrix = new THREE.Matrix4()\n    this.rotateY2Matrix = new THREE.Matrix4()\n\n    const waterAmbientLight = new THREE.HemisphereLight(0x333366, 0x74ccf4, 5)\n    const skyAmbientLight = new THREE.HemisphereLight(0x74ccf4, 0, 1)\n\n    this.addObject(skyAmbientLight)\n    this.addObject(waterAmbientLight)\n\n    this.addModel()\n    this.addWater()\n    this.addProcessing()\n\n    this.gui = new GUI()\n    this.addGui()\n  }\n\n  createRender() {\n    return new THREE.WebGPURenderer()\n  }\n\n  createDirectionalLight(color: string | number, intensity: number) {\n    return new THREE.DirectionalLight(color, intensity)\n  }\n\n  getEnvironmentNode = (reflectNode, positionNode) => {\n    const {\n      rotateY1Matrix,\n      rotateY2Matrix,\n      mixNode,\n      proceduralNode,\n      intensityNode,\n      hueNode,\n      saturationNode\n    } = this\n    const custom1UV = reflectNode.xyz.mul(TSL.uniform(rotateY1Matrix))\n    const custom2UV = reflectNode.xyz.mul(TSL.uniform(rotateY2Matrix))\n    const mixCubeMaps = TSL.mix(\n      TSL.pmremTexture(this.cube1Texture, custom1UV),\n      TSL.pmremTexture(this.cube2Texture, custom2UV),\n      positionNode.y.add(mixNode).clamp()\n    )\n\n    const proceduralEnv = TSL.mix(mixCubeMaps, TSL.normalWorld, proceduralNode)\n\n    const intensityFilter = proceduralEnv.mul(intensityNode)\n    const hueFilter = TSL.hue(intensityFilter, hueNode)\n    return TSL.saturation(hueFilter, saturationNode)\n  }\n\n  async addModel() {\n    let cube1Texture = await new RGBMLoader()\n      .setMaxRange(16)\n      // .setPath('/oss/img/sky/228/')\n      // .loadCubemapAsync(['posX.png', 'posY.png', 'posZ.png', 'negX.png', 'negY.png', 'negZ.png'])\n      .loadCubemap(getBgGroup('601', 'png'))\n    cube1Texture = await new THREE.CubeTextureLoader().loadAsync(getBgGroup('104'))\n    cube1Texture.generateMipmaps = true\n    cube1Texture.minFilter = THREE.LinearMipmapLinearFilter\n    this.cube1Texture = cube1Texture\n\n    // .setPath('/oss/img/sky/221/')\n    // .loadAsync(['posX.jpeg', 'posY.jpeg', 'posZ.jpeg', 'negX.jpeg', 'negY.jpeg', 'negZ.jpeg'])\n    const cube2Texture = await new THREE.CubeTextureLoader().loadAsync(getBgGroup('101'))\n    cube2Texture.generateMipmaps = true\n    cube2Texture.minFilter = THREE.LinearMipmapLinearFilter\n    this.cube2Texture = cube2Texture\n\n    // 环境纹理\n    this.scene.environmentNode = this.getEnvironmentNode(TSL.reflectVector, TSL.positionWorld)\n\n    // 背景\n    this.scene.backgroundNode = this.getEnvironmentNode(\n      TSL.positionWorldDirection,\n      TSL.positionLocal\n    ).context({\n      getTextureLevel: () => this.blurNode\n    })\n\n    const sphere = new THREE.Mesh(\n      new THREE.SphereGeometry(0.5, 64, 32),\n      new THREE.MeshStandardMaterial({\n        metalness: 1, // 金属度\n        roughness: 0 // 粗糙度\n      })\n    )\n    this.addObject(sphere)\n  }\n\n  addWater() {\n    this.scene.backgroundNode = normalWorld.y.mix(color(0x0487e2), color(0x0066ff))\n\n    const timer = time.mul(0.8)\n    const floorUV = positionWorld.xzy\n\n    const waterLayer0 = mx_worley_noise_float(floorUV.mul(4).add(timer))\n    const waterLayer1 = mx_worley_noise_float(floorUV.mul(2).add(timer))\n\n    const waterIntensity = waterLayer0.mul(waterLayer1)\n    const waterColor = waterIntensity.mul(1.4).mix(color(0x0487e2), color(0x74ccf4))\n\n    // linearDepth() returns the linear depth of the mesh\n    const depth = linearDepth()\n    const depthWater = viewportLinearDepth.sub(depth)\n    const depthEffect = depthWater.remapClamp(-0.002, 0.04)\n\n    const refractionUV = screenUV.add(vec2(0, waterIntensity.mul(0.1)))\n\n    // linearDepth( viewportDepthTexture( uv ) ) return the linear depth of the scene\n    const depthTestForRefraction = linearDepth(viewportDepthTexture(refractionUV)).sub(depth)\n\n    const depthRefraction = depthTestForRefraction.remapClamp(0, 0.1)\n\n    const finalUV = depthTestForRefraction.lessThan(0).select(screenUV, refractionUV)\n\n    const viewportTexture = viewportSharedTexture(finalUV)\n\n    const waterMaterial = new THREE.MeshBasicNodeMaterial()\n    waterMaterial.colorNode = waterColor\n    waterMaterial.backdropNode = depthEffect.mix(\n      viewportSharedTexture(),\n      viewportTexture.mul(depthRefraction.mix(1, waterColor))\n    )\n    waterMaterial.backdropAlphaNode = depthRefraction.oneMinus()\n    waterMaterial.transparent = true\n\n    const water = new THREE.Mesh(new THREE.BoxGeometry(50, 0.001, 50), waterMaterial)\n    water.position.set(0, 0, 0)\n\n    this.water = water\n    this.addObject(this.water)\n  }\n\n  addProcessing() {\n    this.controls?.target.set(0, 0.2, 0)\n\n    // 后期处理\n    const { camera, scene, renderer } = this\n    const scenePass = pass(scene, camera)\n    const scenePassColor = scenePass.getTextureNode()\n    const scenePassDepth = scenePass.getLinearDepthNode().remapClamp(0.3, 0.5)\n\n    const waterMask = objectPosition(camera).y.greaterThan(screenUV.y.sub(0.5).mul(camera.near))\n\n    const scenePassColorBlurred = gaussianBlur(scenePassColor)\n    scenePassColorBlurred.directionNode = waterMask.select(\n      scenePassDepth,\n      scenePass.getLinearDepthNode().mul(5)\n    )\n\n    const vignette = screenUV.distance(0.5).mul(1.35).clamp().oneMinus()\n\n    const postProcessing = new THREE.PostProcessing(renderer)\n    postProcessing.needsUpdate = true\n\n    postProcessing.outputNode = waterMask.select(\n      scenePassColorBlurred,\n      scenePassColorBlurred.mul(color(0x74ccf4)).mul(vignette)\n    )\n    this.postProcessing = postProcessing\n  }\n\n  addGui() {\n    const gui = this.gui\n\n    gui\n      .add({ blurBackground: this.blurNode.value }, 'blurBackground', 0, 1, 0.01)\n      .name('背景模糊')\n      .onChange(value => {\n        this.blurNode.value = value\n      })\n\n    gui.add(adjustments, 'mix', -1, 2, 0.01).name('混合')\n    // gui.add(adjustments, 'procedural', 0, 1, 0.01)\n    gui.add(adjustments, 'intensity', 0, 5, 0.01).name('曝光')\n    // gui.add(adjustments, 'hue', 0, Math.PI * 2, 0.01).name('色调)\n    gui.add(adjustments, 'saturation', 0, 2, 0.01).name('饱和度')\n\n    gui.domElement.className += ' gui-wrap'\n    this.container.parentNode?.appendChild(gui.domElement)\n  }\n\n  animate(): void {\n    if (!this.postProcessing) return\n    this.postProcessing.renderAsync()\n\n    if (!this.cube2Texture) return\n    params.offsetCube1 += 0.001\n    params.offsetCube2 += 0.0005\n    this.rotateY1Matrix.makeRotationY(params.offsetCube1)\n    this.rotateY2Matrix.makeRotationY(params.offsetCube2)\n  }\n\n  dispose(): void {\n    // this.postProcessing.renderer.dispose()\n    this.postProcessing = null\n    this.blurNode = null\n    this.mixNode = null\n    this.proceduralNode = null\n    this.intensityNode = null\n    this.hueNode = null\n    this.saturationNode = null\n    this.rotateY1Matrix = null\n    this.rotateY2Matrix = null\n\n    this.cube1Texture?.dispose()\n    this.cube2Texture?.dispose()\n    this.gui = null\n    super.dispose()\n  }\n}\n","<template>\n  <div class=\"three-page\">\n    <div class=\"h-100\" ref=\"containerRef\"></div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { SkyScene } from './methods'\nimport { useResize } from '@/hooks/scene-resize'\n\nconst containerRef = ref()\nconst options: ConstructorParameters<typeof SkyScene>[0] = {\n  // 使用灯光 控制台会有警告\n  directionalLight: {\n    color: 0xffe499,\n    intensity: 5,\n    position: [0.5, 3, 0.5],\n    light2: false\n  },\n  ambientLight: {\n    visible: false\n  },\n  render: {\n    logarithmicDepthBuffer: false\n  },\n  camera: {\n    near: 0.25,\n    far: 25,\n    position: [3, 2, 4]\n  },\n  controls: {\n    minDistance: 1,\n    maxDistance: 10,\n    maxPolarAngle: Math.PI * 0.9\n  }\n}\nlet scene: InstanceType<typeof SkyScene>\n\nonMounted(() => {\n  options.container = containerRef.value\n  scene = new SkyScene(options)\n  scene.run()\n\n  useResize(scene).resize()\n})\n</script>\n\n<style lang=\"scss\"></style>\n"],"names":["TSL","THREE.TSL","color","vec2","pass","linearDepth","normalWorld","objectPosition","screenUV","viewportLinearDepth","viewportDepthTexture","viewportSharedTexture","mx_worley_noise_float","positionWorld","time","Hooks","ThreeScene.Hooks","getBgGroup","useBackground","iceDiffuse","THREE.TextureLoader","load","wrapS","THREE.RepeatWrapping","wrapT","colorSpace","THREE.NoColorSpace","adjustments","mix","procedural","intensity","hue","saturation","params","offsetCube1","offsetCube2","SkyScene","ThreeScene.Scene","constructor","options","super","__publicField","this","reflectNode","positionNode","rotateY1Matrix","rotateY2Matrix","mixNode","proceduralNode","intensityNode","hueNode","saturationNode","custom1UV","xyz","mul","uniform","custom2UV","mixCubeMaps","pmremTexture","cube1Texture","cube2Texture","y","add","clamp","intensityFilter","hueFilter","postProcessing","blurNode","reference","THREE.Matrix4","waterAmbientLight","THREE.HemisphereLight","skyAmbientLight","addObject","addModel","addWater","addProcessing","gui","GUI","addGui","createRender","THREE.WebGPURenderer","createDirectionalLight","THREE.DirectionalLight","RGBMLoader","setMaxRange","loadCubemap","THREE.CubeTextureLoader","loadAsync","generateMipmaps","minFilter","THREE.LinearMipmapLinearFilter","scene","environmentNode","getEnvironmentNode","reflectVector","backgroundNode","positionWorldDirection","positionLocal","context","getTextureLevel","sphere","THREE.Mesh","THREE.SphereGeometry","THREE.MeshStandardMaterial","metalness","roughness","timer","floorUV","xzy","waterLayer0","waterLayer1","waterIntensity","waterColor","depth","depthEffect","sub","remapClamp","refractionUV","depthTestForRefraction","depthRefraction","finalUV","lessThan","select","viewportTexture","waterMaterial","THREE.MeshBasicNodeMaterial","colorNode","backdropNode","backdropAlphaNode","oneMinus","transparent","water","THREE.BoxGeometry","position","set","_a","controls","target","camera","renderer","scenePass","scenePassColor","getTextureNode","scenePassDepth","getLinearDepthNode","waterMask","greaterThan","near","scenePassColorBlurred","gaussianBlur","directionNode","vignette","distance","THREE.PostProcessing","needsUpdate","outputNode","blurBackground","value","name","onChange","domElement","className","container","parentNode","appendChild","animate","renderAsync","makeRotationY","dispose","_b","containerRef","ref","directionalLight","light2","ambientLight","visible","render","logarithmicDepthBuffer","far","minDistance","maxDistance","maxPolarAngle","Math","PI","onMounted","run","useResize","resize"],"mappings":"6dAOA,MAAMA,EAAMC,GAENC,MACJA,EAAAC,KACAA,EAAAC,KACAA,EAAAC,YACAA,EAAAC,YACAA,EAAAC,eAGAA,EAAAC,SACAA,EAAAC,oBACAA,EAAAC,qBACAA,EAAAC,sBACAA,EAAAC,sBACAA,EAAAC,cACAA,EAAAC,KACAA,GACEd,EACEe,EAAQC,GAERC,WAAEA,GAAeF,EAAMG,gBAIvBC,GADgB,IAAIC,GACOC,KAAK,+BACtCF,EAAWG,MAAQC,EACnBJ,EAAWK,MAAQD,EACnBJ,EAAWM,WAAaC,EAExB,MAAMC,EAAc,CAClBC,IAAK,EACLC,WAAY,EACZC,UAAW,EACXC,IAAK,EACLC,WAAY,GAGRC,EAAS,CACbC,YAAa,EACbC,YAAa,GAGF,MAAAC,UAAiBC,EAwB5B,WAAAC,CAAYC,GACVC,MAAMD,GAvBRE,EAAAC,KAAA,SAEAD,EAAAC,KAAA,YAEAD,EAAAC,KAAA,WACAD,EAAAC,KAAA,kBACAD,EAAAC,KAAA,iBACAD,EAAAC,KAAA,WACAD,EAAAC,KAAA,kBAEAD,EAAAC,KAAA,kBACAD,EAAAC,KAAA,kBAEAD,EAAAC,KAAA,gBACAD,EAAAC,KAAA,gBAEAD,EAAAC,KAAA,kBAEAD,EAAAC,KAAA,OAEAD,EAAAC,KAAA,SAuCqBD,EAAAC,KAAA,sBAAA,CAACC,EAAaC,KAC3B,MAAAC,eACJA,EAAAC,eACAA,EAAAC,QACAA,EAAAC,eACAA,EAAAC,cACAA,EAAAC,QACAA,EAAAC,eACAA,GACET,KACEU,EAAYT,EAAYU,IAAIC,IAAItD,EAAIuD,QAAQV,IAC5CW,EAAYb,EAAYU,IAAIC,IAAItD,EAAIuD,QAAQT,IAC5CW,EAAczD,EAAI4B,IACtB5B,EAAI0D,aAAahB,KAAKiB,aAAcP,GACpCpD,EAAI0D,aAAahB,KAAKkB,aAAcJ,GACpCZ,EAAaiB,EAAEC,IAAIf,GAASgB,SAKxBC,EAFgBhE,EAAI4B,IAAI6B,EAAazD,EAAIM,YAAa0C,GAEtBM,IAAIL,GACpCgB,EAAYjE,EAAI+B,IAAIiC,EAAiBd,GACpC,OAAAlD,EAAIgC,WAAWiC,EAAWd,EAAc,IAxD/CT,KAAKwB,eAAiB,KACjBxB,KAAAyB,SAAWnE,EAAIuD,QAAQ,GAE5Bb,KAAKK,QAAU/C,EAAIoE,UAAU,MAAO,QAASzC,GAC7Ce,KAAKM,eAAiBhD,EAAIoE,UAAU,aAAc,QAASzC,GAC3De,KAAKO,cAAgBjD,EAAIoE,UAAU,YAAa,QAASzC,GACzDe,KAAKQ,QAAUlD,EAAIoE,UAAU,MAAO,QAASzC,GAC7Ce,KAAKS,eAAiBnD,EAAIoE,UAAU,aAAc,QAASzC,GAEtDe,KAAAG,eAAiB,IAAIwB,EACrB3B,KAAAI,eAAiB,IAAIuB,EAE1B,MAAMC,EAAoB,IAAIC,EAAsB,QAAU,QAAU,GAClEC,EAAkB,IAAID,EAAsB,QAAU,EAAG,GAE/D7B,KAAK+B,UAAUD,GACf9B,KAAK+B,UAAUH,GAEf5B,KAAKgC,WACLhC,KAAKiC,WACLjC,KAAKkC,gBAEAlC,KAAAmC,IAAM,IAAIC,EACfpC,KAAKqC,QACP,CAEA,YAAAC,GACS,OAAA,IAAIC,CACb,CAEA,sBAAAC,CAAuBhF,EAAwB4B,GACtC,OAAA,IAAIqD,EAAuBjF,EAAO4B,EAC3C,CA2BA,cAAM4C,GACJ,IAAIf,QAAqB,IAAIyB,GAC1BC,YAAY,IAGZC,YAAYrE,EAAW,MAAO,QAClB0C,QAAM,IAAI4B,GAA0BC,UAAUvE,EAAW,QACxE0C,EAAa8B,iBAAkB,EAC/B9B,EAAa+B,UAAYC,EACzBjD,KAAKiB,aAAeA,EAId,MAAAC,QAAqB,IAAI2B,GAA0BC,UAAUvE,EAAW,QAC9E2C,EAAa6B,iBAAkB,EAC/B7B,EAAa8B,UAAYC,EACzBjD,KAAKkB,aAAeA,EAGpBlB,KAAKkD,MAAMC,gBAAkBnD,KAAKoD,mBAAmB9F,EAAI+F,cAAe/F,EAAIa,eAGvE6B,KAAAkD,MAAMI,eAAiBtD,KAAKoD,mBAC/B9F,EAAIiG,uBACJjG,EAAIkG,eACJC,QAAQ,CACRC,gBAAiB,IAAM1D,KAAKyB,WAGxB,MAAAkC,EAAS,IAAIC,EACjB,IAAIC,EAAqB,GAAK,GAAI,IAClC,IAAIC,EAA2B,CAC7BC,UAAW,EACXC,UAAW,KAGfhE,KAAK+B,UAAU4B,EACjB,CAEA,QAAA1B,GACOjC,KAAAkD,MAAMI,eAAiB1F,EAAYuD,EAAEjC,IAAI1B,EAAM,QAAWA,EAAM,QAE/D,MAAAyG,EAAQ7F,EAAKwC,IAAI,IACjBsD,EAAU/F,EAAcgG,IAExBC,EAAclG,EAAsBgG,EAAQtD,IAAI,GAAGQ,IAAI6C,IACvDI,EAAcnG,EAAsBgG,EAAQtD,IAAI,GAAGQ,IAAI6C,IAEvDK,EAAiBF,EAAYxD,IAAIyD,GACjCE,EAAaD,EAAe1D,IAAI,KAAK1B,IAAI1B,EAAM,QAAWA,EAAM,UAGhEgH,EAAQ7G,IAER8G,EADa1G,EAAoB2G,IAAIF,GACZG,YAAW,KAAQ,KAE5CC,EAAe9G,EAASsD,IAAI3D,EAAK,EAAG6G,EAAe1D,IAAI,MAGvDiE,EAAyBlH,EAAYK,EAAqB4G,IAAeF,IAAIF,GAE7EM,EAAkBD,EAAuBF,WAAW,EAAG,IAEvDI,EAAUF,EAAuBG,SAAS,GAAGC,OAAOnH,EAAU8G,GAE9DM,EAAkBjH,EAAsB8G,GAExCI,EAAgB,IAAIC,EAC1BD,EAAcE,UAAYd,EAC1BY,EAAcG,aAAeb,EAAYvF,IACvCjB,IACAiH,EAAgBtE,IAAIkE,EAAgB5F,IAAI,EAAGqF,KAE/BY,EAAAI,kBAAoBT,EAAgBU,WAClDL,EAAcM,aAAc,EAEtB,MAAAC,EAAQ,IAAI9B,EAAW,IAAI+B,EAAkB,GAAI,KAAO,IAAKR,GACnEO,EAAME,SAASC,IAAI,EAAG,EAAG,GAEzB7F,KAAK0F,MAAQA,EACR1F,KAAA+B,UAAU/B,KAAK0F,MACtB,CAEA,aAAAxD,SACE,OAAA4D,EAAA9F,KAAK+F,WAALD,EAAeE,OAAOH,IAAI,EAAG,GAAK,GAGlC,MAAMI,OAAEA,EAAA/C,MAAQA,EAAOgD,SAAAA,GAAalG,KAC9BmG,EAAYzI,EAAKwF,EAAO+C,GACxBG,EAAiBD,EAAUE,iBAC3BC,EAAiBH,EAAUI,qBAAqB5B,WAAW,GAAK,IAEhE6B,EAAY3I,EAAeoI,GAAQ9E,EAAEsF,YAAY3I,EAASqD,EAAEuD,IAAI,IAAK9D,IAAIqF,EAAOS,OAEhFC,EAAwBC,EAAaR,GAC3CO,EAAsBE,cAAgBL,EAAUvB,OAC9CqB,EACAH,EAAUI,qBAAqB3F,IAAI,IAG/B,MAAAkG,EAAWhJ,EAASiJ,SAAS,IAAKnG,IAAI,MAAMS,QAAQmE,WAEpDhE,EAAiB,IAAIwF,EAAqBd,GAChD1E,EAAeyF,aAAc,EAE7BzF,EAAe0F,WAAaV,EAAUvB,OACpC0B,EACAA,EAAsB/F,IAAIpD,EAAM,UAAWoD,IAAIkG,IAEjD9G,KAAKwB,eAAiBA,CACxB,CAEA,MAAAa,SACE,MAAMF,EAAMnC,KAAKmC,IAEjBA,EACGf,IAAI,CAAE+F,eAAgBnH,KAAKyB,SAAS2F,OAAS,iBAAkB,EAAG,EAAG,KACrEC,KAAK,QACLC,UAAkBF,IACjBpH,KAAKyB,SAAS2F,MAAQA,CAAA,IAGtBjF,EAAAf,IAAInC,EAAa,OAAO,EAAI,EAAG,KAAMoI,KAAK,MAE1ClF,EAAAf,IAAInC,EAAa,YAAa,EAAG,EAAG,KAAMoI,KAAK,MAE/ClF,EAAAf,IAAInC,EAAa,aAAc,EAAG,EAAG,KAAMoI,KAAK,OAEpDlF,EAAIoF,WAAWC,WAAa,YAC5B,OAAA1B,EAAA9F,KAAKyH,UAAUC,aAAY5B,EAAA6B,YAAYxF,EAAIoF,WAC7C,CAEA,OAAAK,GACO5H,KAAKwB,iBACVxB,KAAKwB,eAAeqG,cAEf7H,KAAKkB,eACV3B,EAAOC,aAAe,KACtBD,EAAOE,aAAe,KACjBO,KAAAG,eAAe2H,cAAcvI,EAAOC,aACpCQ,KAAAI,eAAe0H,cAAcvI,EAAOE,cAC3C,CAEA,OAAAsI,WAEE/H,KAAKwB,eAAiB,KACtBxB,KAAKyB,SAAW,KAChBzB,KAAKK,QAAU,KACfL,KAAKM,eAAiB,KACtBN,KAAKO,cAAgB,KACrBP,KAAKQ,QAAU,KACfR,KAAKS,eAAiB,KACtBT,KAAKG,eAAiB,KACtBH,KAAKI,eAAiB,KAEtB,OAAA0F,EAAA9F,KAAKiB,eAAc6E,EAAAiC,UACnB,OAAAC,EAAAhI,KAAKkB,eAAc8G,EAAAD,UACnB/H,KAAKmC,IAAM,KACXrC,MAAMiI,SACR,4DC7RF,MAAAE,EAAAC,IACArI,EAAA,CAA2DsI,iBAAA,CAEvC3K,MAAA,SACT4B,UAAA,EACIwG,SAAA,CAAA,GAAA,EAAA,IACWwC,QAAA,GAExBC,aAAA,CACcC,SAAA,GAEdC,OAAA,CACQC,wBAAA,GAERvC,OAAA,CACQS,KAAA,IACA+B,IAAA,GACD7C,SAAA,CAAA,EAAA,EAAA,IAEPG,SAAA,CACU2C,YAAA,EACKC,YAAA,GACAC,cAAA,GAAAC,KAAAC,KAIjB,IAAA5F,SAEA6F,GAAA,KACElJ,EAAA4H,UAAAQ,EAAAb,MACAlE,EAAA,IAAAxD,EAAAG,GACAqD,EAAA8F,MAEAC,EAAA/F,GAAAgG"}