@use '../mixins/function.scss' as *;
@use '../mixins/config.scss' as *;

@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

// 背景图片
@mixin bg-image( $url ) {
  background-image: url( $url );
  background-repeat: no-repeat;
  background-size: cover;
  background-position: center;
}


// 绝对居中
@mixin center {
  top: 50%;
  left: 50%;
  position: absolute;
  transform: translate(-50%, -50%);
}

// 最大面积+定位
@mixin position-full {
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  position: absolute;
}


$B: null;
$E: null;
// 块
@mixin block( $block) {
  $B: $block !global;

  .#{ $B } {
    @content;
  }
}

// 元素 $B 继承而来 在 b 方法内使用(嵌套使用)
@mixin ele( $element ) {
  $E: $element !global;
  $selector: &;
  $currentSelector: '';
  @each $unit in $element {
    $currentSelector: #{ $currentSelector +
      '.' +
      $B +
      $element-separator +
      $unit +
      ',' };
  }

  @if hitAllSpecialNestRule( $selector ) {
    @at-root {
      #{ $selector } {
        #{ $currentSelector } {
          @content;
        }
      }
    }
  } @else {
    @at-root {
      #{ $currentSelector } {
        @content;
      }
    }
  }
}

// 修饰符（挂载到根元素）
@mixin mod( $modifier ) {
  $selector: &;
  $currentSelector: '';
  @each $unit in $modifier {
    $currentSelector: #{ $currentSelector +
      $selector +
      $modifier-separator +
      $unit +
      ',' };
  }

  @at-root {
    #{ $currentSelector } {
      @content;
    }
  }
}

// 状态
@mixin when( $state ) {
  @at-root {
    &.#{ $state-prefix + $state } {
      @content;
    }
  }
}