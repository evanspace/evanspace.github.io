@forward 'function';
@forward 'utils';
@use 'config' as *;
// 块
@mixin b( $block ) {
  $B: $namespace + $common-separator + $block !global;

  .#{ $B } {
    @content;
  }
}

// 元素 $B 继承而来 在 b 方法内使用(嵌套使用)
@mixin e( $element ) {
  $E: $element !global;
  $selector: &;
  $currentSelector: '';
  @each $unit in $element {
    $currentSelector: #{ $currentSelector +
      '.' +
      $B +
      $element-separator +
      $unit +
      ',' };
  }

  @if hitAllSpecialNestRule( $selector ) {
    @at-root {
      #{ $selector } {
        #{ $currentSelector } {
          @content;
        }
      }
    }
  } @else {
    @at-root {
      #{ $currentSelector } {
        @content;
      }
    }
  }
}

// 修饰符（挂载到根元素）
@mixin m( $modifier ) {
  $selector: &;
  $currentSelector: '';
  @each $unit in $modifier {
    $currentSelector: #{ $currentSelector +
      $selector +
      $modifier-separator +
      $unit +
      ',' };
  }

  @at-root {
    #{ $currentSelector } {
      @content;
    }
  }
}

// 配置修饰
@mixin configurable-m( $modifier, $E-flag: false ) {
  $selector: &;
  $interpolation: '';

  @if $E-flag {
    $interpolation: $element-separator + $E-flag;
  }

  @at-root {
    #{ $selector } {
      .#{ $B + $interpolation + $modifier-separator + $modifier } {
        @content;
      }
    }
  }
}

// 状态
@mixin when( $state ) {
  @at-root {
    &.#{ $state-prefix + $state } {
      @content;
    }
  }
}


// dark
@mixin dark( $block ) {
  html.dark {
    @include b( $block ) {
      @content;
    }
  }
}